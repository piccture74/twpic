/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/moment/moment.js
var require_moment = __commonJS({
  "node_modules/moment/moment.js"(exports, module2) {
    (function(global, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global.moment = factory();
    })(exports, function() {
      "use strict";
      var hookCallback;
      function hooks() {
        return hookCallback.apply(null, arguments);
      }
      function setHookCallback(callback) {
        hookCallback = callback;
      }
      function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
      }
      function isObject(input) {
        return input != null && Object.prototype.toString.call(input) === "[object Object]";
      }
      function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }
      function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k;
          for (k in obj) {
            if (hasOwnProp(obj, k)) {
              return false;
            }
          }
          return true;
        }
      }
      function isUndefined(input) {
        return input === void 0;
      }
      function isNumber(input) {
        return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
      }
      function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
      }
      function map2(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
          res.push(fn(arr[i], i));
        }
        return res;
      }
      function extend(a, b) {
        for (var i in b) {
          if (hasOwnProp(b, i)) {
            a[i] = b[i];
          }
        }
        if (hasOwnProp(b, "toString")) {
          a.toString = b.toString;
        }
        if (hasOwnProp(b, "valueOf")) {
          a.valueOf = b.valueOf;
        }
        return a;
      }
      function createUTC(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, true).utc();
      }
      function defaultParsingFlags() {
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidEra: null,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          era: null,
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false
        };
      }
      function getParsingFlags(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags();
        }
        return m._pf;
      }
      var some;
      if (Array.prototype.some) {
        some = Array.prototype.some;
      } else {
        some = function(fun) {
          var t = Object(this), len = t.length >>> 0, i;
          for (i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
              return true;
            }
          }
          return false;
        };
      }
      function isValid(m) {
        if (m._isValid == null) {
          var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i) {
            return i != null;
          }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
          if (m._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
          }
          if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
          } else {
            return isNowValid;
          }
        }
        return m._isValid;
      }
      function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
          extend(getParsingFlags(m), flags);
        } else {
          getParsingFlags(m).userInvalidated = true;
        }
        return m;
      }
      var momentProperties = hooks.momentProperties = [], updateInProgress = false;
      function copyConfig(to2, from2) {
        var i, prop, val;
        if (!isUndefined(from2._isAMomentObject)) {
          to2._isAMomentObject = from2._isAMomentObject;
        }
        if (!isUndefined(from2._i)) {
          to2._i = from2._i;
        }
        if (!isUndefined(from2._f)) {
          to2._f = from2._f;
        }
        if (!isUndefined(from2._l)) {
          to2._l = from2._l;
        }
        if (!isUndefined(from2._strict)) {
          to2._strict = from2._strict;
        }
        if (!isUndefined(from2._tzm)) {
          to2._tzm = from2._tzm;
        }
        if (!isUndefined(from2._isUTC)) {
          to2._isUTC = from2._isUTC;
        }
        if (!isUndefined(from2._offset)) {
          to2._offset = from2._offset;
        }
        if (!isUndefined(from2._pf)) {
          to2._pf = getParsingFlags(from2);
        }
        if (!isUndefined(from2._locale)) {
          to2._locale = from2._locale;
        }
        if (momentProperties.length > 0) {
          for (i = 0; i < momentProperties.length; i++) {
            prop = momentProperties[i];
            val = from2[prop];
            if (!isUndefined(val)) {
              to2[prop] = val;
            }
          }
        }
        return to2;
      }
      function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
          this._d = new Date(NaN);
        }
        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
        }
      }
      function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
      }
      function warn2(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
          console.warn("Deprecation warning: " + msg);
        }
      }
      function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function() {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
          }
          if (firstTime) {
            var args = [], arg, i, key;
            for (i = 0; i < arguments.length; i++) {
              arg = "";
              if (typeof arguments[i] === "object") {
                arg += "\n[" + i + "] ";
                for (key in arguments[0]) {
                  if (hasOwnProp(arguments[0], key)) {
                    arg += key + ": " + arguments[0][key] + ", ";
                  }
                }
                arg = arg.slice(0, -2);
              } else {
                arg = arguments[i];
              }
              args.push(arg);
            }
            warn2(
              msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
            );
            firstTime = false;
          }
          return fn.apply(this, arguments);
        }, fn);
      }
      var deprecations = {};
      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
          warn2(msg);
          deprecations[name] = true;
        }
      }
      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;
      function isFunction(input) {
        return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
      }
      function set2(config) {
        var prop, i;
        for (i in config) {
          if (hasOwnProp(config, i)) {
            prop = config[i];
            if (isFunction(prop)) {
              this[i] = prop;
            } else {
              this["_" + i] = prop;
            }
          }
        }
        this._config = config;
        this._dayOfMonthOrdinalParseLenient = new RegExp(
          (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
        );
      }
      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }
        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
            res[prop] = extend({}, res[prop]);
          }
        }
        return res;
      }
      function Locale(config) {
        if (config != null) {
          this.set(config);
        }
      }
      var keys;
      if (Object.keys) {
        keys = Object.keys;
      } else {
        keys = function(obj) {
          var i, res = [];
          for (i in obj) {
            if (hasOwnProp(obj, i)) {
              res.push(i);
            }
          }
          return res;
        };
      }
      var defaultCalendar = {
        sameDay: "[Today at] LT",
        nextDay: "[Tomorrow at] LT",
        nextWeek: "dddd [at] LT",
        lastDay: "[Yesterday at] LT",
        lastWeek: "[Last] dddd [at] LT",
        sameElse: "L"
      };
      function calendar(key, mom, now2) {
        var output = this._calendar[key] || this._calendar["sameElse"];
        return isFunction(output) ? output.call(mom, now2) : output;
      }
      function zeroFill(number, targetLength, forceSign) {
        var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
        return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }
      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
      function addFormatToken(token2, padded, ordinal2, callback) {
        var func = callback;
        if (typeof callback === "string") {
          func = function() {
            return this[callback]();
          };
        }
        if (token2) {
          formatTokenFunctions[token2] = func;
        }
        if (padded) {
          formatTokenFunctions[padded[0]] = function() {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
        }
        if (ordinal2) {
          formatTokenFunctions[ordinal2] = function() {
            return this.localeData().ordinal(
              func.apply(this, arguments),
              token2
            );
          };
        }
      }
      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, "");
        }
        return input.replace(/\\/g, "");
      }
      function makeFormatFunction(format2) {
        var array = format2.match(formattingTokens), i, length;
        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
          } else {
            array[i] = removeFormattingTokens(array[i]);
          }
        }
        return function(mom) {
          var output = "", i2;
          for (i2 = 0; i2 < length; i2++) {
            output += isFunction(array[i2]) ? array[i2].call(mom, format2) : array[i2];
          }
          return output;
        };
      }
      function formatMoment(m, format2) {
        if (!m.isValid()) {
          return m.localeData().invalidDate();
        }
        format2 = expandFormat(format2, m.localeData());
        formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
        return formatFunctions[format2](m);
      }
      function expandFormat(format2, locale2) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
          return locale2.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format2)) {
          format2 = format2.replace(
            localFormattingTokens,
            replaceLongDateFormatTokens
          );
          localFormattingTokens.lastIndex = 0;
          i -= 1;
        }
        return format2;
      }
      var defaultLongDateFormat = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
      };
      function longDateFormat(key) {
        var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format2 || !formatUpper) {
          return format2;
        }
        this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
          if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
            return tok.slice(1);
          }
          return tok;
        }).join("");
        return this._longDateFormat[key];
      }
      var defaultInvalidDate = "Invalid date";
      function invalidDate() {
        return this._invalidDate;
      }
      var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
      function ordinal(number) {
        return this._ordinal.replace("%d", number);
      }
      var defaultRelativeTime = {
        future: "in %s",
        past: "%s ago",
        s: "a few seconds",
        ss: "%d seconds",
        m: "a minute",
        mm: "%d minutes",
        h: "an hour",
        hh: "%d hours",
        d: "a day",
        dd: "%d days",
        w: "a week",
        ww: "%d weeks",
        M: "a month",
        MM: "%d months",
        y: "a year",
        yy: "%d years"
      };
      function relativeTime(number, withoutSuffix, string2, isFuture) {
        var output = this._relativeTime[string2];
        return isFunction(output) ? output(number, withoutSuffix, string2, isFuture) : output.replace(/%d/i, number);
      }
      function pastFuture(diff2, output) {
        var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
        return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
      }
      var aliases = {};
      function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
      }
      function normalizeUnits(units) {
        return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
      }
      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }
        return normalizedInput;
      }
      var priorities = {};
      function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
      }
      function getPrioritizedUnits(unitsObj) {
        var units = [], u;
        for (u in unitsObj) {
          if (hasOwnProp(unitsObj, u)) {
            units.push({ unit: u, priority: priorities[u] });
          }
        }
        units.sort(function(a, b) {
          return a.priority - b.priority;
        });
        return units;
      }
      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      }
      function absFloor(number) {
        if (number < 0) {
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }
      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
        }
        return value;
      }
      function makeGetSet(unit, keepTime) {
        return function(value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
          } else {
            return get(this, unit);
          }
        };
      }
      function get(mom, unit) {
        return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
      }
      function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
          if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
            value = toInt(value);
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](
              value,
              mom.month(),
              daysInMonth(value, mom.month())
            );
          } else {
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
          }
        }
      }
      function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units]();
        }
        return this;
      }
      function stringSet(units, value) {
        if (typeof units === "object") {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units), i;
          for (i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
          }
        } else {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
            return this[units](value);
          }
        }
        return this;
      }
      var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
      regexes = {};
      function addRegexToken(token2, regex, strictRegex) {
        regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
          return isStrict && strictRegex ? strictRegex : regex;
        };
      }
      function getParseRegexForToken(token2, config) {
        if (!hasOwnProp(regexes, token2)) {
          return new RegExp(unescapeFormat(token2));
        }
        return regexes[token2](config._strict, config._locale);
      }
      function unescapeFormat(s) {
        return regexEscape(
          s.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
          })
        );
      }
      function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      var tokens = {};
      function addParseToken(token2, callback) {
        var i, func = callback;
        if (typeof token2 === "string") {
          token2 = [token2];
        }
        if (isNumber(callback)) {
          func = function(input, array) {
            array[callback] = toInt(input);
          };
        }
        for (i = 0; i < token2.length; i++) {
          tokens[token2[i]] = func;
        }
      }
      function addWeekParseToken(token2, callback) {
        addParseToken(token2, function(input, array, config, token3) {
          config._w = config._w || {};
          callback(input, config._w, config, token3);
        });
      }
      function addTimeToArrayFromToken(token2, input, config) {
        if (input != null && hasOwnProp(tokens, token2)) {
          tokens[token2](input, config._a, config, token2);
        }
      }
      var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
      function mod(n, x) {
        return (n % x + x) % x;
      }
      var indexOf;
      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
      } else {
        indexOf = function(o) {
          var i;
          for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
              return i;
            }
          }
          return -1;
        };
      }
      function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
      }
      addFormatToken("M", ["MM", 2], "Mo", function() {
        return this.month() + 1;
      });
      addFormatToken("MMM", 0, 0, function(format2) {
        return this.localeData().monthsShort(this, format2);
      });
      addFormatToken("MMMM", 0, 0, function(format2) {
        return this.localeData().months(this, format2);
      });
      addUnitAlias("month", "M");
      addUnitPriority("month", 8);
      addRegexToken("M", match1to2);
      addRegexToken("MM", match1to2, match2);
      addRegexToken("MMM", function(isStrict, locale2) {
        return locale2.monthsShortRegex(isStrict);
      });
      addRegexToken("MMMM", function(isStrict, locale2) {
        return locale2.monthsRegex(isStrict);
      });
      addParseToken(["M", "MM"], function(input, array) {
        array[MONTH] = toInt(input) - 1;
      });
      addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
        var month = config._locale.monthsParse(input, token2, config._strict);
        if (month != null) {
          array[MONTH] = month;
        } else {
          getParsingFlags(config).invalidMonth = input;
        }
      });
      var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
        "_"
      ), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split(
        "_"
      ), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
      function localeMonths(m, format2) {
        if (!m) {
          return isArray(this._months) ? this._months : this._months["standalone"];
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
      }
      function localeMonthsShort(m, format2) {
        if (!m) {
          return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
      }
      function handleStrictParse(monthName, format2, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i = 0; i < 12; ++i) {
            mom = createUTC([2e3, i]);
            this._shortMonthsParse[i] = this.monthsShort(
              mom,
              ""
            ).toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeMonthsParse(monthName, format2, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format2, strict);
        }
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        }
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp(
              "^" + this.months(mom, "").replace(".", "") + "$",
              "i"
            );
            this._shortMonthsParse[i] = new RegExp(
              "^" + this.monthsShort(mom, "").replace(".", "") + "$",
              "i"
            );
          }
          if (!strict && !this._monthsParse[i]) {
            regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
            this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
            return i;
          } else if (strict && format2 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
            return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
          }
        }
      }
      function setMonth(mom, value) {
        var dayOfMonth;
        if (!mom.isValid()) {
          return mom;
        }
        if (typeof value === "string") {
          if (/^\d+$/.test(value)) {
            value = toInt(value);
          } else {
            value = mom.localeData().monthsParse(value);
            if (!isNumber(value)) {
              return mom;
            }
          }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
        return mom;
      }
      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
        } else {
          return get(this, "Month");
        }
      }
      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
      }
      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsShortRegex")) {
            this._monthsShortRegex = defaultMonthsShortRegex;
          }
          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
      }
      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsRegex")) {
            this._monthsRegex = defaultMonthsRegex;
          }
          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
      }
      function computeMonthsParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          shortPieces.push(this.monthsShort(mom, ""));
          longPieces.push(this.months(mom, ""));
          mixedPieces.push(this.months(mom, ""));
          mixedPieces.push(this.monthsShort(mom, ""));
        }
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
          mixedPieces[i] = regexEscape(mixedPieces[i]);
        }
        this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
          "^(" + longPieces.join("|") + ")",
          "i"
        );
        this._monthsShortStrictRegex = new RegExp(
          "^(" + shortPieces.join("|") + ")",
          "i"
        );
      }
      addFormatToken("Y", 0, 0, function() {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : "+" + y;
      });
      addFormatToken(0, ["YY", 2], 0, function() {
        return this.year() % 100;
      });
      addFormatToken(0, ["YYYY", 4], 0, "year");
      addFormatToken(0, ["YYYYY", 5], 0, "year");
      addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
      addUnitAlias("year", "y");
      addUnitPriority("year", 1);
      addRegexToken("Y", matchSigned);
      addRegexToken("YY", match1to2, match2);
      addRegexToken("YYYY", match1to4, match4);
      addRegexToken("YYYYY", match1to6, match6);
      addRegexToken("YYYYYY", match1to6, match6);
      addParseToken(["YYYYY", "YYYYYY"], YEAR);
      addParseToken("YYYY", function(input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken("YY", function(input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken("Y", function(input, array) {
        array[YEAR] = parseInt(input, 10);
      });
      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
      }
      hooks.parseTwoDigitYear = function(input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
      };
      var getSetYear = makeGetSet("FullYear", true);
      function getIsLeapYear() {
        return isLeapYear(this.year());
      }
      function createDate(y, m, d, h, M, s, ms) {
        var date;
        if (y < 100 && y >= 0) {
          date = new Date(y + 400, m, d, h, M, s, ms);
          if (isFinite(date.getFullYear())) {
            date.setFullYear(y);
          }
        } else {
          date = new Date(y, m, d, h, M, s, ms);
        }
        return date;
      }
      function createUTCDate(y) {
        var date, args;
        if (y < 100 && y >= 0) {
          args = Array.prototype.slice.call(arguments);
          args[0] = y + 400;
          date = new Date(Date.UTC.apply(null, args));
          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }
        return date;
      }
      function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      }
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }
        return {
          year: resYear,
          dayOfYear: resDayOfYear
        };
      }
      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }
        return {
          week: resWeek,
          year: resYear
        };
      }
      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      }
      addFormatToken("w", ["ww", 2], "wo", "week");
      addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
      addUnitAlias("week", "w");
      addUnitAlias("isoWeek", "W");
      addUnitPriority("week", 5);
      addUnitPriority("isoWeek", 5);
      addRegexToken("w", match1to2);
      addRegexToken("ww", match1to2, match2);
      addRegexToken("W", match1to2);
      addRegexToken("WW", match1to2, match2);
      addWeekParseToken(["w", "ww", "W", "WW"], function(input, week, config, token2) {
        week[token2.substr(0, 1)] = toInt(input);
      });
      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }
      var defaultLocaleWeek = {
        dow: 0,
        // Sunday is the first day of the week.
        doy: 6
        // The week that contains Jan 6th is the first week of the year.
      };
      function localeFirstDayOfWeek() {
        return this._week.dow;
      }
      function localeFirstDayOfYear() {
        return this._week.doy;
      }
      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      addFormatToken("d", 0, "do", "day");
      addFormatToken("dd", 0, 0, function(format2) {
        return this.localeData().weekdaysMin(this, format2);
      });
      addFormatToken("ddd", 0, 0, function(format2) {
        return this.localeData().weekdaysShort(this, format2);
      });
      addFormatToken("dddd", 0, 0, function(format2) {
        return this.localeData().weekdays(this, format2);
      });
      addFormatToken("e", 0, 0, "weekday");
      addFormatToken("E", 0, 0, "isoWeekday");
      addUnitAlias("day", "d");
      addUnitAlias("weekday", "e");
      addUnitAlias("isoWeekday", "E");
      addUnitPriority("day", 11);
      addUnitPriority("weekday", 11);
      addUnitPriority("isoWeekday", 11);
      addRegexToken("d", match1to2);
      addRegexToken("e", match1to2);
      addRegexToken("E", match1to2);
      addRegexToken("dd", function(isStrict, locale2) {
        return locale2.weekdaysMinRegex(isStrict);
      });
      addRegexToken("ddd", function(isStrict, locale2) {
        return locale2.weekdaysShortRegex(isStrict);
      });
      addRegexToken("dddd", function(isStrict, locale2) {
        return locale2.weekdaysRegex(isStrict);
      });
      addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
        var weekday = config._locale.weekdaysParse(input, token2, config._strict);
        if (weekday != null) {
          week.d = weekday;
        } else {
          getParsingFlags(config).invalidWeekday = input;
        }
      });
      addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
        week[token2] = toInt(input);
      });
      function parseWeekday(input, locale2) {
        if (typeof input !== "string") {
          return input;
        }
        if (!isNaN(input)) {
          return parseInt(input, 10);
        }
        input = locale2.weekdaysParse(input);
        if (typeof input === "number") {
          return input;
        }
        return null;
      }
      function parseIsoWeekday(input, locale2) {
        if (typeof input === "string") {
          return locale2.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
      }
      function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
      }
      var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split(
        "_"
      ), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
      function localeWeekdays(m, format2) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
      }
      function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
      }
      function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
      }
      function handleStrictParse$1(weekdayName, format2, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];
          for (i = 0; i < 7; ++i) {
            mom = createUTC([2e3, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(
              mom,
              ""
            ).toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(
              mom,
              ""
            ).toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeWeekdaysParse(weekdayName, format2, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format2, strict);
        }
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp(
              "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
              "i"
            );
            this._shortWeekdaysParse[i] = new RegExp(
              "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
              "i"
            );
            this._minWeekdaysParse[i] = new RegExp(
              "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
              "i"
            );
          }
          if (!this._weekdaysParse[i]) {
            regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
            this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format2 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
          }
        }
      }
      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, "d");
        } else {
          return day;
        }
      }
      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, "d");
      }
      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }
      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            this._weekdaysRegex = defaultWeekdaysRegex;
          }
          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
      }
      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysShortRegex")) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }
          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
      }
      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysMinRegex")) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }
          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
      }
      function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          minp = regexEscape(this.weekdaysMin(mom, ""));
          shortp = regexEscape(this.weekdaysShort(mom, ""));
          longp = regexEscape(this.weekdays(mom, ""));
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        }
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp(
          "^(" + longPieces.join("|") + ")",
          "i"
        );
        this._weekdaysShortStrictRegex = new RegExp(
          "^(" + shortPieces.join("|") + ")",
          "i"
        );
        this._weekdaysMinStrictRegex = new RegExp(
          "^(" + minPieces.join("|") + ")",
          "i"
        );
      }
      function hFormat() {
        return this.hours() % 12 || 12;
      }
      function kFormat() {
        return this.hours() || 24;
      }
      addFormatToken("H", ["HH", 2], 0, "hour");
      addFormatToken("h", ["hh", 2], 0, hFormat);
      addFormatToken("k", ["kk", 2], 0, kFormat);
      addFormatToken("hmm", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });
      addFormatToken("hmmss", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      addFormatToken("Hmm", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2);
      });
      addFormatToken("Hmmss", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      function meridiem(token2, lowercase) {
        addFormatToken(token2, 0, 0, function() {
          return this.localeData().meridiem(
            this.hours(),
            this.minutes(),
            lowercase
          );
        });
      }
      meridiem("a", true);
      meridiem("A", false);
      addUnitAlias("hour", "h");
      addUnitPriority("hour", 13);
      function matchMeridiem(isStrict, locale2) {
        return locale2._meridiemParse;
      }
      addRegexToken("a", matchMeridiem);
      addRegexToken("A", matchMeridiem);
      addRegexToken("H", match1to2);
      addRegexToken("h", match1to2);
      addRegexToken("k", match1to2);
      addRegexToken("HH", match1to2, match2);
      addRegexToken("hh", match1to2, match2);
      addRegexToken("kk", match1to2, match2);
      addRegexToken("hmm", match3to4);
      addRegexToken("hmmss", match5to6);
      addRegexToken("Hmm", match3to4);
      addRegexToken("Hmmss", match5to6);
      addParseToken(["H", "HH"], HOUR);
      addParseToken(["k", "kk"], function(input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(["a", "A"], function(input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
      });
      addParseToken(["h", "hh"], function(input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("Hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken("Hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
      });
      function localeIsPM(input) {
        return (input + "").toLowerCase().charAt(0) === "p";
      }
      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
      function localeMeridiem(hours2, minutes2, isLower) {
        if (hours2 > 11) {
          return isLower ? "pm" : "PM";
        } else {
          return isLower ? "am" : "AM";
        }
      }
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
      };
      var locales = {}, localeFamilies = {}, globalLocale;
      function commonPrefix(arr1, arr2) {
        var i, minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
          if (arr1[i] !== arr2[i]) {
            return i;
          }
        }
        return minl;
      }
      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace("_", "-") : key;
      }
      function chooseLocale(names) {
        var i = 0, j, next, locale2, split;
        while (i < names.length) {
          split = normalizeLocale(names[i]).split("-");
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split("-") : null;
          while (j > 0) {
            locale2 = loadLocale(split.slice(0, j).join("-"));
            if (locale2) {
              return locale2;
            }
            if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
              break;
            }
            j--;
          }
          i++;
        }
        return globalLocale;
      }
      function loadLocale(name) {
        var oldLocale = null, aliasedRequire;
        if (locales[name] === void 0 && typeof module2 !== "undefined" && module2 && module2.exports) {
          try {
            oldLocale = globalLocale._abbr;
            aliasedRequire = require;
            aliasedRequire("./locale/" + name);
            getSetGlobalLocale(oldLocale);
          } catch (e) {
            locales[name] = null;
          }
        }
        return locales[name];
      }
      function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
          if (isUndefined(values)) {
            data = getLocale(key);
          } else {
            data = defineLocale(key, values);
          }
          if (data) {
            globalLocale = data;
          } else {
            if (typeof console !== "undefined" && console.warn) {
              console.warn(
                "Locale " + key + " not found. Did you forget to load it?"
              );
            }
          }
        }
        return globalLocale._abbr;
      }
      function defineLocale(name, config) {
        if (config !== null) {
          var locale2, parentConfig = baseConfig;
          config.abbr = name;
          if (locales[name] != null) {
            deprecateSimple(
              "defineLocaleOverride",
              "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
            );
            parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config;
            } else {
              locale2 = loadLocale(config.parentLocale);
              if (locale2 != null) {
                parentConfig = locale2._config;
              } else {
                if (!localeFamilies[config.parentLocale]) {
                  localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                  name,
                  config
                });
                return null;
              }
            }
          }
          locales[name] = new Locale(mergeConfigs(parentConfig, config));
          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function(x) {
              defineLocale(x.name, x.config);
            });
          }
          getSetGlobalLocale(name);
          return locales[name];
        } else {
          delete locales[name];
          return null;
        }
      }
      function updateLocale(name, config) {
        if (config != null) {
          var locale2, tmpLocale, parentConfig = baseConfig;
          if (locales[name] != null && locales[name].parentLocale != null) {
            locales[name].set(mergeConfigs(locales[name]._config, config));
          } else {
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
              parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            if (tmpLocale == null) {
              config.abbr = name;
            }
            locale2 = new Locale(config);
            locale2.parentLocale = locales[name];
            locales[name] = locale2;
          }
          getSetGlobalLocale(name);
        } else {
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale;
              if (name === getSetGlobalLocale()) {
                getSetGlobalLocale(name);
              }
            } else if (locales[name] != null) {
              delete locales[name];
            }
          }
        }
        return locales[name];
      }
      function getLocale(key) {
        var locale2;
        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }
        if (!key) {
          return globalLocale;
        }
        if (!isArray(key)) {
          locale2 = loadLocale(key);
          if (locale2) {
            return locale2;
          }
          key = [key];
        }
        return chooseLocale(key);
      }
      function listLocales() {
        return keys(locales);
      }
      function checkOverflow(m) {
        var overflow, a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
          overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
          }
          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
          }
          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
          }
          getParsingFlags(m).overflow = overflow;
        }
        return m;
      }
      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
        ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
        ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
        ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
        ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
        ["YYYY-DDD", /\d{4}-\d{3}/],
        ["YYYY-MM", /\d{4}-\d\d/, false],
        ["YYYYYYMMDD", /[+-]\d{10}/],
        ["YYYYMMDD", /\d{8}/],
        ["GGGG[W]WWE", /\d{4}W\d{3}/],
        ["GGGG[W]WW", /\d{4}W\d{2}/, false],
        ["YYYYDDD", /\d{7}/],
        ["YYYYMM", /\d{6}/, false],
        ["YYYY", /\d{4}/, false]
      ], isoTimes = [
        ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
        ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
        ["HH:mm:ss", /\d\d:\d\d:\d\d/],
        ["HH:mm", /\d\d:\d\d/],
        ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
        ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
        ["HHmmss", /\d\d\d\d\d\d/],
        ["HHmm", /\d\d\d\d/],
        ["HH", /\d\d/]
      ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
      };
      function configFromISO(config) {
        var i, l, string2 = config._i, match = extendedIsoRegex.exec(string2) || basicIsoRegex.exec(string2), allowTime, dateFormat, timeFormat, tzFormat;
        if (match) {
          getParsingFlags(config).iso = true;
          for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
              dateFormat = isoDates[i][0];
              allowTime = isoDates[i][2] !== false;
              break;
            }
          }
          if (dateFormat == null) {
            config._isValid = false;
            return;
          }
          if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
              if (isoTimes[i][1].exec(match[3])) {
                timeFormat = (match[2] || " ") + isoTimes[i][0];
                break;
              }
            }
            if (timeFormat == null) {
              config._isValid = false;
              return;
            }
          }
          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
          }
          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = "Z";
            } else {
              config._isValid = false;
              return;
            }
          }
          config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
          configFromStringAndFormat(config);
        } else {
          config._isValid = false;
        }
      }
      function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
          untruncateYear(yearStr),
          defaultLocaleMonthsShort.indexOf(monthStr),
          parseInt(dayStr, 10),
          parseInt(hourStr, 10),
          parseInt(minuteStr, 10)
        ];
        if (secondStr) {
          result.push(parseInt(secondStr, 10));
        }
        return result;
      }
      function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
          return 2e3 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }
        return year;
      }
      function preprocessRFC2822(s) {
        return s.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
      }
      function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
            parsedInput[0],
            parsedInput[1],
            parsedInput[2]
          ).getDay();
          if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
          }
        }
        return true;
      }
      function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets[obsOffset];
        } else if (militaryOffset) {
          return 0;
        } else {
          var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
          return h * 60 + m;
        }
      }
      function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
        if (match) {
          parsedArray = extractFromRFC2822Strings(
            match[4],
            match[3],
            match[2],
            match[5],
            match[6],
            match[7]
          );
          if (!checkWeekday(match[1], parsedArray, config)) {
            return;
          }
          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);
          config._d = createUTCDate.apply(null, config._a);
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          getParsingFlags(config).rfc2822 = true;
        } else {
          config._isValid = false;
        }
      }
      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
          config._d = new Date(+matched[1]);
          return;
        }
        configFromISO(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        configFromRFC2822(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        if (config._strict) {
          config._isValid = false;
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      hooks.createFromInputFallback = deprecate(
        "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
        function(config) {
          config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
        }
      );
      function defaults(a, b, c) {
        if (a != null) {
          return a;
        }
        if (b != null) {
          return b;
        }
        return c;
      }
      function currentDateArray(config) {
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
          return [
            nowValue.getUTCFullYear(),
            nowValue.getUTCMonth(),
            nowValue.getUTCDate()
          ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      }
      function configFromArray(config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;
        if (config._d) {
          return;
        }
        currentDate = currentDateArray(config);
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
        }
        if (config._dayOfYear != null) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
          if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
          }
          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
        }
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
        }
        for (; i < 7; i++) {
          config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(
          null,
          input
        );
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
          config._a[HOUR] = 24;
        }
        if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
          getParsingFlags(config).weekdayMismatch = true;
        }
      }
      function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;
          weekYear = defaults(
            w.GG,
            config._a[YEAR],
            weekOfYear(createLocal(), 1, 4).year
          );
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);
          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
          week = defaults(w.w, curWeek.week);
          if (w.d != null) {
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w.e != null) {
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            weekday = dow;
          }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
        }
      }
      hooks.ISO_8601 = function() {
      };
      hooks.RFC_2822 = function() {
      };
      function configFromStringAndFormat(config) {
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
        }
        if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        var string2 = "" + config._i, i, parsedInput, tokens2, token2, skipped, stringLength = string2.length, totalParsedInputLength = 0, era;
        tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        for (i = 0; i < tokens2.length; i++) {
          token2 = tokens2[i];
          parsedInput = (string2.match(getParseRegexForToken(token2, config)) || [])[0];
          if (parsedInput) {
            skipped = string2.substr(0, string2.indexOf(parsedInput));
            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped);
            }
            string2 = string2.slice(
              string2.indexOf(parsedInput) + parsedInput.length
            );
            totalParsedInputLength += parsedInput.length;
          }
          if (formatTokenFunctions[token2]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false;
            } else {
              getParsingFlags(config).unusedTokens.push(token2);
            }
            addTimeToArrayFromToken(token2, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token2);
          }
        }
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string2.length > 0) {
          getParsingFlags(config).unusedInput.push(string2);
        }
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = void 0;
        }
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        config._a[HOUR] = meridiemFixWrap(
          config._locale,
          config._a[HOUR],
          config._meridiem
        );
        era = getParsingFlags(config).era;
        if (era !== null) {
          config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }
        configFromArray(config);
        checkOverflow(config);
      }
      function meridiemFixWrap(locale2, hour, meridiem2) {
        var isPm;
        if (meridiem2 == null) {
          return hour;
        }
        if (locale2.meridiemHour != null) {
          return locale2.meridiemHour(hour, meridiem2);
        } else if (locale2.isPM != null) {
          isPm = locale2.isPM(meridiem2);
          if (isPm && hour < 12) {
            hour += 12;
          }
          if (!isPm && hour === 12) {
            hour = 0;
          }
          return hour;
        } else {
          return hour;
        }
      }
      function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false;
        if (config._f.length === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return;
        }
        for (i = 0; i < config._f.length; i++) {
          currentScore = 0;
          validFormatFound = false;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }
          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);
          if (isValid(tempConfig)) {
            validFormatFound = true;
          }
          currentScore += getParsingFlags(tempConfig).charsLeftOver;
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;
          if (!bestFormatIsValid) {
            if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
              if (validFormatFound) {
                bestFormatIsValid = true;
              }
            }
          } else {
            if (currentScore < scoreToBeat) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
            }
          }
        }
        extend(config, bestMoment || tempConfig);
      }
      function configFromObject(config) {
        if (config._d) {
          return;
        }
        var i = normalizeObjectUnits(config._i), dayOrDate = i.day === void 0 ? i.date : i.day;
        config._a = map2(
          [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
          function(obj) {
            return obj && parseInt(obj, 10);
          }
        );
        configFromArray(config);
      }
      function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
          res.add(1, "d");
          res._nextDay = void 0;
        }
        return res;
      }
      function prepareConfig(config) {
        var input = config._i, format2 = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format2 === void 0 && input === "") {
          return createInvalid({ nullInput: true });
        }
        if (typeof input === "string") {
          config._i = input = config._locale.preparse(input);
        }
        if (isMoment(input)) {
          return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
          config._d = input;
        } else if (isArray(format2)) {
          configFromStringAndArray(config);
        } else if (format2) {
          configFromStringAndFormat(config);
        } else {
          configFromInput(config);
        }
        if (!isValid(config)) {
          config._d = null;
        }
        return config;
      }
      function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
          config._d = new Date(hooks.now());
        } else if (isDate(input)) {
          config._d = new Date(input.valueOf());
        } else if (typeof input === "string") {
          configFromString(config);
        } else if (isArray(input)) {
          config._a = map2(input.slice(0), function(obj) {
            return parseInt(obj, 10);
          });
          configFromArray(config);
        } else if (isObject(input)) {
          configFromObject(config);
        } else if (isNumber(input)) {
          config._d = new Date(input);
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
        var c = {};
        if (format2 === true || format2 === false) {
          strict = format2;
          format2 = void 0;
        }
        if (locale2 === true || locale2 === false) {
          strict = locale2;
          locale2 = void 0;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
          input = void 0;
        }
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale2;
        c._i = input;
        c._f = format2;
        c._strict = strict;
        return createFromConfig(c);
      }
      function createLocal(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, false);
      }
      var prototypeMin = deprecate(
        "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
        function() {
          var other = createLocal.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
          } else {
            return createInvalid();
          }
        }
      ), prototypeMax = deprecate(
        "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
        function() {
          var other = createLocal.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
          } else {
            return createInvalid();
          }
        }
      );
      function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
        }
        if (!moments.length) {
          return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
          }
        }
        return res;
      }
      function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isBefore", args);
      }
      function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isAfter", args);
      }
      var now = function() {
        return Date.now ? Date.now() : +new Date();
      };
      var ordering = [
        "year",
        "quarter",
        "month",
        "week",
        "day",
        "hour",
        "minute",
        "second",
        "millisecond"
      ];
      function isDurationValid(m) {
        var key, unitHasDecimal = false, i;
        for (key in m) {
          if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
          }
        }
        for (i = 0; i < ordering.length; ++i) {
          if (m[ordering[i]]) {
            if (unitHasDecimal) {
              return false;
            }
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
              unitHasDecimal = true;
            }
          }
        }
        return true;
      }
      function isValid$1() {
        return this._isValid;
      }
      function createInvalid$1() {
        return createDuration(NaN);
      }
      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        this._milliseconds = +milliseconds2 + seconds2 * 1e3 + // 1000
        minutes2 * 6e4 + // 1000 * 60
        hours2 * 1e3 * 60 * 60;
        this._days = +days2 + weeks2 * 7;
        this._months = +months2 + quarters * 3 + years2 * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
      }
      function isDuration(obj) {
        return obj instanceof Duration;
      }
      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      }
      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for (i = 0; i < len; i++) {
          if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
            diffs++;
          }
        }
        return diffs + lengthDiff;
      }
      function offset(token2, separator) {
        addFormatToken(token2, 0, 0, function() {
          var offset2 = this.utcOffset(), sign2 = "+";
          if (offset2 < 0) {
            offset2 = -offset2;
            sign2 = "-";
          }
          return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
        });
      }
      offset("Z", ":");
      offset("ZZ", "");
      addRegexToken("Z", matchShortOffset);
      addRegexToken("ZZ", matchShortOffset);
      addParseToken(["Z", "ZZ"], function(input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
      });
      var chunkOffset = /([\+\-]|\d\d)/gi;
      function offsetFromString(matcher, string2) {
        var matches = (string2 || "").match(matcher), chunk, parts, minutes2;
        if (matches === null) {
          return null;
        }
        chunk = matches[matches.length - 1] || [];
        parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
        minutes2 = +(parts[1] * 60) + toInt(parts[2]);
        return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
      }
      function cloneWithOffset(input, model) {
        var res, diff2;
        if (model._isUTC) {
          res = model.clone();
          diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
          res._d.setTime(res._d.valueOf() + diff2);
          hooks.updateOffset(res, false);
          return res;
        } else {
          return createLocal(input).local();
        }
      }
      function getDateOffset(m) {
        return -Math.round(m._d.getTimezoneOffset());
      }
      hooks.updateOffset = function() {
      };
      function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset2 = this._offset || 0, localAdjust;
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          if (typeof input === "string") {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }
          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
            this.add(localAdjust, "m");
          }
          if (offset2 !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(
                this,
                createDuration(input - offset2, "m"),
                1,
                false
              );
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }
          return this;
        } else {
          return this._isUTC ? offset2 : getDateOffset(this);
        }
      }
      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== "string") {
            input = -input;
          }
          this.utcOffset(input, keepLocalTime);
          return this;
        } else {
          return -this.utcOffset();
        }
      }
      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }
      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;
          if (keepLocalTime) {
            this.subtract(getDateOffset(this), "m");
          }
        }
        return this;
      }
      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === "string") {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }
        return this;
      }
      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
      }
      function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }
      function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted;
        }
        var c = {}, other;
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
          other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }
        return this._isDSTShifted;
      }
      function isLocal() {
        return this.isValid() ? !this._isUTC : false;
      }
      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
      }
      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      }
      var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
      function createDuration(input, key) {
        var duration = input, match = null, sign2, ret, diffRes;
        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          };
        } else if (isNumber(input) || !isNaN(+input)) {
          duration = {};
          if (key) {
            duration[key] = +input;
          } else {
            duration.milliseconds = +input;
          }
        } else if (match = aspNetRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign2,
            h: toInt(match[HOUR]) * sign2,
            m: toInt(match[MINUTE]) * sign2,
            s: toInt(match[SECOND]) * sign2,
            ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
            // the millisecond decimal point is included in the match
          };
        } else if (match = isoRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign2),
            M: parseIso(match[3], sign2),
            w: parseIso(match[4], sign2),
            d: parseIso(match[5], sign2),
            h: parseIso(match[6], sign2),
            m: parseIso(match[7], sign2),
            s: parseIso(match[8], sign2)
          };
        } else if (duration == null) {
          duration = {};
        } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
          diffRes = momentsDifference(
            createLocal(duration.from),
            createLocal(duration.to)
          );
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, "_locale")) {
          ret._locale = input._locale;
        }
        if (isDuration(input) && hasOwnProp(input, "_isValid")) {
          ret._isValid = input._isValid;
        }
        return ret;
      }
      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;
      function parseIso(inp, sign2) {
        var res = inp && parseFloat(inp.replace(",", "."));
        return (isNaN(res) ? 0 : res) * sign2;
      }
      function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, "M").isAfter(other)) {
          --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, "M");
        return res;
      }
      function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
          return { milliseconds: 0, months: 0 };
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }
        return res;
      }
      function createAdder(direction, name) {
        return function(val, period) {
          var dur, tmp;
          if (period !== null && !isNaN(+period)) {
            deprecateSimple(
              name,
              "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
            );
            tmp = val;
            val = period;
            period = tmp;
          }
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
        };
      }
      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
        if (!mom.isValid()) {
          return;
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months2) {
          setMonth(mom, get(mom, "Month") + months2 * isAdding);
        }
        if (days2) {
          set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
        }
        if (milliseconds2) {
          mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
        }
        if (updateOffset) {
          hooks.updateOffset(mom, days2 || months2);
        }
      }
      var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
      function isString(input) {
        return typeof input === "string" || input instanceof String;
      }
      function isMomentInput(input) {
        return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
      }
      function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "years",
          "year",
          "y",
          "months",
          "month",
          "M",
          "days",
          "day",
          "d",
          "dates",
          "date",
          "D",
          "hours",
          "hour",
          "h",
          "minutes",
          "minute",
          "m",
          "seconds",
          "second",
          "s",
          "milliseconds",
          "millisecond",
          "ms"
        ], i, property;
        for (i = 0; i < properties.length; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function isNumberOrStringArray(input) {
        var arrayTest = isArray(input), dataTypeTest = false;
        if (arrayTest) {
          dataTypeTest = input.filter(function(item) {
            return !isNumber(item) && isString(input);
          }).length === 0;
        }
        return arrayTest && dataTypeTest;
      }
      function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "sameDay",
          "nextDay",
          "lastDay",
          "nextWeek",
          "lastWeek",
          "sameElse"
        ], i, property;
        for (i = 0; i < properties.length; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function getCalendarFormat(myMoment, now2) {
        var diff2 = myMoment.diff(now2, "days", true);
        return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
      }
      function calendar$1(time, formats) {
        if (arguments.length === 1) {
          if (!arguments[0]) {
            time = void 0;
            formats = void 0;
          } else if (isMomentInput(arguments[0])) {
            time = arguments[0];
            formats = void 0;
          } else if (isCalendarSpec(arguments[0])) {
            formats = arguments[0];
            time = void 0;
          }
        }
        var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
        return this.format(
          output || this.localeData().calendar(format2, this, createLocal(now2))
        );
      }
      function clone() {
        return new Moment(this);
      }
      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }
      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }
      function isBetween(from2, to2, units, inclusivity) {
        var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }
        inclusivity = inclusivity || "()";
        return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
      }
      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
      }
      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }
      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }
      function diff(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) {
          return NaN;
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
          return NaN;
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);
        switch (units) {
          case "year":
            output = monthDiff(this, that) / 12;
            break;
          case "month":
            output = monthDiff(this, that);
            break;
          case "quarter":
            output = monthDiff(this, that) / 3;
            break;
          case "second":
            output = (this - that) / 1e3;
            break;
          case "minute":
            output = (this - that) / 6e4;
            break;
          case "hour":
            output = (this - that) / 36e5;
            break;
          case "day":
            output = (this - that - zoneDelta) / 864e5;
            break;
          case "week":
            output = (this - that - zoneDelta) / 6048e5;
            break;
          default:
            output = this - that;
        }
        return asFloat ? output : absFloor(output);
      }
      function monthDiff(a, b) {
        if (a.date() < b.date()) {
          return -monthDiff(b, a);
        }
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
          adjust = (b - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
          adjust = (b - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust) || 0;
      }
      hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
      hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
      function toString() {
        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
      }
      function toISOString(keepOffset) {
        if (!this.isValid()) {
          return null;
        }
        var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(
            m,
            utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
          );
        }
        if (isFunction(Date.prototype.toISOString)) {
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
          }
        }
        return formatMoment(
          m,
          utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
        );
      }
      function inspect() {
        if (!this.isValid()) {
          return "moment.invalid(/* " + this._i + " */)";
        }
        var func = "moment", zone = "", prefix, year, datetime, suffix;
        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
          zone = "Z";
        }
        prefix = "[" + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
        datetime = "-MM-DD[T]HH:mm:ss.SSS";
        suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
      }
      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
      }
      function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
      }
      function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
      }
      function locale(key) {
        var newLocaleData;
        if (key === void 0) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale(key);
          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }
          return this;
        }
      }
      var lang = deprecate(
        "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
        function(key) {
          if (key === void 0) {
            return this.localeData();
          } else {
            return this.locale(key);
          }
        }
      );
      function localeData() {
        return this._locale;
      }
      var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
      function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
      }
      function localStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return new Date(y, m, d).valueOf();
        }
      }
      function utcStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return Date.UTC(y, m, d);
        }
      }
      function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year(), 0, 1);
            break;
          case "quarter":
            time = startOfDate(
              this.year(),
              this.month() - this.month() % 3,
              1
            );
            break;
          case "month":
            time = startOfDate(this.year(), this.month(), 1);
            break;
          case "week":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - this.weekday()
            );
            break;
          case "isoWeek":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - (this.isoWeekday() - 1)
            );
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date());
            break;
          case "hour":
            time = this._d.valueOf();
            time -= mod$1(
              time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
              MS_PER_HOUR
            );
            break;
          case "minute":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;
          case "second":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;
          case "quarter":
            time = startOfDate(
              this.year(),
              this.month() - this.month() % 3 + 3,
              1
            ) - 1;
            break;
          case "month":
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;
          case "week":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - this.weekday() + 7
            ) - 1;
            break;
          case "isoWeek":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - (this.isoWeekday() - 1) + 7
            ) - 1;
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;
          case "hour":
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(
              time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
              MS_PER_HOUR
            ) - 1;
            break;
          case "minute":
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;
          case "second":
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 6e4;
      }
      function unix() {
        return Math.floor(this.valueOf() / 1e3);
      }
      function toDate() {
        return new Date(this.valueOf());
      }
      function toArray() {
        var m = this;
        return [
          m.year(),
          m.month(),
          m.date(),
          m.hour(),
          m.minute(),
          m.second(),
          m.millisecond()
        ];
      }
      function toObject() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
        };
      }
      function toJSON() {
        return this.isValid() ? this.toISOString() : null;
      }
      function isValid$2() {
        return isValid(this);
      }
      function parsingFlags() {
        return extend({}, getParsingFlags(this));
      }
      function invalidAt() {
        return getParsingFlags(this).overflow;
      }
      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        };
      }
      addFormatToken("N", 0, 0, "eraAbbr");
      addFormatToken("NN", 0, 0, "eraAbbr");
      addFormatToken("NNN", 0, 0, "eraAbbr");
      addFormatToken("NNNN", 0, 0, "eraName");
      addFormatToken("NNNNN", 0, 0, "eraNarrow");
      addFormatToken("y", ["y", 1], "yo", "eraYear");
      addFormatToken("y", ["yy", 2], 0, "eraYear");
      addFormatToken("y", ["yyy", 3], 0, "eraYear");
      addFormatToken("y", ["yyyy", 4], 0, "eraYear");
      addRegexToken("N", matchEraAbbr);
      addRegexToken("NN", matchEraAbbr);
      addRegexToken("NNN", matchEraAbbr);
      addRegexToken("NNNN", matchEraName);
      addRegexToken("NNNNN", matchEraNarrow);
      addParseToken(["N", "NN", "NNN", "NNNN", "NNNNN"], function(input, array, config, token2) {
        var era = config._locale.erasParse(input, token2, config._strict);
        if (era) {
          getParsingFlags(config).era = era;
        } else {
          getParsingFlags(config).invalidEra = input;
        }
      });
      addRegexToken("y", matchUnsigned);
      addRegexToken("yy", matchUnsigned);
      addRegexToken("yyy", matchUnsigned);
      addRegexToken("yyyy", matchUnsigned);
      addRegexToken("yo", matchEraYearOrdinal);
      addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
      addParseToken(["yo"], function(input, array, config, token2) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
          match = input.match(config._locale._eraYearOrdinalRegex);
        }
        if (config._locale.eraYearOrdinalParse) {
          array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
          array[YEAR] = parseInt(input, 10);
        }
      });
      function localeEras(m, format2) {
        var i, l, date, eras = this._eras || getLocale("en")._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
          switch (typeof eras[i].since) {
            case "string":
              date = hooks(eras[i].since).startOf("day");
              eras[i].since = date.valueOf();
              break;
          }
          switch (typeof eras[i].until) {
            case "undefined":
              eras[i].until = Infinity;
              break;
            case "string":
              date = hooks(eras[i].until).startOf("day").valueOf();
              eras[i].until = date.valueOf();
              break;
          }
        }
        return eras;
      }
      function localeErasParse(eraName, format2, strict) {
        var i, l, eras = this.eras(), name, abbr, narrow;
        eraName = eraName.toUpperCase();
        for (i = 0, l = eras.length; i < l; ++i) {
          name = eras[i].name.toUpperCase();
          abbr = eras[i].abbr.toUpperCase();
          narrow = eras[i].narrow.toUpperCase();
          if (strict) {
            switch (format2) {
              case "N":
              case "NN":
              case "NNN":
                if (abbr === eraName) {
                  return eras[i];
                }
                break;
              case "NNNN":
                if (name === eraName) {
                  return eras[i];
                }
                break;
              case "NNNNN":
                if (narrow === eraName) {
                  return eras[i];
                }
                break;
            }
          } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
            return eras[i];
          }
        }
      }
      function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? 1 : -1;
        if (year === void 0) {
          return hooks(era.since).year();
        } else {
          return hooks(era.since).year() + (year - era.offset) * dir;
        }
      }
      function getEraName() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].name;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].name;
          }
        }
        return "";
      }
      function getEraNarrow() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].narrow;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].narrow;
          }
        }
        return "";
      }
      function getEraAbbr() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].abbr;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].abbr;
          }
        }
        return "";
      }
      function getEraYear() {
        var i, l, dir, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          dir = eras[i].since <= eras[i].until ? 1 : -1;
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
            return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
          }
        }
        return this.year();
      }
      function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNameRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
      }
      function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, "_erasAbbrRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
      }
      function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNarrowRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
      }
      function matchEraAbbr(isStrict, locale2) {
        return locale2.erasAbbrRegex(isStrict);
      }
      function matchEraName(isStrict, locale2) {
        return locale2.erasNameRegex(isStrict);
      }
      function matchEraNarrow(isStrict, locale2) {
        return locale2.erasNarrowRegex(isStrict);
      }
      function matchEraYearOrdinal(isStrict, locale2) {
        return locale2._eraYearOrdinalRegex || matchUnsigned;
      }
      function computeErasParse() {
        var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, eras = this.eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          namePieces.push(regexEscape(eras[i].name));
          abbrPieces.push(regexEscape(eras[i].abbr));
          narrowPieces.push(regexEscape(eras[i].narrow));
          mixedPieces.push(regexEscape(eras[i].name));
          mixedPieces.push(regexEscape(eras[i].abbr));
          mixedPieces.push(regexEscape(eras[i].narrow));
        }
        this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
        this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
        this._erasNarrowRegex = new RegExp(
          "^(" + narrowPieces.join("|") + ")",
          "i"
        );
      }
      addFormatToken(0, ["gg", 2], 0, function() {
        return this.weekYear() % 100;
      });
      addFormatToken(0, ["GG", 2], 0, function() {
        return this.isoWeekYear() % 100;
      });
      function addWeekYearFormatToken(token2, getter) {
        addFormatToken(0, [token2, token2.length], 0, getter);
      }
      addWeekYearFormatToken("gggg", "weekYear");
      addWeekYearFormatToken("ggggg", "weekYear");
      addWeekYearFormatToken("GGGG", "isoWeekYear");
      addWeekYearFormatToken("GGGGG", "isoWeekYear");
      addUnitAlias("weekYear", "gg");
      addUnitAlias("isoWeekYear", "GG");
      addUnitPriority("weekYear", 1);
      addUnitPriority("isoWeekYear", 1);
      addRegexToken("G", matchSigned);
      addRegexToken("g", matchSigned);
      addRegexToken("GG", match1to2, match2);
      addRegexToken("gg", match1to2, match2);
      addRegexToken("GGGG", match1to4, match4);
      addRegexToken("gggg", match1to4, match4);
      addRegexToken("GGGGG", match1to6, match6);
      addRegexToken("ggggg", match1to6, match6);
      addWeekParseToken(["gggg", "ggggg", "GGGG", "GGGGG"], function(input, week, config, token2) {
        week[token2.substr(0, 2)] = toInt(input);
      });
      addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
        week[token2] = hooks.parseTwoDigitYear(input);
      });
      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
          this,
          input,
          this.week(),
          this.weekday(),
          this.localeData()._week.dow,
          this.localeData()._week.doy
        );
      }
      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(
          this,
          input,
          this.isoWeek(),
          this.isoWeekday(),
          1,
          4
        );
      }
      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
      }
      function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
      }
      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }
      function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
      }
      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
          return weekOfYear(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
            week = weeksTarget;
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
      }
      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      }
      addFormatToken("Q", 0, "Qo", "quarter");
      addUnitAlias("quarter", "Q");
      addUnitPriority("quarter", 7);
      addRegexToken("Q", match1);
      addParseToken("Q", function(input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
      });
      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      }
      addFormatToken("D", ["DD", 2], "Do", "date");
      addUnitAlias("date", "D");
      addUnitPriority("date", 9);
      addRegexToken("D", match1to2);
      addRegexToken("DD", match1to2, match2);
      addRegexToken("Do", function(isStrict, locale2) {
        return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
      });
      addParseToken(["D", "DD"], DATE);
      addParseToken("Do", function(input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
      });
      var getSetDayOfMonth = makeGetSet("Date", true);
      addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
      addUnitAlias("dayOfYear", "DDD");
      addUnitPriority("dayOfYear", 4);
      addRegexToken("DDD", match1to3);
      addRegexToken("DDDD", match3);
      addParseToken(["DDD", "DDDD"], function(input, array, config) {
        config._dayOfYear = toInt(input);
      });
      function getSetDayOfYear(input) {
        var dayOfYear = Math.round(
          (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
        ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
      }
      addFormatToken("m", ["mm", 2], 0, "minute");
      addUnitAlias("minute", "m");
      addUnitPriority("minute", 14);
      addRegexToken("m", match1to2);
      addRegexToken("mm", match1to2, match2);
      addParseToken(["m", "mm"], MINUTE);
      var getSetMinute = makeGetSet("Minutes", false);
      addFormatToken("s", ["ss", 2], 0, "second");
      addUnitAlias("second", "s");
      addUnitPriority("second", 15);
      addRegexToken("s", match1to2);
      addRegexToken("ss", match1to2, match2);
      addParseToken(["s", "ss"], SECOND);
      var getSetSecond = makeGetSet("Seconds", false);
      addFormatToken("S", 0, 0, function() {
        return ~~(this.millisecond() / 100);
      });
      addFormatToken(0, ["SS", 2], 0, function() {
        return ~~(this.millisecond() / 10);
      });
      addFormatToken(0, ["SSS", 3], 0, "millisecond");
      addFormatToken(0, ["SSSS", 4], 0, function() {
        return this.millisecond() * 10;
      });
      addFormatToken(0, ["SSSSS", 5], 0, function() {
        return this.millisecond() * 100;
      });
      addFormatToken(0, ["SSSSSS", 6], 0, function() {
        return this.millisecond() * 1e3;
      });
      addFormatToken(0, ["SSSSSSS", 7], 0, function() {
        return this.millisecond() * 1e4;
      });
      addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
        return this.millisecond() * 1e5;
      });
      addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
        return this.millisecond() * 1e6;
      });
      addUnitAlias("millisecond", "ms");
      addUnitPriority("millisecond", 16);
      addRegexToken("S", match1to3, match1);
      addRegexToken("SS", match1to3, match2);
      addRegexToken("SSS", match1to3, match3);
      var token, getSetMillisecond;
      for (token = "SSSS"; token.length <= 9; token += "S") {
        addRegexToken(token, matchUnsigned);
      }
      function parseMs(input, array) {
        array[MILLISECOND] = toInt(("0." + input) * 1e3);
      }
      for (token = "S"; token.length <= 9; token += "S") {
        addParseToken(token, parseMs);
      }
      getSetMillisecond = makeGetSet("Milliseconds", false);
      addFormatToken("z", 0, 0, "zoneAbbr");
      addFormatToken("zz", 0, 0, "zoneName");
      function getZoneAbbr() {
        return this._isUTC ? "UTC" : "";
      }
      function getZoneName() {
        return this._isUTC ? "Coordinated Universal Time" : "";
      }
      var proto = Moment.prototype;
      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$2;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      if (typeof Symbol !== "undefined" && Symbol.for != null) {
        proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
          return "Moment<" + this.format() + ">";
        };
      }
      proto.toJSON = toJSON;
      proto.toString = toString;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      proto.eraName = getEraName;
      proto.eraNarrow = getEraNarrow;
      proto.eraAbbr = getEraAbbr;
      proto.eraYear = getEraYear;
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.weeksInWeekYear = getWeeksInWeekYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates = deprecate(
        "dates accessor is deprecated. Use date instead.",
        getSetDayOfMonth
      );
      proto.months = deprecate(
        "months accessor is deprecated. Use month instead",
        getSetMonth
      );
      proto.years = deprecate(
        "years accessor is deprecated. Use year instead",
        getSetYear
      );
      proto.zone = deprecate(
        "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
        getSetZone
      );
      proto.isDSTShifted = deprecate(
        "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
        isDaylightSavingTimeShifted
      );
      function createUnix(input) {
        return createLocal(input * 1e3);
      }
      function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
      }
      function preParsePostFormat(string2) {
        return string2;
      }
      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set2;
      proto$1.eras = localeEras;
      proto$1.erasParse = localeErasParse;
      proto$1.erasConvertYear = localeErasConvertYear;
      proto$1.erasAbbrRegex = erasAbbrRegex;
      proto$1.erasNameRegex = erasNameRegex;
      proto$1.erasNarrowRegex = erasNarrowRegex;
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;
      function get$1(format2, index, field, setter) {
        var locale2 = getLocale(), utc = createUTC().set(setter, index);
        return locale2[field](utc, format2);
      }
      function listMonthsImpl(format2, index, field) {
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
        if (index != null) {
          return get$1(format2, index, field, "month");
        }
        var i, out = [];
        for (i = 0; i < 12; i++) {
          out[i] = get$1(format2, i, field, "month");
        }
        return out;
      }
      function listWeekdaysImpl(localeSorted, format2, index, field) {
        if (typeof localeSorted === "boolean") {
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        } else {
          format2 = localeSorted;
          index = format2;
          localeSorted = false;
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        }
        var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i, out = [];
        if (index != null) {
          return get$1(format2, (index + shift) % 7, field, "day");
        }
        for (i = 0; i < 7; i++) {
          out[i] = get$1(format2, (i + shift) % 7, field, "day");
        }
        return out;
      }
      function listMonths(format2, index) {
        return listMonthsImpl(format2, index, "months");
      }
      function listMonthsShort(format2, index) {
        return listMonthsImpl(format2, index, "monthsShort");
      }
      function listWeekdays(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
      }
      function listWeekdaysShort(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
      }
      function listWeekdaysMin(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
      }
      getSetGlobalLocale("en", {
        eras: [
          {
            since: "0001-01-01",
            until: Infinity,
            offset: 1,
            name: "Anno Domini",
            narrow: "AD",
            abbr: "AD"
          },
          {
            since: "0000-12-31",
            until: -Infinity,
            offset: 1,
            name: "Before Christ",
            narrow: "BC",
            abbr: "BC"
          }
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(number) {
          var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
          return number + output;
        }
      });
      hooks.lang = deprecate(
        "moment.lang is deprecated. Use moment.locale instead.",
        getSetGlobalLocale
      );
      hooks.langData = deprecate(
        "moment.langData is deprecated. Use moment.localeData instead.",
        getLocale
      );
      var mathAbs = Math.abs;
      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
      }
      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
      }
      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
      }
      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
      }
      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }
      function bubble() {
        var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
        if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
          milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
          days2 = 0;
          months2 = 0;
        }
        data.milliseconds = milliseconds2 % 1e3;
        seconds2 = absFloor(milliseconds2 / 1e3);
        data.seconds = seconds2 % 60;
        minutes2 = absFloor(seconds2 / 60);
        data.minutes = minutes2 % 60;
        hours2 = absFloor(minutes2 / 60);
        data.hours = hours2 % 24;
        days2 += absFloor(hours2 / 24);
        monthsFromDays = absFloor(daysToMonths(days2));
        months2 += monthsFromDays;
        days2 -= absCeil(monthsToDays(monthsFromDays));
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        data.days = days2;
        data.months = months2;
        data.years = years2;
        return this;
      }
      function daysToMonths(days2) {
        return days2 * 4800 / 146097;
      }
      function monthsToDays(months2) {
        return months2 * 146097 / 4800;
      }
      function as(units) {
        if (!this.isValid()) {
          return NaN;
        }
        var days2, months2, milliseconds2 = this._milliseconds;
        units = normalizeUnits(units);
        if (units === "month" || units === "quarter" || units === "year") {
          days2 = this._days + milliseconds2 / 864e5;
          months2 = this._months + daysToMonths(days2);
          switch (units) {
            case "month":
              return months2;
            case "quarter":
              return months2 / 3;
            case "year":
              return months2 / 12;
          }
        } else {
          days2 = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
            case "week":
              return days2 / 7 + milliseconds2 / 6048e5;
            case "day":
              return days2 + milliseconds2 / 864e5;
            case "hour":
              return days2 * 24 + milliseconds2 / 36e5;
            case "minute":
              return days2 * 1440 + milliseconds2 / 6e4;
            case "second":
              return days2 * 86400 + milliseconds2 / 1e3;
            case "millisecond":
              return Math.floor(days2 * 864e5) + milliseconds2;
            default:
              throw new Error("Unknown unit " + units);
          }
        }
      }
      function valueOf$1() {
        if (!this.isValid()) {
          return NaN;
        }
        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
      }
      function makeAs(alias) {
        return function() {
          return this.as(alias);
        };
      }
      var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
      function clone$1() {
        return createDuration(this);
      }
      function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + "s"]() : NaN;
      }
      function makeGetter(name) {
        return function() {
          return this.isValid() ? this._data[name] : NaN;
        };
      }
      var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
      function weeks() {
        return absFloor(this.days() / 7);
      }
      var round = Math.round, thresholds = {
        ss: 44,
        // a few seconds to seconds
        s: 45,
        // seconds to minute
        m: 45,
        // minutes to hour
        h: 22,
        // hours to day
        d: 26,
        // days to month/week
        w: null,
        // weeks to month
        M: 11
        // months to year
      };
      function substituteTimeAgo(string2, number, withoutSuffix, isFuture, locale2) {
        return locale2.relativeTime(number || 1, !!withoutSuffix, string2, isFuture);
      }
      function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
        var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
        if (thresholds2.w != null) {
          a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
        }
        a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale2;
        return substituteTimeAgo.apply(null, a);
      }
      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === void 0) {
          return round;
        }
        if (typeof roundingFunction === "function") {
          round = roundingFunction;
          return true;
        }
        return false;
      }
      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === void 0) {
          return false;
        }
        if (limit === void 0) {
          return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === "s") {
          thresholds.ss = limit - 1;
        }
        return true;
      }
      function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var withSuffix = false, th = thresholds, locale2, output;
        if (typeof argWithSuffix === "object") {
          argThresholds = argWithSuffix;
          argWithSuffix = false;
        }
        if (typeof argWithSuffix === "boolean") {
          withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === "object") {
          th = Object.assign({}, thresholds, argThresholds);
          if (argThresholds.s != null && argThresholds.ss == null) {
            th.ss = argThresholds.s - 1;
          }
        }
        locale2 = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale2);
        if (withSuffix) {
          output = locale2.pastFuture(+this, output);
        }
        return locale2.postformat(output);
      }
      var abs$1 = Math.abs;
      function sign(x) {
        return (x > 0) - (x < 0) || +x;
      }
      function toISOString$1() {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
        if (!total) {
          return "P0D";
        }
        minutes2 = absFloor(seconds2 / 60);
        hours2 = absFloor(minutes2 / 60);
        seconds2 %= 60;
        minutes2 %= 60;
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
        totalSign = total < 0 ? "-" : "";
        ymSign = sign(this._months) !== sign(total) ? "-" : "";
        daysSign = sign(this._days) !== sign(total) ? "-" : "";
        hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
        return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
      }
      var proto$2 = Duration.prototype;
      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      proto$2.toIsoString = deprecate(
        "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
        toISOString$1
      );
      proto$2.lang = lang;
      addFormatToken("X", 0, 0, "unix");
      addFormatToken("x", 0, 0, "valueOf");
      addRegexToken("x", matchSigned);
      addRegexToken("X", matchTimestamp);
      addParseToken("X", function(input, array, config) {
        config._d = new Date(parseFloat(input) * 1e3);
      });
      addParseToken("x", function(input, array, config) {
        config._d = new Date(toInt(input));
      });
      hooks.version = "2.29.1";
      setHookCallback(createLocal);
      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto;
      hooks.HTML5_FMT = {
        DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
        // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
        // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
        // <input type="datetime-local" step="0.001" />
        DATE: "YYYY-MM-DD",
        // <input type="date" />
        TIME: "HH:mm",
        // <input type="time" />
        TIME_SECONDS: "HH:mm:ss",
        // <input type="time" step="1" />
        TIME_MS: "HH:mm:ss.SSS",
        // <input type="time" step="0.001" />
        WEEK: "GGGG-[W]WW",
        // <input type="week" />
        MONTH: "YYYY-MM"
        // <input type="month" />
      };
      return hooks;
    });
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);

// updateNoteTypeModal.ts
var import_obsidian4 = require("obsidian");

// tagrenamer/renaming.ts
var import_obsidian2 = require("obsidian");

// tagrenamer/Tag.ts
var tagBody = /^#[^\u2000-\u206F\u2E00-\u2E7F'!"#$%&()*+,.:;<=>?@^`{|}~\[\]\\\s]+$/;
var Tag = class {
  constructor(name) {
    const hashed = this.tag = Tag.toTag(name), canonical = this.canonical = hashed.toLowerCase(), canonical_prefix = this.canonical_prefix = canonical + "/";
    this.name = hashed.slice(1);
    this.matches = function(text) {
      text = text.toLowerCase();
      return text == canonical || text.startsWith(canonical_prefix);
    };
  }
  toString() {
    return this.tag;
  }
  static isTag(s) {
    return tagBody.test(s);
  }
  static toTag(name) {
    while (name.startsWith("##"))
      name = name.slice(1);
    return name.startsWith("#") ? name : "#" + name;
  }
  static canonical(name) {
    return Tag.toTag(name).toLowerCase();
  }
};
var Replacement = class {
  constructor(fromTag, toTag) {
    const cache = Object.assign(
      /* @__PURE__ */ Object.create(null),
      {
        [fromTag.tag]: toTag.tag,
        [fromTag.name]: toTag.name
      }
    );
    this.inString = function(text, pos = 0) {
      return text.slice(0, pos) + toTag.tag + text.slice(pos + fromTag.tag.length);
    };
    this.inArray = (tags, skipOdd, isAlias2) => {
      return tags.map((t, i) => {
        if (skipOdd && i & 1)
          return t;
        if (!t)
          return t;
        if (isAlias2) {
          if (!t.startsWith("#") || !Tag.isTag(t))
            return t;
        } else if (/[ ,\n]/.test(t)) {
          return this.inArray(t.split(/([, \n]+)/), true, isAlias2).join("");
        }
        if (cache[t])
          return cache[t];
        const lc = t.toLowerCase();
        if (cache[lc]) {
          return cache[t] = cache[lc];
        } else if (lc.startsWith(fromTag.canonical_prefix)) {
          return cache[t] = cache[lc] = this.inString(t);
        } else if (("#" + lc).startsWith(fromTag.canonical_prefix)) {
          return cache[t] = cache[lc] = this.inString("#" + t).slice(1);
        }
        return cache[t] = cache[lc] = t;
      });
    };
    this.willMergeTags = function(tagNames) {
      if (fromTag.canonical === toTag.canonical)
        return;
      const existing = new Set(tagNames.map((s) => s.toLowerCase()));
      for (const tagName of tagNames.filter(fromTag.matches)) {
        const changed = this.inString(tagName);
        if (existing.has(changed.toLowerCase()))
          return [new Tag(tagName), new Tag(changed)];
      }
    };
  }
};

// tagrenamer/File.ts
var import_obsidian = require("obsidian");

// node_modules/yaml/browser/dist/nodes/Node.js
var ALIAS = Symbol.for("yaml.alias");
var DOC = Symbol.for("yaml.document");
var MAP = Symbol.for("yaml.map");
var PAIR = Symbol.for("yaml.pair");
var SCALAR = Symbol.for("yaml.scalar");
var SEQ = Symbol.for("yaml.seq");
var NODE_TYPE = Symbol.for("yaml.node.type");
var isAlias = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === ALIAS;
var isDocument = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === DOC;
var isMap = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === MAP;
var isPair = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === PAIR;
var isScalar = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === SCALAR;
var isSeq = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === SEQ;
function isCollection(node) {
  if (node && typeof node === "object")
    switch (node[NODE_TYPE]) {
      case MAP:
      case SEQ:
        return true;
    }
  return false;
}
function isNode(node) {
  if (node && typeof node === "object")
    switch (node[NODE_TYPE]) {
      case ALIAS:
      case MAP:
      case SCALAR:
      case SEQ:
        return true;
    }
  return false;
}
var hasAnchor = (node) => (isScalar(node) || isCollection(node)) && !!node.anchor;
var NodeBase = class {
  constructor(type) {
    Object.defineProperty(this, NODE_TYPE, { value: type });
  }
  /** Create a copy of this node.  */
  clone() {
    const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
    if (this.range)
      copy.range = this.range.slice();
    return copy;
  }
};

// node_modules/yaml/browser/dist/visit.js
var BREAK = Symbol("break visit");
var SKIP = Symbol("skip children");
var REMOVE = Symbol("remove node");
function visit(node, visitor) {
  if (typeof visitor === "object" && (visitor.Collection || visitor.Node || visitor.Value)) {
    visitor = Object.assign({
      Alias: visitor.Node,
      Map: visitor.Node,
      Scalar: visitor.Node,
      Seq: visitor.Node
    }, visitor.Value && {
      Map: visitor.Value,
      Scalar: visitor.Value,
      Seq: visitor.Value
    }, visitor.Collection && {
      Map: visitor.Collection,
      Seq: visitor.Collection
    }, visitor);
  }
  if (isDocument(node)) {
    const cd = _visit(null, node.contents, visitor, Object.freeze([node]));
    if (cd === REMOVE)
      node.contents = null;
  } else
    _visit(null, node, visitor, Object.freeze([]));
}
visit.BREAK = BREAK;
visit.SKIP = SKIP;
visit.REMOVE = REMOVE;
function _visit(key, node, visitor, path) {
  let ctrl = void 0;
  if (typeof visitor === "function")
    ctrl = visitor(key, node, path);
  else if (isMap(node)) {
    if (visitor.Map)
      ctrl = visitor.Map(key, node, path);
  } else if (isSeq(node)) {
    if (visitor.Seq)
      ctrl = visitor.Seq(key, node, path);
  } else if (isPair(node)) {
    if (visitor.Pair)
      ctrl = visitor.Pair(key, node, path);
  } else if (isScalar(node)) {
    if (visitor.Scalar)
      ctrl = visitor.Scalar(key, node, path);
  } else if (isAlias(node)) {
    if (visitor.Alias)
      ctrl = visitor.Alias(key, node, path);
  }
  if (isNode(ctrl) || isPair(ctrl)) {
    const parent = path[path.length - 1];
    if (isCollection(parent)) {
      parent.items[key] = ctrl;
    } else if (isPair(parent)) {
      if (key === "key")
        parent.key = ctrl;
      else
        parent.value = ctrl;
    } else if (isDocument(parent)) {
      parent.contents = ctrl;
    } else {
      const pt = isAlias(parent) ? "alias" : "scalar";
      throw new Error(`Cannot replace node with ${pt} parent`);
    }
    return _visit(key, ctrl, visitor, path);
  }
  if (typeof ctrl !== "symbol") {
    if (isCollection(node)) {
      path = Object.freeze(path.concat(node));
      for (let i = 0; i < node.items.length; ++i) {
        const ci = _visit(i, node.items[i], visitor, path);
        if (typeof ci === "number")
          i = ci - 1;
        else if (ci === BREAK)
          return BREAK;
        else if (ci === REMOVE) {
          node.items.splice(i, 1);
          i -= 1;
        }
      }
    } else if (isPair(node)) {
      path = Object.freeze(path.concat(node));
      const ck = _visit("key", node.key, visitor, path);
      if (ck === BREAK)
        return BREAK;
      else if (ck === REMOVE)
        node.key = null;
      const cv = _visit("value", node.value, visitor, path);
      if (cv === BREAK)
        return BREAK;
      else if (cv === REMOVE)
        node.value = null;
    }
  }
  return ctrl;
}

// node_modules/yaml/browser/dist/doc/directives.js
var escapeChars = {
  "!": "%21",
  ",": "%2C",
  "[": "%5B",
  "]": "%5D",
  "{": "%7B",
  "}": "%7D"
};
var escapeTagName = (tn) => tn.replace(/[!,[\]{}]/g, (ch) => escapeChars[ch]);
var Directives = class {
  constructor(yaml, tags) {
    this.marker = null;
    this.yaml = Object.assign({}, Directives.defaultYaml, yaml);
    this.tags = Object.assign({}, Directives.defaultTags, tags);
  }
  clone() {
    const copy = new Directives(this.yaml, this.tags);
    copy.marker = this.marker;
    return copy;
  }
  /**
   * During parsing, get a Directives instance for the current document and
   * update the stream state according to the current version's spec.
   */
  atDocument() {
    const res = new Directives(this.yaml, this.tags);
    switch (this.yaml.version) {
      case "1.1":
        this.atNextDocument = true;
        break;
      case "1.2":
        this.atNextDocument = false;
        this.yaml = {
          explicit: Directives.defaultYaml.explicit,
          version: "1.2"
        };
        this.tags = Object.assign({}, Directives.defaultTags);
        break;
    }
    return res;
  }
  /**
   * @param onError - May be called even if the action was successful
   * @returns `true` on success
   */
  add(line, onError) {
    if (this.atNextDocument) {
      this.yaml = { explicit: Directives.defaultYaml.explicit, version: "1.1" };
      this.tags = Object.assign({}, Directives.defaultTags);
      this.atNextDocument = false;
    }
    const parts = line.trim().split(/[ \t]+/);
    const name = parts.shift();
    switch (name) {
      case "%TAG": {
        if (parts.length !== 2) {
          onError(0, "%TAG directive should contain exactly two parts");
          if (parts.length < 2)
            return false;
        }
        const [handle, prefix] = parts;
        this.tags[handle] = prefix;
        return true;
      }
      case "%YAML": {
        this.yaml.explicit = true;
        if (parts.length < 1) {
          onError(0, "%YAML directive should contain exactly one part");
          return false;
        }
        const [version] = parts;
        if (version === "1.1" || version === "1.2") {
          this.yaml.version = version;
          return true;
        } else {
          onError(6, `Unsupported YAML version ${version}`, true);
          return false;
        }
      }
      default:
        onError(0, `Unknown directive ${name}`, true);
        return false;
    }
  }
  /**
   * Resolves a tag, matching handles to those defined in %TAG directives.
   *
   * @returns Resolved tag, which may also be the non-specific tag `'!'` or a
   *   `'!local'` tag, or `null` if unresolvable.
   */
  tagName(source, onError) {
    if (source === "!")
      return "!";
    if (source[0] !== "!") {
      onError(`Not a valid tag: ${source}`);
      return null;
    }
    if (source[1] === "<") {
      const verbatim = source.slice(2, -1);
      if (verbatim === "!" || verbatim === "!!") {
        onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);
        return null;
      }
      if (source[source.length - 1] !== ">")
        onError("Verbatim tags must end with a >");
      return verbatim;
    }
    const [, handle, suffix] = source.match(/^(.*!)([^!]*)$/);
    if (!suffix)
      onError(`The ${source} tag has no suffix`);
    const prefix = this.tags[handle];
    if (prefix)
      return prefix + decodeURIComponent(suffix);
    if (handle === "!")
      return source;
    onError(`Could not resolve tag: ${source}`);
    return null;
  }
  /**
   * Given a fully resolved tag, returns its printable string form,
   * taking into account current tag prefixes and defaults.
   */
  tagString(tag2) {
    for (const [handle, prefix] of Object.entries(this.tags)) {
      if (tag2.startsWith(prefix))
        return handle + escapeTagName(tag2.substring(prefix.length));
    }
    return tag2[0] === "!" ? tag2 : `!<${tag2}>`;
  }
  toString(doc) {
    const lines = this.yaml.explicit ? [`%YAML ${this.yaml.version || "1.2"}`] : [];
    const tagEntries = Object.entries(this.tags);
    let tagNames;
    if (doc && tagEntries.length > 0 && isNode(doc.contents)) {
      const tags = {};
      visit(doc.contents, (_key, node) => {
        if (isNode(node) && node.tag)
          tags[node.tag] = true;
      });
      tagNames = Object.keys(tags);
    } else
      tagNames = [];
    for (const [handle, prefix] of tagEntries) {
      if (handle === "!!" && prefix === "tag:yaml.org,2002:")
        continue;
      if (!doc || tagNames.some((tn) => tn.startsWith(prefix)))
        lines.push(`%TAG ${handle} ${prefix}`);
    }
    return lines.join("\n");
  }
};
Directives.defaultYaml = { explicit: false, version: "1.2" };
Directives.defaultTags = { "!!": "tag:yaml.org,2002:" };

// node_modules/yaml/browser/dist/doc/anchors.js
function anchorIsValid(anchor) {
  if (/[\x00-\x19\s,[\]{}]/.test(anchor)) {
    const sa = JSON.stringify(anchor);
    const msg = `Anchor must not contain whitespace or control characters: ${sa}`;
    throw new Error(msg);
  }
  return true;
}
function anchorNames(root) {
  const anchors = /* @__PURE__ */ new Set();
  visit(root, {
    Value(_key, node) {
      if (node.anchor)
        anchors.add(node.anchor);
    }
  });
  return anchors;
}
function findNewAnchor(prefix, exclude) {
  for (let i = 1; true; ++i) {
    const name = `${prefix}${i}`;
    if (!exclude.has(name))
      return name;
  }
}
function createNodeAnchors(doc, prefix) {
  const aliasObjects = [];
  const sourceObjects = /* @__PURE__ */ new Map();
  let prevAnchors = null;
  return {
    onAnchor(source) {
      aliasObjects.push(source);
      if (!prevAnchors)
        prevAnchors = anchorNames(doc);
      const anchor = findNewAnchor(prefix, prevAnchors);
      prevAnchors.add(anchor);
      return anchor;
    },
    /**
     * With circular references, the source node is only resolved after all
     * of its child nodes are. This is why anchors are set only after all of
     * the nodes have been created.
     */
    setAnchors() {
      for (const source of aliasObjects) {
        const ref = sourceObjects.get(source);
        if (typeof ref === "object" && ref.anchor && (isScalar(ref.node) || isCollection(ref.node))) {
          ref.node.anchor = ref.anchor;
        } else {
          const error = new Error("Failed to resolve repeated object (this should not happen)");
          error.source = source;
          throw error;
        }
      }
    },
    sourceObjects
  };
}

// node_modules/yaml/browser/dist/nodes/Alias.js
var Alias = class extends NodeBase {
  constructor(source) {
    super(ALIAS);
    this.source = source;
    Object.defineProperty(this, "tag", {
      set() {
        throw new Error("Alias nodes cannot have tags");
      }
    });
  }
  /**
   * Resolve the value of this alias within `doc`, finding the last
   * instance of the `source` anchor before this node.
   */
  resolve(doc) {
    let found = void 0;
    visit(doc, {
      Node: (_key, node) => {
        if (node === this)
          return visit.BREAK;
        if (node.anchor === this.source)
          found = node;
      }
    });
    return found;
  }
  toJSON(_arg, ctx) {
    if (!ctx)
      return { source: this.source };
    const { anchors, doc, maxAliasCount } = ctx;
    const source = this.resolve(doc);
    if (!source) {
      const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
      throw new ReferenceError(msg);
    }
    const data = anchors.get(source);
    if (!data || data.res === void 0) {
      const msg = "This should not happen: Alias anchor was not resolved?";
      throw new ReferenceError(msg);
    }
    if (maxAliasCount >= 0) {
      data.count += 1;
      if (data.aliasCount === 0)
        data.aliasCount = getAliasCount(doc, source, anchors);
      if (data.count * data.aliasCount > maxAliasCount) {
        const msg = "Excessive alias count indicates a resource exhaustion attack";
        throw new ReferenceError(msg);
      }
    }
    return data.res;
  }
  toString(ctx, _onComment, _onChompKeep) {
    const src = `*${this.source}`;
    if (ctx) {
      anchorIsValid(this.source);
      if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {
        const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
        throw new Error(msg);
      }
      if (ctx.implicitKey)
        return `${src} `;
    }
    return src;
  }
};
function getAliasCount(doc, node, anchors) {
  if (isAlias(node)) {
    const source = node.resolve(doc);
    const anchor = anchors && source && anchors.get(source);
    return anchor ? anchor.count * anchor.aliasCount : 0;
  } else if (isCollection(node)) {
    let count = 0;
    for (const item of node.items) {
      const c = getAliasCount(doc, item, anchors);
      if (c > count)
        count = c;
    }
    return count;
  } else if (isPair(node)) {
    const kc = getAliasCount(doc, node.key, anchors);
    const vc = getAliasCount(doc, node.value, anchors);
    return Math.max(kc, vc);
  }
  return 1;
}

// node_modules/yaml/browser/dist/nodes/toJS.js
function toJS(value, arg, ctx) {
  if (Array.isArray(value))
    return value.map((v, i) => toJS(v, String(i), ctx));
  if (value && typeof value.toJSON === "function") {
    if (!ctx || !hasAnchor(value))
      return value.toJSON(arg, ctx);
    const data = { aliasCount: 0, count: 1, res: void 0 };
    ctx.anchors.set(value, data);
    ctx.onCreate = (res2) => {
      data.res = res2;
      delete ctx.onCreate;
    };
    const res = value.toJSON(arg, ctx);
    if (ctx.onCreate)
      ctx.onCreate(res);
    return res;
  }
  if (typeof value === "bigint" && !(ctx && ctx.keep))
    return Number(value);
  return value;
}

// node_modules/yaml/browser/dist/nodes/Scalar.js
var isScalarValue = (value) => !value || typeof value !== "function" && typeof value !== "object";
var Scalar = class extends NodeBase {
  constructor(value) {
    super(SCALAR);
    this.value = value;
  }
  toJSON(arg, ctx) {
    return ctx && ctx.keep ? this.value : toJS(this.value, arg, ctx);
  }
  toString() {
    return String(this.value);
  }
};
Scalar.BLOCK_FOLDED = "BLOCK_FOLDED";
Scalar.BLOCK_LITERAL = "BLOCK_LITERAL";
Scalar.PLAIN = "PLAIN";
Scalar.QUOTE_DOUBLE = "QUOTE_DOUBLE";
Scalar.QUOTE_SINGLE = "QUOTE_SINGLE";

// node_modules/yaml/browser/dist/doc/createNode.js
var defaultTagPrefix = "tag:yaml.org,2002:";
function findTagObject(value, tagName, tags) {
  if (tagName) {
    const match = tags.filter((t) => t.tag === tagName);
    const tagObj = match.find((t) => !t.format) || match[0];
    if (!tagObj)
      throw new Error(`Tag ${tagName} not found`);
    return tagObj;
  }
  return tags.find((t) => t.identify && t.identify(value) && !t.format);
}
function createNode(value, tagName, ctx) {
  var _a, _b;
  if (isDocument(value))
    value = value.contents;
  if (isNode(value))
    return value;
  if (isPair(value)) {
    const map2 = (_b = (_a = ctx.schema[MAP]).createNode) === null || _b === void 0 ? void 0 : _b.call(_a, ctx.schema, null, ctx);
    map2.items.push(value);
    return map2;
  }
  if (value instanceof String || value instanceof Number || value instanceof Boolean || typeof BigInt === "function" && value instanceof BigInt) {
    value = value.valueOf();
  }
  const { aliasDuplicateObjects, onAnchor, onTagObj, schema: schema4, sourceObjects } = ctx;
  let ref = void 0;
  if (aliasDuplicateObjects && value && typeof value === "object") {
    ref = sourceObjects.get(value);
    if (ref) {
      if (!ref.anchor)
        ref.anchor = onAnchor(value);
      return new Alias(ref.anchor);
    } else {
      ref = { anchor: null, node: null };
      sourceObjects.set(value, ref);
    }
  }
  if (tagName && tagName.startsWith("!!"))
    tagName = defaultTagPrefix + tagName.slice(2);
  let tagObj = findTagObject(value, tagName, schema4.tags);
  if (!tagObj) {
    if (value && typeof value.toJSON === "function")
      value = value.toJSON();
    if (!value || typeof value !== "object") {
      const node2 = new Scalar(value);
      if (ref)
        ref.node = node2;
      return node2;
    }
    tagObj = value instanceof Map ? schema4[MAP] : Symbol.iterator in Object(value) ? schema4[SEQ] : schema4[MAP];
  }
  if (onTagObj) {
    onTagObj(tagObj);
    delete ctx.onTagObj;
  }
  const node = (tagObj === null || tagObj === void 0 ? void 0 : tagObj.createNode) ? tagObj.createNode(ctx.schema, value, ctx) : new Scalar(value);
  if (tagName)
    node.tag = tagName;
  if (ref)
    ref.node = node;
  return node;
}

// node_modules/yaml/browser/dist/nodes/Collection.js
function collectionFromPath(schema4, path, value) {
  let v = value;
  for (let i = path.length - 1; i >= 0; --i) {
    const k = path[i];
    if (typeof k === "number" && Number.isInteger(k) && k >= 0) {
      const a = [];
      a[k] = v;
      v = a;
    } else {
      v = /* @__PURE__ */ new Map([[k, v]]);
    }
  }
  return createNode(v, void 0, {
    aliasDuplicateObjects: false,
    keepUndefined: false,
    onAnchor: () => {
      throw new Error("This should not happen, please report a bug.");
    },
    schema: schema4,
    sourceObjects: /* @__PURE__ */ new Map()
  });
}
var isEmptyPath = (path) => path == null || typeof path === "object" && !!path[Symbol.iterator]().next().done;
var Collection = class extends NodeBase {
  constructor(type, schema4) {
    super(type);
    Object.defineProperty(this, "schema", {
      value: schema4,
      configurable: true,
      enumerable: false,
      writable: true
    });
  }
  /**
   * Create a copy of this collection.
   *
   * @param schema - If defined, overwrites the original's schema
   */
  clone(schema4) {
    const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
    if (schema4)
      copy.schema = schema4;
    copy.items = copy.items.map((it) => isNode(it) || isPair(it) ? it.clone(schema4) : it);
    if (this.range)
      copy.range = this.range.slice();
    return copy;
  }
  /**
   * Adds a value to the collection. For `!!map` and `!!omap` the value must
   * be a Pair instance or a `{ key, value }` object, which may not have a key
   * that already exists in the map.
   */
  addIn(path, value) {
    if (isEmptyPath(path))
      this.add(value);
    else {
      const [key, ...rest] = path;
      const node = this.get(key, true);
      if (isCollection(node))
        node.addIn(rest, value);
      else if (node === void 0 && this.schema)
        this.set(key, collectionFromPath(this.schema, rest, value));
      else
        throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
    }
  }
  /**
   * Removes a value from the collection.
   * @returns `true` if the item was found and removed.
   */
  deleteIn(path) {
    const [key, ...rest] = path;
    if (rest.length === 0)
      return this.delete(key);
    const node = this.get(key, true);
    if (isCollection(node))
      return node.deleteIn(rest);
    else
      throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
  }
  /**
   * Returns item at `key`, or `undefined` if not found. By default unwraps
   * scalar values from their surrounding node; to disable set `keepScalar` to
   * `true` (collections are always returned intact).
   */
  getIn(path, keepScalar) {
    const [key, ...rest] = path;
    const node = this.get(key, true);
    if (rest.length === 0)
      return !keepScalar && isScalar(node) ? node.value : node;
    else
      return isCollection(node) ? node.getIn(rest, keepScalar) : void 0;
  }
  hasAllNullValues(allowScalar) {
    return this.items.every((node) => {
      if (!isPair(node))
        return false;
      const n = node.value;
      return n == null || allowScalar && isScalar(n) && n.value == null && !n.commentBefore && !n.comment && !n.tag;
    });
  }
  /**
   * Checks if the collection includes a value with the key `key`.
   */
  hasIn(path) {
    const [key, ...rest] = path;
    if (rest.length === 0)
      return this.has(key);
    const node = this.get(key, true);
    return isCollection(node) ? node.hasIn(rest) : false;
  }
  /**
   * Sets a value in this collection. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   */
  setIn(path, value) {
    const [key, ...rest] = path;
    if (rest.length === 0) {
      this.set(key, value);
    } else {
      const node = this.get(key, true);
      if (isCollection(node))
        node.setIn(rest, value);
      else if (node === void 0 && this.schema)
        this.set(key, collectionFromPath(this.schema, rest, value));
      else
        throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
    }
  }
};
Collection.maxFlowStringSingleLineLength = 60;

// node_modules/yaml/browser/dist/stringify/stringifyComment.js
var stringifyComment = (str) => str.replace(/^(?!$)(?: $)?/gm, "#");
function indentComment(comment, indent) {
  if (/^\n+$/.test(comment))
    return comment.substring(1);
  return indent ? comment.replace(/^(?! *$)/gm, indent) : comment;
}
var lineComment = (str, indent, comment) => comment.includes("\n") ? "\n" + indentComment(comment, indent) : (str.endsWith(" ") ? "" : " ") + comment;

// node_modules/yaml/browser/dist/stringify/foldFlowLines.js
var FOLD_FLOW = "flow";
var FOLD_BLOCK = "block";
var FOLD_QUOTED = "quoted";
function foldFlowLines(text, indent, mode = "flow", { indentAtStart, lineWidth = 80, minContentWidth = 20, onFold, onOverflow } = {}) {
  if (!lineWidth || lineWidth < 0)
    return text;
  const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);
  if (text.length <= endStep)
    return text;
  const folds = [];
  const escapedFolds = {};
  let end = lineWidth - indent.length;
  if (typeof indentAtStart === "number") {
    if (indentAtStart > lineWidth - Math.max(2, minContentWidth))
      folds.push(0);
    else
      end = lineWidth - indentAtStart;
  }
  let split = void 0;
  let prev = void 0;
  let overflow = false;
  let i = -1;
  let escStart = -1;
  let escEnd = -1;
  if (mode === FOLD_BLOCK) {
    i = consumeMoreIndentedLines(text, i);
    if (i !== -1)
      end = i + endStep;
  }
  for (let ch; ch = text[i += 1]; ) {
    if (mode === FOLD_QUOTED && ch === "\\") {
      escStart = i;
      switch (text[i + 1]) {
        case "x":
          i += 3;
          break;
        case "u":
          i += 5;
          break;
        case "U":
          i += 9;
          break;
        default:
          i += 1;
      }
      escEnd = i;
    }
    if (ch === "\n") {
      if (mode === FOLD_BLOCK)
        i = consumeMoreIndentedLines(text, i);
      end = i + endStep;
      split = void 0;
    } else {
      if (ch === " " && prev && prev !== " " && prev !== "\n" && prev !== "	") {
        const next = text[i + 1];
        if (next && next !== " " && next !== "\n" && next !== "	")
          split = i;
      }
      if (i >= end) {
        if (split) {
          folds.push(split);
          end = split + endStep;
          split = void 0;
        } else if (mode === FOLD_QUOTED) {
          while (prev === " " || prev === "	") {
            prev = ch;
            ch = text[i += 1];
            overflow = true;
          }
          const j = i > escEnd + 1 ? i - 2 : escStart - 1;
          if (escapedFolds[j])
            return text;
          folds.push(j);
          escapedFolds[j] = true;
          end = j + endStep;
          split = void 0;
        } else {
          overflow = true;
        }
      }
    }
    prev = ch;
  }
  if (overflow && onOverflow)
    onOverflow();
  if (folds.length === 0)
    return text;
  if (onFold)
    onFold();
  let res = text.slice(0, folds[0]);
  for (let i2 = 0; i2 < folds.length; ++i2) {
    const fold = folds[i2];
    const end2 = folds[i2 + 1] || text.length;
    if (fold === 0)
      res = `
${indent}${text.slice(0, end2)}`;
    else {
      if (mode === FOLD_QUOTED && escapedFolds[fold])
        res += `${text[fold]}\\`;
      res += `
${indent}${text.slice(fold + 1, end2)}`;
    }
  }
  return res;
}
function consumeMoreIndentedLines(text, i) {
  let ch = text[i + 1];
  while (ch === " " || ch === "	") {
    do {
      ch = text[i += 1];
    } while (ch && ch !== "\n");
    ch = text[i + 1];
  }
  return i;
}

// node_modules/yaml/browser/dist/stringify/stringifyString.js
var getFoldOptions = (ctx) => ({
  indentAtStart: ctx.indentAtStart,
  lineWidth: ctx.options.lineWidth,
  minContentWidth: ctx.options.minContentWidth
});
var containsDocumentMarker = (str) => /^(%|---|\.\.\.)/m.test(str);
function lineLengthOverLimit(str, lineWidth, indentLength) {
  if (!lineWidth || lineWidth < 0)
    return false;
  const limit = lineWidth - indentLength;
  const strLen = str.length;
  if (strLen <= limit)
    return false;
  for (let i = 0, start = 0; i < strLen; ++i) {
    if (str[i] === "\n") {
      if (i - start > limit)
        return true;
      start = i + 1;
      if (strLen - start <= limit)
        return false;
    }
  }
  return true;
}
function doubleQuotedString(value, ctx) {
  const json = JSON.stringify(value);
  if (ctx.options.doubleQuotedAsJSON)
    return json;
  const { implicitKey } = ctx;
  const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;
  const indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "");
  let str = "";
  let start = 0;
  for (let i = 0, ch = json[i]; ch; ch = json[++i]) {
    if (ch === " " && json[i + 1] === "\\" && json[i + 2] === "n") {
      str += json.slice(start, i) + "\\ ";
      i += 1;
      start = i;
      ch = "\\";
    }
    if (ch === "\\")
      switch (json[i + 1]) {
        case "u":
          {
            str += json.slice(start, i);
            const code = json.substr(i + 2, 4);
            switch (code) {
              case "0000":
                str += "\\0";
                break;
              case "0007":
                str += "\\a";
                break;
              case "000b":
                str += "\\v";
                break;
              case "001b":
                str += "\\e";
                break;
              case "0085":
                str += "\\N";
                break;
              case "00a0":
                str += "\\_";
                break;
              case "2028":
                str += "\\L";
                break;
              case "2029":
                str += "\\P";
                break;
              default:
                if (code.substr(0, 2) === "00")
                  str += "\\x" + code.substr(2);
                else
                  str += json.substr(i, 6);
            }
            i += 5;
            start = i + 1;
          }
          break;
        case "n":
          if (implicitKey || json[i + 2] === '"' || json.length < minMultiLineLength) {
            i += 1;
          } else {
            str += json.slice(start, i) + "\n\n";
            while (json[i + 2] === "\\" && json[i + 3] === "n" && json[i + 4] !== '"') {
              str += "\n";
              i += 2;
            }
            str += indent;
            if (json[i + 2] === " ")
              str += "\\";
            i += 1;
            start = i + 1;
          }
          break;
        default:
          i += 1;
      }
  }
  str = start ? str + json.slice(start) : json;
  return implicitKey ? str : foldFlowLines(str, indent, FOLD_QUOTED, getFoldOptions(ctx));
}
function singleQuotedString(value, ctx) {
  if (ctx.options.singleQuote === false || ctx.implicitKey && value.includes("\n") || /[ \t]\n|\n[ \t]/.test(value))
    return doubleQuotedString(value, ctx);
  const indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "");
  const res = "'" + value.replace(/'/g, "''").replace(/\n+/g, `$&
${indent}`) + "'";
  return ctx.implicitKey ? res : foldFlowLines(res, indent, FOLD_FLOW, getFoldOptions(ctx));
}
function quotedString(value, ctx) {
  const { singleQuote } = ctx.options;
  let qs;
  if (singleQuote === false)
    qs = doubleQuotedString;
  else {
    const hasDouble = value.includes('"');
    const hasSingle = value.includes("'");
    if (hasDouble && !hasSingle)
      qs = singleQuotedString;
    else if (hasSingle && !hasDouble)
      qs = doubleQuotedString;
    else
      qs = singleQuote ? singleQuotedString : doubleQuotedString;
  }
  return qs(value, ctx);
}
function blockString({ comment, type, value }, ctx, onComment, onChompKeep) {
  const { blockQuote, commentString, lineWidth } = ctx.options;
  if (!blockQuote || /\n[\t ]+$/.test(value) || /^\s*$/.test(value)) {
    return quotedString(value, ctx);
  }
  const indent = ctx.indent || (ctx.forceBlockIndent || containsDocumentMarker(value) ? "  " : "");
  const literal = blockQuote === "literal" ? true : blockQuote === "folded" || type === Scalar.BLOCK_FOLDED ? false : type === Scalar.BLOCK_LITERAL ? true : !lineLengthOverLimit(value, lineWidth, indent.length);
  if (!value)
    return literal ? "|\n" : ">\n";
  let chomp;
  let endStart;
  for (endStart = value.length; endStart > 0; --endStart) {
    const ch = value[endStart - 1];
    if (ch !== "\n" && ch !== "	" && ch !== " ")
      break;
  }
  let end = value.substring(endStart);
  const endNlPos = end.indexOf("\n");
  if (endNlPos === -1) {
    chomp = "-";
  } else if (value === end || endNlPos !== end.length - 1) {
    chomp = "+";
    if (onChompKeep)
      onChompKeep();
  } else {
    chomp = "";
  }
  if (end) {
    value = value.slice(0, -end.length);
    if (end[end.length - 1] === "\n")
      end = end.slice(0, -1);
    end = end.replace(/\n+(?!\n|$)/g, `$&${indent}`);
  }
  let startWithSpace = false;
  let startEnd;
  let startNlPos = -1;
  for (startEnd = 0; startEnd < value.length; ++startEnd) {
    const ch = value[startEnd];
    if (ch === " ")
      startWithSpace = true;
    else if (ch === "\n")
      startNlPos = startEnd;
    else
      break;
  }
  let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);
  if (start) {
    value = value.substring(start.length);
    start = start.replace(/\n+/g, `$&${indent}`);
  }
  const indentSize = indent ? "2" : "1";
  let header = (literal ? "|" : ">") + (startWithSpace ? indentSize : "") + chomp;
  if (comment) {
    header += " " + commentString(comment.replace(/ ?[\r\n]+/g, " "));
    if (onComment)
      onComment();
  }
  if (literal) {
    value = value.replace(/\n+/g, `$&${indent}`);
    return `${header}
${indent}${start}${value}${end}`;
  }
  value = value.replace(/\n+/g, "\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, "$1$2").replace(/\n+/g, `$&${indent}`);
  const body = foldFlowLines(`${start}${value}${end}`, indent, FOLD_BLOCK, getFoldOptions(ctx));
  return `${header}
${indent}${body}`;
}
function plainString(item, ctx, onComment, onChompKeep) {
  const { type, value } = item;
  const { actualString, implicitKey, indent, inFlow } = ctx;
  if (implicitKey && /[\n[\]{},]/.test(value) || inFlow && /[[\]{},]/.test(value)) {
    return quotedString(value, ctx);
  }
  if (!value || /^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(value)) {
    return implicitKey || inFlow || value.indexOf("\n") === -1 ? quotedString(value, ctx) : blockString(item, ctx, onComment, onChompKeep);
  }
  if (!implicitKey && !inFlow && type !== Scalar.PLAIN && value.indexOf("\n") !== -1) {
    return blockString(item, ctx, onComment, onChompKeep);
  }
  if (indent === "" && containsDocumentMarker(value)) {
    ctx.forceBlockIndent = true;
    return blockString(item, ctx, onComment, onChompKeep);
  }
  const str = value.replace(/\n+/g, `$&
${indent}`);
  if (actualString) {
    const test = (tag2) => {
      var _a;
      return tag2.default && tag2.tag !== "tag:yaml.org,2002:str" && ((_a = tag2.test) === null || _a === void 0 ? void 0 : _a.test(str));
    };
    const { compat, tags } = ctx.doc.schema;
    if (tags.some(test) || (compat === null || compat === void 0 ? void 0 : compat.some(test)))
      return quotedString(value, ctx);
  }
  return implicitKey ? str : foldFlowLines(str, indent, FOLD_FLOW, getFoldOptions(ctx));
}
function stringifyString(item, ctx, onComment, onChompKeep) {
  const { implicitKey, inFlow } = ctx;
  const ss = typeof item.value === "string" ? item : Object.assign({}, item, { value: String(item.value) });
  let { type } = item;
  if (type !== Scalar.QUOTE_DOUBLE) {
    if (/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(ss.value))
      type = Scalar.QUOTE_DOUBLE;
  }
  const _stringify = (_type) => {
    switch (_type) {
      case Scalar.BLOCK_FOLDED:
      case Scalar.BLOCK_LITERAL:
        return implicitKey || inFlow ? quotedString(ss.value, ctx) : blockString(ss, ctx, onComment, onChompKeep);
      case Scalar.QUOTE_DOUBLE:
        return doubleQuotedString(ss.value, ctx);
      case Scalar.QUOTE_SINGLE:
        return singleQuotedString(ss.value, ctx);
      case Scalar.PLAIN:
        return plainString(ss, ctx, onComment, onChompKeep);
      default:
        return null;
    }
  };
  let res = _stringify(type);
  if (res === null) {
    const { defaultKeyType, defaultStringType } = ctx.options;
    const t = implicitKey && defaultKeyType || defaultStringType;
    res = _stringify(t);
    if (res === null)
      throw new Error(`Unsupported default string type ${t}`);
  }
  return res;
}

// node_modules/yaml/browser/dist/stringify/stringify.js
function createStringifyContext(doc, options) {
  const opt = Object.assign({
    blockQuote: true,
    commentString: stringifyComment,
    defaultKeyType: null,
    defaultStringType: "PLAIN",
    directives: null,
    doubleQuotedAsJSON: false,
    doubleQuotedMinMultiLineLength: 40,
    falseStr: "false",
    indentSeq: true,
    lineWidth: 80,
    minContentWidth: 20,
    nullStr: "null",
    simpleKeys: false,
    singleQuote: null,
    trueStr: "true",
    verifyAliasOrder: true
  }, doc.schema.toStringOptions, options);
  let inFlow;
  switch (opt.collectionStyle) {
    case "block":
      inFlow = false;
      break;
    case "flow":
      inFlow = true;
      break;
    default:
      inFlow = null;
  }
  return {
    anchors: /* @__PURE__ */ new Set(),
    doc,
    indent: "",
    indentStep: typeof opt.indent === "number" ? " ".repeat(opt.indent) : "  ",
    inFlow,
    options: opt
  };
}
function getTagObject(tags, item) {
  if (item.tag) {
    const match = tags.filter((t) => t.tag === item.tag);
    if (match.length > 0)
      return match.find((t) => t.format === item.format) || match[0];
  }
  let tagObj = void 0;
  let obj;
  if (isScalar(item)) {
    obj = item.value;
    const match = tags.filter((t) => t.identify && t.identify(obj));
    tagObj = match.find((t) => t.format === item.format) || match.find((t) => !t.format);
  } else {
    obj = item;
    tagObj = tags.find((t) => t.nodeClass && obj instanceof t.nodeClass);
  }
  if (!tagObj) {
    const name = obj && obj.constructor ? obj.constructor.name : typeof obj;
    throw new Error(`Tag not resolved for ${name} value`);
  }
  return tagObj;
}
function stringifyProps(node, tagObj, { anchors, doc }) {
  if (!doc.directives)
    return "";
  const props = [];
  const anchor = (isScalar(node) || isCollection(node)) && node.anchor;
  if (anchor && anchorIsValid(anchor)) {
    anchors.add(anchor);
    props.push(`&${anchor}`);
  }
  const tag2 = node.tag || (tagObj.default ? null : tagObj.tag);
  if (tag2)
    props.push(doc.directives.tagString(tag2));
  return props.join(" ");
}
function stringify(item, ctx, onComment, onChompKeep) {
  var _a;
  if (isPair(item))
    return item.toString(ctx, onComment, onChompKeep);
  if (isAlias(item)) {
    if (ctx.doc.directives)
      return item.toString(ctx);
    if ((_a = ctx.resolvedAliases) === null || _a === void 0 ? void 0 : _a.has(item)) {
      throw new TypeError(`Cannot stringify circular structure without alias nodes`);
    } else {
      if (ctx.resolvedAliases)
        ctx.resolvedAliases.add(item);
      else
        ctx.resolvedAliases = /* @__PURE__ */ new Set([item]);
      item = item.resolve(ctx.doc);
    }
  }
  let tagObj = void 0;
  const node = isNode(item) ? item : ctx.doc.createNode(item, { onTagObj: (o) => tagObj = o });
  if (!tagObj)
    tagObj = getTagObject(ctx.doc.schema.tags, node);
  const props = stringifyProps(node, tagObj, ctx);
  if (props.length > 0)
    ctx.indentAtStart = (ctx.indentAtStart || 0) + props.length + 1;
  const str = typeof tagObj.stringify === "function" ? tagObj.stringify(node, ctx, onComment, onChompKeep) : isScalar(node) ? stringifyString(node, ctx, onComment, onChompKeep) : node.toString(ctx, onComment, onChompKeep);
  if (!props)
    return str;
  return isScalar(node) || str[0] === "{" || str[0] === "[" ? `${props} ${str}` : `${props}
${ctx.indent}${str}`;
}

// node_modules/yaml/browser/dist/stringify/stringifyPair.js
function stringifyPair({ key, value }, ctx, onComment, onChompKeep) {
  const { allNullValues, doc, indent, indentStep, options: { commentString, indentSeq, simpleKeys } } = ctx;
  let keyComment = isNode(key) && key.comment || null;
  if (simpleKeys) {
    if (keyComment) {
      throw new Error("With simple keys, key nodes cannot have comments");
    }
    if (isCollection(key)) {
      const msg = "With simple keys, collection cannot be used as a key value";
      throw new Error(msg);
    }
  }
  let explicitKey = !simpleKeys && (!key || keyComment && value == null && !ctx.inFlow || isCollection(key) || (isScalar(key) ? key.type === Scalar.BLOCK_FOLDED || key.type === Scalar.BLOCK_LITERAL : typeof key === "object"));
  ctx = Object.assign({}, ctx, {
    allNullValues: false,
    implicitKey: !explicitKey && (simpleKeys || !allNullValues),
    indent: indent + indentStep
  });
  let keyCommentDone = false;
  let chompKeep = false;
  let str = stringify(key, ctx, () => keyCommentDone = true, () => chompKeep = true);
  if (!explicitKey && !ctx.inFlow && str.length > 1024) {
    if (simpleKeys)
      throw new Error("With simple keys, single line scalar must not span more than 1024 characters");
    explicitKey = true;
  }
  if (ctx.inFlow) {
    if (allNullValues || value == null) {
      if (keyCommentDone && onComment)
        onComment();
      return explicitKey ? `? ${str}` : str;
    }
  } else if (allNullValues && !simpleKeys || value == null && explicitKey) {
    str = `? ${str}`;
    if (keyComment && !keyCommentDone) {
      str += lineComment(str, ctx.indent, commentString(keyComment));
    } else if (chompKeep && onChompKeep)
      onChompKeep();
    return str;
  }
  if (keyCommentDone)
    keyComment = null;
  if (explicitKey) {
    if (keyComment)
      str += lineComment(str, ctx.indent, commentString(keyComment));
    str = `? ${str}
${indent}:`;
  } else {
    str = `${str}:`;
    if (keyComment)
      str += lineComment(str, ctx.indent, commentString(keyComment));
  }
  let vcb = "";
  let valueComment = null;
  if (isNode(value)) {
    if (value.spaceBefore)
      vcb = "\n";
    if (value.commentBefore) {
      const cs = commentString(value.commentBefore);
      vcb += `
${indentComment(cs, ctx.indent)}`;
    }
    valueComment = value.comment;
  } else if (value && typeof value === "object") {
    value = doc.createNode(value);
  }
  ctx.implicitKey = false;
  if (!explicitKey && !keyComment && isScalar(value))
    ctx.indentAtStart = str.length + 1;
  chompKeep = false;
  if (!indentSeq && indentStep.length >= 2 && !ctx.inFlow && !explicitKey && isSeq(value) && !value.flow && !value.tag && !value.anchor) {
    ctx.indent = ctx.indent.substr(2);
  }
  let valueCommentDone = false;
  const valueStr = stringify(value, ctx, () => valueCommentDone = true, () => chompKeep = true);
  let ws = " ";
  if (vcb || keyComment) {
    ws = valueStr === "" && !ctx.inFlow ? vcb : `${vcb}
${ctx.indent}`;
  } else if (!explicitKey && isCollection(value)) {
    const flow = valueStr[0] === "[" || valueStr[0] === "{";
    if (!flow || valueStr.includes("\n"))
      ws = `
${ctx.indent}`;
  } else if (valueStr === "" || valueStr[0] === "\n")
    ws = "";
  str += ws + valueStr;
  if (ctx.inFlow) {
    if (valueCommentDone && onComment)
      onComment();
  } else if (valueComment && !valueCommentDone) {
    str += lineComment(str, ctx.indent, commentString(valueComment));
  } else if (chompKeep && onChompKeep) {
    onChompKeep();
  }
  return str;
}

// node_modules/yaml/browser/dist/log.js
function warn(logLevel, warning) {
  if (logLevel === "debug" || logLevel === "warn") {
    if (typeof process !== "undefined" && process.emitWarning)
      process.emitWarning(warning);
    else
      console.warn(warning);
  }
}

// node_modules/yaml/browser/dist/nodes/addPairToJSMap.js
var MERGE_KEY = "<<";
function addPairToJSMap(ctx, map2, { key, value }) {
  if (ctx && ctx.doc.schema.merge && isMergeKey(key)) {
    value = isAlias(value) ? value.resolve(ctx.doc) : value;
    if (isSeq(value))
      for (const it of value.items)
        mergeToJSMap(ctx, map2, it);
    else if (Array.isArray(value))
      for (const it of value)
        mergeToJSMap(ctx, map2, it);
    else
      mergeToJSMap(ctx, map2, value);
  } else {
    const jsKey = toJS(key, "", ctx);
    if (map2 instanceof Map) {
      map2.set(jsKey, toJS(value, jsKey, ctx));
    } else if (map2 instanceof Set) {
      map2.add(jsKey);
    } else {
      const stringKey = stringifyKey(key, jsKey, ctx);
      const jsValue = toJS(value, stringKey, ctx);
      if (stringKey in map2)
        Object.defineProperty(map2, stringKey, {
          value: jsValue,
          writable: true,
          enumerable: true,
          configurable: true
        });
      else
        map2[stringKey] = jsValue;
    }
  }
  return map2;
}
var isMergeKey = (key) => key === MERGE_KEY || isScalar(key) && key.value === MERGE_KEY && (!key.type || key.type === Scalar.PLAIN);
function mergeToJSMap(ctx, map2, value) {
  const source = ctx && isAlias(value) ? value.resolve(ctx.doc) : value;
  if (!isMap(source))
    throw new Error("Merge sources must be maps or map aliases");
  const srcMap = source.toJSON(null, ctx, Map);
  for (const [key, value2] of srcMap) {
    if (map2 instanceof Map) {
      if (!map2.has(key))
        map2.set(key, value2);
    } else if (map2 instanceof Set) {
      map2.add(key);
    } else if (!Object.prototype.hasOwnProperty.call(map2, key)) {
      Object.defineProperty(map2, key, {
        value: value2,
        writable: true,
        enumerable: true,
        configurable: true
      });
    }
  }
  return map2;
}
function stringifyKey(key, jsKey, ctx) {
  if (jsKey === null)
    return "";
  if (typeof jsKey !== "object")
    return String(jsKey);
  if (isNode(key) && ctx && ctx.doc) {
    const strCtx = createStringifyContext(ctx.doc, {});
    strCtx.anchors = /* @__PURE__ */ new Set();
    for (const node of ctx.anchors.keys())
      strCtx.anchors.add(node.anchor);
    strCtx.inFlow = true;
    strCtx.inStringifyKey = true;
    const strKey = key.toString(strCtx);
    if (!ctx.mapKeyWarned) {
      let jsonStr = JSON.stringify(strKey);
      if (jsonStr.length > 40)
        jsonStr = jsonStr.substring(0, 36) + '..."';
      warn(ctx.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${jsonStr}. Set mapAsMap: true to use object keys.`);
      ctx.mapKeyWarned = true;
    }
    return strKey;
  }
  return JSON.stringify(jsKey);
}

// node_modules/yaml/browser/dist/nodes/Pair.js
function createPair(key, value, ctx) {
  const k = createNode(key, void 0, ctx);
  const v = createNode(value, void 0, ctx);
  return new Pair(k, v);
}
var Pair = class {
  constructor(key, value = null) {
    Object.defineProperty(this, NODE_TYPE, { value: PAIR });
    this.key = key;
    this.value = value;
  }
  clone(schema4) {
    let { key, value } = this;
    if (isNode(key))
      key = key.clone(schema4);
    if (isNode(value))
      value = value.clone(schema4);
    return new Pair(key, value);
  }
  toJSON(_, ctx) {
    const pair = ctx && ctx.mapAsMap ? /* @__PURE__ */ new Map() : {};
    return addPairToJSMap(ctx, pair, this);
  }
  toString(ctx, onComment, onChompKeep) {
    return ctx && ctx.doc ? stringifyPair(this, ctx, onComment, onChompKeep) : JSON.stringify(this);
  }
};

// node_modules/yaml/browser/dist/options.js
var defaultOptions = {
  intAsBigInt: false,
  keepSourceTokens: false,
  logLevel: "warn",
  prettyErrors: true,
  strict: true,
  uniqueKeys: true,
  version: "1.2"
};

// node_modules/yaml/browser/dist/stringify/stringifyCollection.js
function stringifyCollection(collection, ctx, options) {
  var _a;
  const flow = (_a = ctx.inFlow) !== null && _a !== void 0 ? _a : collection.flow;
  const stringify4 = flow ? stringifyFlowCollection : stringifyBlockCollection;
  return stringify4(collection, ctx, options);
}
function stringifyBlockCollection({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {
  const { indent, options: { commentString } } = ctx;
  const itemCtx = Object.assign({}, ctx, { indent: itemIndent, type: null });
  let chompKeep = false;
  const lines = [];
  for (let i = 0; i < items.length; ++i) {
    const item = items[i];
    let comment2 = null;
    if (isNode(item)) {
      if (!chompKeep && item.spaceBefore)
        lines.push("");
      addCommentBefore(ctx, lines, item.commentBefore, chompKeep);
      if (item.comment)
        comment2 = item.comment;
    } else if (isPair(item)) {
      const ik = isNode(item.key) ? item.key : null;
      if (ik) {
        if (!chompKeep && ik.spaceBefore)
          lines.push("");
        addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);
      }
    }
    chompKeep = false;
    let str2 = stringify(item, itemCtx, () => comment2 = null, () => chompKeep = true);
    if (comment2)
      str2 += lineComment(str2, itemIndent, commentString(comment2));
    if (chompKeep && comment2)
      chompKeep = false;
    lines.push(blockItemPrefix + str2);
  }
  let str;
  if (lines.length === 0) {
    str = flowChars.start + flowChars.end;
  } else {
    str = lines[0];
    for (let i = 1; i < lines.length; ++i) {
      const line = lines[i];
      str += line ? `
${indent}${line}` : "\n";
    }
  }
  if (comment) {
    str += "\n" + indentComment(commentString(comment), indent);
    if (onComment)
      onComment();
  } else if (chompKeep && onChompKeep)
    onChompKeep();
  return str;
}
function stringifyFlowCollection({ comment, items }, ctx, { flowChars, itemIndent, onComment }) {
  const { indent, indentStep, options: { commentString } } = ctx;
  itemIndent += indentStep;
  const itemCtx = Object.assign({}, ctx, {
    indent: itemIndent,
    inFlow: true,
    type: null
  });
  let reqNewline = false;
  let linesAtValue = 0;
  const lines = [];
  for (let i = 0; i < items.length; ++i) {
    const item = items[i];
    let comment2 = null;
    if (isNode(item)) {
      if (item.spaceBefore)
        lines.push("");
      addCommentBefore(ctx, lines, item.commentBefore, false);
      if (item.comment)
        comment2 = item.comment;
    } else if (isPair(item)) {
      const ik = isNode(item.key) ? item.key : null;
      if (ik) {
        if (ik.spaceBefore)
          lines.push("");
        addCommentBefore(ctx, lines, ik.commentBefore, false);
        if (ik.comment)
          reqNewline = true;
      }
      const iv = isNode(item.value) ? item.value : null;
      if (iv) {
        if (iv.comment)
          comment2 = iv.comment;
        if (iv.commentBefore)
          reqNewline = true;
      } else if (item.value == null && ik && ik.comment) {
        comment2 = ik.comment;
      }
    }
    if (comment2)
      reqNewline = true;
    let str2 = stringify(item, itemCtx, () => comment2 = null);
    if (i < items.length - 1)
      str2 += ",";
    if (comment2)
      str2 += lineComment(str2, itemIndent, commentString(comment2));
    if (!reqNewline && (lines.length > linesAtValue || str2.includes("\n")))
      reqNewline = true;
    lines.push(str2);
    linesAtValue = lines.length;
  }
  let str;
  const { start, end } = flowChars;
  if (lines.length === 0) {
    str = start + end;
  } else {
    if (!reqNewline) {
      const len = lines.reduce((sum, line) => sum + line.length + 2, 2);
      reqNewline = len > Collection.maxFlowStringSingleLineLength;
    }
    if (reqNewline) {
      str = start;
      for (const line of lines)
        str += line ? `
${indentStep}${indent}${line}` : "\n";
      str += `
${indent}${end}`;
    } else {
      str = `${start} ${lines.join(" ")} ${end}`;
    }
  }
  if (comment) {
    str += lineComment(str, commentString(comment), indent);
    if (onComment)
      onComment();
  }
  return str;
}
function addCommentBefore({ indent, options: { commentString } }, lines, comment, chompKeep) {
  if (comment && chompKeep)
    comment = comment.replace(/^\n+/, "");
  if (comment) {
    const ic = indentComment(commentString(comment), indent);
    lines.push(ic.trimStart());
  }
}

// node_modules/yaml/browser/dist/nodes/YAMLMap.js
function findPair(items, key) {
  const k = isScalar(key) ? key.value : key;
  for (const it of items) {
    if (isPair(it)) {
      if (it.key === key || it.key === k)
        return it;
      if (isScalar(it.key) && it.key.value === k)
        return it;
    }
  }
  return void 0;
}
var YAMLMap = class extends Collection {
  constructor(schema4) {
    super(MAP, schema4);
    this.items = [];
  }
  static get tagName() {
    return "tag:yaml.org,2002:map";
  }
  /**
   * Adds a value to the collection.
   *
   * @param overwrite - If not set `true`, using a key that is already in the
   *   collection will throw. Otherwise, overwrites the previous value.
   */
  add(pair, overwrite) {
    let _pair;
    if (isPair(pair))
      _pair = pair;
    else if (!pair || typeof pair !== "object" || !("key" in pair)) {
      _pair = new Pair(pair, pair.value);
    } else
      _pair = new Pair(pair.key, pair.value);
    const prev = findPair(this.items, _pair.key);
    const sortEntries = this.schema && this.schema.sortMapEntries;
    if (prev) {
      if (!overwrite)
        throw new Error(`Key ${_pair.key} already set`);
      if (isScalar(prev.value) && isScalarValue(_pair.value))
        prev.value.value = _pair.value;
      else
        prev.value = _pair.value;
    } else if (sortEntries) {
      const i = this.items.findIndex((item) => sortEntries(_pair, item) < 0);
      if (i === -1)
        this.items.push(_pair);
      else
        this.items.splice(i, 0, _pair);
    } else {
      this.items.push(_pair);
    }
  }
  delete(key) {
    const it = findPair(this.items, key);
    if (!it)
      return false;
    const del = this.items.splice(this.items.indexOf(it), 1);
    return del.length > 0;
  }
  get(key, keepScalar) {
    const it = findPair(this.items, key);
    const node = it && it.value;
    return !keepScalar && isScalar(node) ? node.value : node;
  }
  has(key) {
    return !!findPair(this.items, key);
  }
  set(key, value) {
    this.add(new Pair(key, value), true);
  }
  /**
   * @param ctx - Conversion context, originally set in Document#toJS()
   * @param {Class} Type - If set, forces the returned collection type
   * @returns Instance of Type, Map, or Object
   */
  toJSON(_, ctx, Type) {
    const map2 = Type ? new Type() : ctx && ctx.mapAsMap ? /* @__PURE__ */ new Map() : {};
    if (ctx && ctx.onCreate)
      ctx.onCreate(map2);
    for (const item of this.items)
      addPairToJSMap(ctx, map2, item);
    return map2;
  }
  toString(ctx, onComment, onChompKeep) {
    if (!ctx)
      return JSON.stringify(this);
    for (const item of this.items) {
      if (!isPair(item))
        throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);
    }
    if (!ctx.allNullValues && this.hasAllNullValues(false))
      ctx = Object.assign({}, ctx, { allNullValues: true });
    return stringifyCollection(this, ctx, {
      blockItemPrefix: "",
      flowChars: { start: "{", end: "}" },
      itemIndent: ctx.indent || "",
      onChompKeep,
      onComment
    });
  }
};

// node_modules/yaml/browser/dist/schema/common/map.js
function createMap(schema4, obj, ctx) {
  const { keepUndefined, replacer } = ctx;
  const map2 = new YAMLMap(schema4);
  const add = (key, value) => {
    if (typeof replacer === "function")
      value = replacer.call(obj, key, value);
    else if (Array.isArray(replacer) && !replacer.includes(key))
      return;
    if (value !== void 0 || keepUndefined)
      map2.items.push(createPair(key, value, ctx));
  };
  if (obj instanceof Map) {
    for (const [key, value] of obj)
      add(key, value);
  } else if (obj && typeof obj === "object") {
    for (const key of Object.keys(obj))
      add(key, obj[key]);
  }
  if (typeof schema4.sortMapEntries === "function") {
    map2.items.sort(schema4.sortMapEntries);
  }
  return map2;
}
var map = {
  collection: "map",
  createNode: createMap,
  default: true,
  nodeClass: YAMLMap,
  tag: "tag:yaml.org,2002:map",
  resolve(map2, onError) {
    if (!isMap(map2))
      onError("Expected a mapping for this tag");
    return map2;
  }
};

// node_modules/yaml/browser/dist/nodes/YAMLSeq.js
var YAMLSeq = class extends Collection {
  constructor(schema4) {
    super(SEQ, schema4);
    this.items = [];
  }
  static get tagName() {
    return "tag:yaml.org,2002:seq";
  }
  add(value) {
    this.items.push(value);
  }
  /**
   * Removes a value from the collection.
   *
   * `key` must contain a representation of an integer for this to succeed.
   * It may be wrapped in a `Scalar`.
   *
   * @returns `true` if the item was found and removed.
   */
  delete(key) {
    const idx = asItemIndex(key);
    if (typeof idx !== "number")
      return false;
    const del = this.items.splice(idx, 1);
    return del.length > 0;
  }
  /**
   * Returns item at `key`, or `undefined` if not found. By default unwraps
   * scalar values from their surrounding node; to disable set `keepScalar` to
   * `true` (collections are always returned intact).
   *
   * `key` must contain a representation of an integer for this to succeed.
   * It may be wrapped in a `Scalar`.
   */
  get(key, keepScalar) {
    const idx = asItemIndex(key);
    if (typeof idx !== "number")
      return void 0;
    const it = this.items[idx];
    return !keepScalar && isScalar(it) ? it.value : it;
  }
  /**
   * Checks if the collection includes a value with the key `key`.
   *
   * `key` must contain a representation of an integer for this to succeed.
   * It may be wrapped in a `Scalar`.
   */
  has(key) {
    const idx = asItemIndex(key);
    return typeof idx === "number" && idx < this.items.length;
  }
  /**
   * Sets a value in this collection. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   *
   * If `key` does not contain a representation of an integer, this will throw.
   * It may be wrapped in a `Scalar`.
   */
  set(key, value) {
    const idx = asItemIndex(key);
    if (typeof idx !== "number")
      throw new Error(`Expected a valid index, not ${key}.`);
    const prev = this.items[idx];
    if (isScalar(prev) && isScalarValue(value))
      prev.value = value;
    else
      this.items[idx] = value;
  }
  toJSON(_, ctx) {
    const seq2 = [];
    if (ctx && ctx.onCreate)
      ctx.onCreate(seq2);
    let i = 0;
    for (const item of this.items)
      seq2.push(toJS(item, String(i++), ctx));
    return seq2;
  }
  toString(ctx, onComment, onChompKeep) {
    if (!ctx)
      return JSON.stringify(this);
    return stringifyCollection(this, ctx, {
      blockItemPrefix: "- ",
      flowChars: { start: "[", end: "]" },
      itemIndent: (ctx.indent || "") + "  ",
      onChompKeep,
      onComment
    });
  }
};
function asItemIndex(key) {
  let idx = isScalar(key) ? key.value : key;
  if (idx && typeof idx === "string")
    idx = Number(idx);
  return typeof idx === "number" && Number.isInteger(idx) && idx >= 0 ? idx : null;
}

// node_modules/yaml/browser/dist/schema/common/seq.js
function createSeq(schema4, obj, ctx) {
  const { replacer } = ctx;
  const seq2 = new YAMLSeq(schema4);
  if (obj && Symbol.iterator in Object(obj)) {
    let i = 0;
    for (let it of obj) {
      if (typeof replacer === "function") {
        const key = obj instanceof Set ? it : String(i++);
        it = replacer.call(obj, key, it);
      }
      seq2.items.push(createNode(it, void 0, ctx));
    }
  }
  return seq2;
}
var seq = {
  collection: "seq",
  createNode: createSeq,
  default: true,
  nodeClass: YAMLSeq,
  tag: "tag:yaml.org,2002:seq",
  resolve(seq2, onError) {
    if (!isSeq(seq2))
      onError("Expected a sequence for this tag");
    return seq2;
  }
};

// node_modules/yaml/browser/dist/schema/common/string.js
var string = {
  identify: (value) => typeof value === "string",
  default: true,
  tag: "tag:yaml.org,2002:str",
  resolve: (str) => str,
  stringify(item, ctx, onComment, onChompKeep) {
    ctx = Object.assign({ actualString: true }, ctx);
    return stringifyString(item, ctx, onComment, onChompKeep);
  }
};

// node_modules/yaml/browser/dist/schema/common/null.js
var nullTag = {
  identify: (value) => value == null,
  createNode: () => new Scalar(null),
  default: true,
  tag: "tag:yaml.org,2002:null",
  test: /^(?:~|[Nn]ull|NULL)?$/,
  resolve: () => new Scalar(null),
  stringify: ({ source }, ctx) => source && nullTag.test.test(source) ? source : ctx.options.nullStr
};

// node_modules/yaml/browser/dist/schema/core/bool.js
var boolTag = {
  identify: (value) => typeof value === "boolean",
  default: true,
  tag: "tag:yaml.org,2002:bool",
  test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,
  resolve: (str) => new Scalar(str[0] === "t" || str[0] === "T"),
  stringify({ source, value }, ctx) {
    if (source && boolTag.test.test(source)) {
      const sv = source[0] === "t" || source[0] === "T";
      if (value === sv)
        return source;
    }
    return value ? ctx.options.trueStr : ctx.options.falseStr;
  }
};

// node_modules/yaml/browser/dist/stringify/stringifyNumber.js
function stringifyNumber({ format, minFractionDigits, tag: tag2, value }) {
  if (typeof value === "bigint")
    return String(value);
  const num = typeof value === "number" ? value : Number(value);
  if (!isFinite(num))
    return isNaN(num) ? ".nan" : num < 0 ? "-.inf" : ".inf";
  let n = JSON.stringify(value);
  if (!format && minFractionDigits && (!tag2 || tag2 === "tag:yaml.org,2002:float") && /^\d/.test(n)) {
    let i = n.indexOf(".");
    if (i < 0) {
      i = n.length;
      n += ".";
    }
    let d = minFractionDigits - (n.length - i - 1);
    while (d-- > 0)
      n += "0";
  }
  return n;
}

// node_modules/yaml/browser/dist/schema/core/float.js
var floatNaN = {
  identify: (value) => typeof value === "number",
  default: true,
  tag: "tag:yaml.org,2002:float",
  test: /^(?:[-+]?\.(?:inf|Inf|INF|nan|NaN|NAN))$/,
  resolve: (str) => str.slice(-3).toLowerCase() === "nan" ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
  stringify: stringifyNumber
};
var floatExp = {
  identify: (value) => typeof value === "number",
  default: true,
  tag: "tag:yaml.org,2002:float",
  format: "EXP",
  test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
  resolve: (str) => parseFloat(str),
  stringify(node) {
    const num = Number(node.value);
    return isFinite(num) ? num.toExponential() : stringifyNumber(node);
  }
};
var float = {
  identify: (value) => typeof value === "number",
  default: true,
  tag: "tag:yaml.org,2002:float",
  test: /^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,
  resolve(str) {
    const node = new Scalar(parseFloat(str));
    const dot = str.indexOf(".");
    if (dot !== -1 && str[str.length - 1] === "0")
      node.minFractionDigits = str.length - dot - 1;
    return node;
  },
  stringify: stringifyNumber
};

// node_modules/yaml/browser/dist/schema/core/int.js
var intIdentify = (value) => typeof value === "bigint" || Number.isInteger(value);
var intResolve = (str, offset, radix, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix);
function intStringify(node, radix, prefix) {
  const { value } = node;
  if (intIdentify(value) && value >= 0)
    return prefix + value.toString(radix);
  return stringifyNumber(node);
}
var intOct = {
  identify: (value) => intIdentify(value) && value >= 0,
  default: true,
  tag: "tag:yaml.org,2002:int",
  format: "OCT",
  test: /^0o[0-7]+$/,
  resolve: (str, _onError, opt) => intResolve(str, 2, 8, opt),
  stringify: (node) => intStringify(node, 8, "0o")
};
var int = {
  identify: intIdentify,
  default: true,
  tag: "tag:yaml.org,2002:int",
  test: /^[-+]?[0-9]+$/,
  resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),
  stringify: stringifyNumber
};
var intHex = {
  identify: (value) => intIdentify(value) && value >= 0,
  default: true,
  tag: "tag:yaml.org,2002:int",
  format: "HEX",
  test: /^0x[0-9a-fA-F]+$/,
  resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),
  stringify: (node) => intStringify(node, 16, "0x")
};

// node_modules/yaml/browser/dist/schema/core/schema.js
var schema = [
  map,
  seq,
  string,
  nullTag,
  boolTag,
  intOct,
  int,
  intHex,
  floatNaN,
  floatExp,
  float
];

// node_modules/yaml/browser/dist/schema/json/schema.js
function intIdentify2(value) {
  return typeof value === "bigint" || Number.isInteger(value);
}
var stringifyJSON = ({ value }) => JSON.stringify(value);
var jsonScalars = [
  {
    identify: (value) => typeof value === "string",
    default: true,
    tag: "tag:yaml.org,2002:str",
    resolve: (str) => str,
    stringify: stringifyJSON
  },
  {
    identify: (value) => value == null,
    createNode: () => new Scalar(null),
    default: true,
    tag: "tag:yaml.org,2002:null",
    test: /^null$/,
    resolve: () => null,
    stringify: stringifyJSON
  },
  {
    identify: (value) => typeof value === "boolean",
    default: true,
    tag: "tag:yaml.org,2002:bool",
    test: /^true|false$/,
    resolve: (str) => str === "true",
    stringify: stringifyJSON
  },
  {
    identify: intIdentify2,
    default: true,
    tag: "tag:yaml.org,2002:int",
    test: /^-?(?:0|[1-9][0-9]*)$/,
    resolve: (str, _onError, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),
    stringify: ({ value }) => intIdentify2(value) ? value.toString() : JSON.stringify(value)
  },
  {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
    resolve: (str) => parseFloat(str),
    stringify: stringifyJSON
  }
];
var jsonError = {
  default: true,
  tag: "",
  test: /^/,
  resolve(str, onError) {
    onError(`Unresolved plain scalar ${JSON.stringify(str)}`);
    return str;
  }
};
var schema2 = [map, seq].concat(jsonScalars, jsonError);

// node_modules/yaml/browser/dist/schema/yaml-1.1/binary.js
var binary = {
  identify: (value) => value instanceof Uint8Array,
  default: false,
  tag: "tag:yaml.org,2002:binary",
  /**
   * Returns a Buffer in node and an Uint8Array in browsers
   *
   * To use the resulting buffer as an image, you'll want to do something like:
   *
   *   const blob = new Blob([buffer], { type: 'image/jpeg' })
   *   document.querySelector('#photo').src = URL.createObjectURL(blob)
   */
  resolve(src, onError) {
    if (typeof Buffer === "function") {
      return Buffer.from(src, "base64");
    } else if (typeof atob === "function") {
      const str = atob(src.replace(/[\n\r]/g, ""));
      const buffer = new Uint8Array(str.length);
      for (let i = 0; i < str.length; ++i)
        buffer[i] = str.charCodeAt(i);
      return buffer;
    } else {
      onError("This environment does not support reading binary tags; either Buffer or atob is required");
      return src;
    }
  },
  stringify({ comment, type, value }, ctx, onComment, onChompKeep) {
    const buf = value;
    let str;
    if (typeof Buffer === "function") {
      str = buf instanceof Buffer ? buf.toString("base64") : Buffer.from(buf.buffer).toString("base64");
    } else if (typeof btoa === "function") {
      let s = "";
      for (let i = 0; i < buf.length; ++i)
        s += String.fromCharCode(buf[i]);
      str = btoa(s);
    } else {
      throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");
    }
    if (!type)
      type = Scalar.BLOCK_LITERAL;
    if (type !== Scalar.QUOTE_DOUBLE) {
      const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);
      const n = Math.ceil(str.length / lineWidth);
      const lines = new Array(n);
      for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {
        lines[i] = str.substr(o, lineWidth);
      }
      str = lines.join(type === Scalar.BLOCK_LITERAL ? "\n" : " ");
    }
    return stringifyString({ comment, type, value: str }, ctx, onComment, onChompKeep);
  }
};

// node_modules/yaml/browser/dist/schema/yaml-1.1/pairs.js
function resolvePairs(seq2, onError) {
  if (isSeq(seq2)) {
    for (let i = 0; i < seq2.items.length; ++i) {
      let item = seq2.items[i];
      if (isPair(item))
        continue;
      else if (isMap(item)) {
        if (item.items.length > 1)
          onError("Each pair must have its own sequence indicator");
        const pair = item.items[0] || new Pair(new Scalar(null));
        if (item.commentBefore)
          pair.key.commentBefore = pair.key.commentBefore ? `${item.commentBefore}
${pair.key.commentBefore}` : item.commentBefore;
        if (item.comment) {
          const cn = pair.value || pair.key;
          cn.comment = cn.comment ? `${item.comment}
${cn.comment}` : item.comment;
        }
        item = pair;
      }
      seq2.items[i] = isPair(item) ? item : new Pair(item);
    }
  } else
    onError("Expected a sequence for this tag");
  return seq2;
}
function createPairs(schema4, iterable, ctx) {
  const { replacer } = ctx;
  const pairs2 = new YAMLSeq(schema4);
  pairs2.tag = "tag:yaml.org,2002:pairs";
  let i = 0;
  if (iterable && Symbol.iterator in Object(iterable))
    for (let it of iterable) {
      if (typeof replacer === "function")
        it = replacer.call(iterable, String(i++), it);
      let key, value;
      if (Array.isArray(it)) {
        if (it.length === 2) {
          key = it[0];
          value = it[1];
        } else
          throw new TypeError(`Expected [key, value] tuple: ${it}`);
      } else if (it && it instanceof Object) {
        const keys = Object.keys(it);
        if (keys.length === 1) {
          key = keys[0];
          value = it[key];
        } else
          throw new TypeError(`Expected { key: value } tuple: ${it}`);
      } else {
        key = it;
      }
      pairs2.items.push(createPair(key, value, ctx));
    }
  return pairs2;
}
var pairs = {
  collection: "seq",
  default: false,
  tag: "tag:yaml.org,2002:pairs",
  resolve: resolvePairs,
  createNode: createPairs
};

// node_modules/yaml/browser/dist/schema/yaml-1.1/omap.js
var YAMLOMap = class extends YAMLSeq {
  constructor() {
    super();
    this.add = YAMLMap.prototype.add.bind(this);
    this.delete = YAMLMap.prototype.delete.bind(this);
    this.get = YAMLMap.prototype.get.bind(this);
    this.has = YAMLMap.prototype.has.bind(this);
    this.set = YAMLMap.prototype.set.bind(this);
    this.tag = YAMLOMap.tag;
  }
  /**
   * If `ctx` is given, the return type is actually `Map<unknown, unknown>`,
   * but TypeScript won't allow widening the signature of a child method.
   */
  toJSON(_, ctx) {
    if (!ctx)
      return super.toJSON(_);
    const map2 = /* @__PURE__ */ new Map();
    if (ctx && ctx.onCreate)
      ctx.onCreate(map2);
    for (const pair of this.items) {
      let key, value;
      if (isPair(pair)) {
        key = toJS(pair.key, "", ctx);
        value = toJS(pair.value, key, ctx);
      } else {
        key = toJS(pair, "", ctx);
      }
      if (map2.has(key))
        throw new Error("Ordered maps must not include duplicate keys");
      map2.set(key, value);
    }
    return map2;
  }
};
YAMLOMap.tag = "tag:yaml.org,2002:omap";
var omap = {
  collection: "seq",
  identify: (value) => value instanceof Map,
  nodeClass: YAMLOMap,
  default: false,
  tag: "tag:yaml.org,2002:omap",
  resolve(seq2, onError) {
    const pairs2 = resolvePairs(seq2, onError);
    const seenKeys = [];
    for (const { key } of pairs2.items) {
      if (isScalar(key)) {
        if (seenKeys.includes(key.value)) {
          onError(`Ordered maps must not include duplicate keys: ${key.value}`);
        } else {
          seenKeys.push(key.value);
        }
      }
    }
    return Object.assign(new YAMLOMap(), pairs2);
  },
  createNode(schema4, iterable, ctx) {
    const pairs2 = createPairs(schema4, iterable, ctx);
    const omap2 = new YAMLOMap();
    omap2.items = pairs2.items;
    return omap2;
  }
};

// node_modules/yaml/browser/dist/schema/yaml-1.1/bool.js
function boolStringify({ value, source }, ctx) {
  const boolObj = value ? trueTag : falseTag;
  if (source && boolObj.test.test(source))
    return source;
  return value ? ctx.options.trueStr : ctx.options.falseStr;
}
var trueTag = {
  identify: (value) => value === true,
  default: true,
  tag: "tag:yaml.org,2002:bool",
  test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,
  resolve: () => new Scalar(true),
  stringify: boolStringify
};
var falseTag = {
  identify: (value) => value === false,
  default: true,
  tag: "tag:yaml.org,2002:bool",
  test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,
  resolve: () => new Scalar(false),
  stringify: boolStringify
};

// node_modules/yaml/browser/dist/schema/yaml-1.1/float.js
var floatNaN2 = {
  identify: (value) => typeof value === "number",
  default: true,
  tag: "tag:yaml.org,2002:float",
  test: /^[-+]?\.(?:inf|Inf|INF|nan|NaN|NAN)$/,
  resolve: (str) => str.slice(-3).toLowerCase() === "nan" ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
  stringify: stringifyNumber
};
var floatExp2 = {
  identify: (value) => typeof value === "number",
  default: true,
  tag: "tag:yaml.org,2002:float",
  format: "EXP",
  test: /^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,
  resolve: (str) => parseFloat(str.replace(/_/g, "")),
  stringify(node) {
    const num = Number(node.value);
    return isFinite(num) ? num.toExponential() : stringifyNumber(node);
  }
};
var float2 = {
  identify: (value) => typeof value === "number",
  default: true,
  tag: "tag:yaml.org,2002:float",
  test: /^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,
  resolve(str) {
    const node = new Scalar(parseFloat(str.replace(/_/g, "")));
    const dot = str.indexOf(".");
    if (dot !== -1) {
      const f = str.substring(dot + 1).replace(/_/g, "");
      if (f[f.length - 1] === "0")
        node.minFractionDigits = f.length;
    }
    return node;
  },
  stringify: stringifyNumber
};

// node_modules/yaml/browser/dist/schema/yaml-1.1/int.js
var intIdentify3 = (value) => typeof value === "bigint" || Number.isInteger(value);
function intResolve2(str, offset, radix, { intAsBigInt }) {
  const sign = str[0];
  if (sign === "-" || sign === "+")
    offset += 1;
  str = str.substring(offset).replace(/_/g, "");
  if (intAsBigInt) {
    switch (radix) {
      case 2:
        str = `0b${str}`;
        break;
      case 8:
        str = `0o${str}`;
        break;
      case 16:
        str = `0x${str}`;
        break;
    }
    const n2 = BigInt(str);
    return sign === "-" ? BigInt(-1) * n2 : n2;
  }
  const n = parseInt(str, radix);
  return sign === "-" ? -1 * n : n;
}
function intStringify2(node, radix, prefix) {
  const { value } = node;
  if (intIdentify3(value)) {
    const str = value.toString(radix);
    return value < 0 ? "-" + prefix + str.substr(1) : prefix + str;
  }
  return stringifyNumber(node);
}
var intBin = {
  identify: intIdentify3,
  default: true,
  tag: "tag:yaml.org,2002:int",
  format: "BIN",
  test: /^[-+]?0b[0-1_]+$/,
  resolve: (str, _onError, opt) => intResolve2(str, 2, 2, opt),
  stringify: (node) => intStringify2(node, 2, "0b")
};
var intOct2 = {
  identify: intIdentify3,
  default: true,
  tag: "tag:yaml.org,2002:int",
  format: "OCT",
  test: /^[-+]?0[0-7_]+$/,
  resolve: (str, _onError, opt) => intResolve2(str, 1, 8, opt),
  stringify: (node) => intStringify2(node, 8, "0")
};
var int2 = {
  identify: intIdentify3,
  default: true,
  tag: "tag:yaml.org,2002:int",
  test: /^[-+]?[0-9][0-9_]*$/,
  resolve: (str, _onError, opt) => intResolve2(str, 0, 10, opt),
  stringify: stringifyNumber
};
var intHex2 = {
  identify: intIdentify3,
  default: true,
  tag: "tag:yaml.org,2002:int",
  format: "HEX",
  test: /^[-+]?0x[0-9a-fA-F_]+$/,
  resolve: (str, _onError, opt) => intResolve2(str, 2, 16, opt),
  stringify: (node) => intStringify2(node, 16, "0x")
};

// node_modules/yaml/browser/dist/schema/yaml-1.1/set.js
var YAMLSet = class extends YAMLMap {
  constructor(schema4) {
    super(schema4);
    this.tag = YAMLSet.tag;
  }
  add(key) {
    let pair;
    if (isPair(key))
      pair = key;
    else if (typeof key === "object" && "key" in key && "value" in key && key.value === null)
      pair = new Pair(key.key, null);
    else
      pair = new Pair(key, null);
    const prev = findPair(this.items, pair.key);
    if (!prev)
      this.items.push(pair);
  }
  get(key, keepPair) {
    const pair = findPair(this.items, key);
    return !keepPair && isPair(pair) ? isScalar(pair.key) ? pair.key.value : pair.key : pair;
  }
  set(key, value) {
    if (typeof value !== "boolean")
      throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);
    const prev = findPair(this.items, key);
    if (prev && !value) {
      this.items.splice(this.items.indexOf(prev), 1);
    } else if (!prev && value) {
      this.items.push(new Pair(key));
    }
  }
  toJSON(_, ctx) {
    return super.toJSON(_, ctx, Set);
  }
  toString(ctx, onComment, onChompKeep) {
    if (!ctx)
      return JSON.stringify(this);
    if (this.hasAllNullValues(true))
      return super.toString(Object.assign({}, ctx, { allNullValues: true }), onComment, onChompKeep);
    else
      throw new Error("Set items must all have null values");
  }
};
YAMLSet.tag = "tag:yaml.org,2002:set";
var set = {
  collection: "map",
  identify: (value) => value instanceof Set,
  nodeClass: YAMLSet,
  default: false,
  tag: "tag:yaml.org,2002:set",
  resolve(map2, onError) {
    if (isMap(map2)) {
      if (map2.hasAllNullValues(true))
        return Object.assign(new YAMLSet(), map2);
      else
        onError("Set items must all have null values");
    } else
      onError("Expected a mapping for this tag");
    return map2;
  },
  createNode(schema4, iterable, ctx) {
    const { replacer } = ctx;
    const set2 = new YAMLSet(schema4);
    if (iterable && Symbol.iterator in Object(iterable))
      for (let value of iterable) {
        if (typeof replacer === "function")
          value = replacer.call(iterable, value, value);
        set2.items.push(createPair(value, null, ctx));
      }
    return set2;
  }
};

// node_modules/yaml/browser/dist/schema/yaml-1.1/timestamp.js
function parseSexagesimal(str, asBigInt) {
  const sign = str[0];
  const parts = sign === "-" || sign === "+" ? str.substring(1) : str;
  const num = (n) => asBigInt ? BigInt(n) : Number(n);
  const res = parts.replace(/_/g, "").split(":").reduce((res2, p) => res2 * num(60) + num(p), num(0));
  return sign === "-" ? num(-1) * res : res;
}
function stringifySexagesimal(node) {
  let { value } = node;
  let num = (n) => n;
  if (typeof value === "bigint")
    num = (n) => BigInt(n);
  else if (isNaN(value) || !isFinite(value))
    return stringifyNumber(node);
  let sign = "";
  if (value < 0) {
    sign = "-";
    value *= num(-1);
  }
  const _60 = num(60);
  const parts = [value % _60];
  if (value < 60) {
    parts.unshift(0);
  } else {
    value = (value - parts[0]) / _60;
    parts.unshift(value % _60);
    if (value >= 60) {
      value = (value - parts[0]) / _60;
      parts.unshift(value);
    }
  }
  return sign + parts.map((n) => n < 10 ? "0" + String(n) : String(n)).join(":").replace(/000000\d*$/, "");
}
var intTime = {
  identify: (value) => typeof value === "bigint" || Number.isInteger(value),
  default: true,
  tag: "tag:yaml.org,2002:int",
  format: "TIME",
  test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,
  resolve: (str, _onError, { intAsBigInt }) => parseSexagesimal(str, intAsBigInt),
  stringify: stringifySexagesimal
};
var floatTime = {
  identify: (value) => typeof value === "number",
  default: true,
  tag: "tag:yaml.org,2002:float",
  format: "TIME",
  test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,
  resolve: (str) => parseSexagesimal(str, false),
  stringify: stringifySexagesimal
};
var timestamp = {
  identify: (value) => value instanceof Date,
  default: true,
  tag: "tag:yaml.org,2002:timestamp",
  // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part
  // may be omitted altogether, resulting in a date format. In such a case, the time part is
  // assumed to be 00:00:00Z (start of day, UTC).
  test: RegExp("^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?$"),
  resolve(str) {
    const match = str.match(timestamp.test);
    if (!match)
      throw new Error("!!timestamp expects a date, starting with yyyy-mm-dd");
    const [, year, month, day, hour, minute, second] = match.map(Number);
    const millisec = match[7] ? Number((match[7] + "00").substr(1, 3)) : 0;
    let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);
    const tz = match[8];
    if (tz && tz !== "Z") {
      let d = parseSexagesimal(tz, false);
      if (Math.abs(d) < 30)
        d *= 60;
      date -= 6e4 * d;
    }
    return new Date(date);
  },
  stringify: ({ value }) => value.toISOString().replace(/((T00:00)?:00)?\.000Z$/, "")
};

// node_modules/yaml/browser/dist/schema/yaml-1.1/schema.js
var schema3 = [
  map,
  seq,
  string,
  nullTag,
  trueTag,
  falseTag,
  intBin,
  intOct2,
  int2,
  intHex2,
  floatNaN2,
  floatExp2,
  float2,
  binary,
  omap,
  pairs,
  set,
  intTime,
  floatTime,
  timestamp
];

// node_modules/yaml/browser/dist/schema/tags.js
var schemas = /* @__PURE__ */ new Map([
  ["core", schema],
  ["failsafe", [map, seq, string]],
  ["json", schema2],
  ["yaml11", schema3],
  ["yaml-1.1", schema3]
]);
var tagsByName = {
  binary,
  bool: boolTag,
  float,
  floatExp,
  floatNaN,
  floatTime,
  int,
  intHex,
  intOct,
  intTime,
  map,
  null: nullTag,
  omap,
  pairs,
  seq,
  set,
  timestamp
};
var coreKnownTags = {
  "tag:yaml.org,2002:binary": binary,
  "tag:yaml.org,2002:omap": omap,
  "tag:yaml.org,2002:pairs": pairs,
  "tag:yaml.org,2002:set": set,
  "tag:yaml.org,2002:timestamp": timestamp
};
function getTags(customTags, schemaName) {
  let tags = schemas.get(schemaName);
  if (!tags) {
    if (Array.isArray(customTags))
      tags = [];
    else {
      const keys = Array.from(schemas.keys()).filter((key) => key !== "yaml11").map((key) => JSON.stringify(key)).join(", ");
      throw new Error(`Unknown schema "${schemaName}"; use one of ${keys} or define customTags array`);
    }
  }
  if (Array.isArray(customTags)) {
    for (const tag2 of customTags)
      tags = tags.concat(tag2);
  } else if (typeof customTags === "function") {
    tags = customTags(tags.slice());
  }
  return tags.map((tag2) => {
    if (typeof tag2 !== "string")
      return tag2;
    const tagObj = tagsByName[tag2];
    if (tagObj)
      return tagObj;
    const keys = Object.keys(tagsByName).map((key) => JSON.stringify(key)).join(", ");
    throw new Error(`Unknown custom tag "${tag2}"; use one of ${keys}`);
  });
}

// node_modules/yaml/browser/dist/schema/Schema.js
var sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;
var Schema = class {
  constructor({ compat, customTags, merge, resolveKnownTags, schema: schema4, sortMapEntries, toStringDefaults }) {
    this.compat = Array.isArray(compat) ? getTags(compat, "compat") : compat ? getTags(null, compat) : null;
    this.merge = !!merge;
    this.name = typeof schema4 === "string" && schema4 || "core";
    this.knownTags = resolveKnownTags ? coreKnownTags : {};
    this.tags = getTags(customTags, this.name);
    this.toStringOptions = toStringDefaults || null;
    Object.defineProperty(this, MAP, { value: map });
    Object.defineProperty(this, SCALAR, { value: string });
    Object.defineProperty(this, SEQ, { value: seq });
    this.sortMapEntries = sortMapEntries === true ? sortMapEntriesByKey : sortMapEntries || null;
  }
  clone() {
    const copy = Object.create(Schema.prototype, Object.getOwnPropertyDescriptors(this));
    copy.tags = this.tags.slice();
    return copy;
  }
};

// node_modules/yaml/browser/dist/stringify/stringifyDocument.js
function stringifyDocument(doc, options) {
  const lines = [];
  let hasDirectives = options.directives === true;
  if (options.directives !== false && doc.directives) {
    const dir = doc.directives.toString(doc);
    if (dir) {
      lines.push(dir);
      hasDirectives = true;
    } else if (doc.directives.marker)
      hasDirectives = true;
  }
  if (hasDirectives)
    lines.push("---");
  const ctx = createStringifyContext(doc, options);
  const { commentString } = ctx.options;
  if (doc.commentBefore) {
    if (lines.length !== 1)
      lines.unshift("");
    const cs = commentString(doc.commentBefore);
    lines.unshift(indentComment(cs, ""));
  }
  let chompKeep = false;
  let contentComment = null;
  if (doc.contents) {
    if (isNode(doc.contents)) {
      if (doc.contents.spaceBefore && hasDirectives)
        lines.push("");
      if (doc.contents.commentBefore) {
        const cs = commentString(doc.contents.commentBefore);
        lines.push(indentComment(cs, ""));
      }
      ctx.forceBlockIndent = !!doc.comment;
      contentComment = doc.contents.comment;
    }
    const onChompKeep = contentComment ? void 0 : () => chompKeep = true;
    let body = stringify(doc.contents, ctx, () => contentComment = null, onChompKeep);
    if (contentComment)
      body += lineComment(body, "", commentString(contentComment));
    if ((body[0] === "|" || body[0] === ">") && lines[lines.length - 1] === "---") {
      lines[lines.length - 1] = `--- ${body}`;
    } else
      lines.push(body);
  } else {
    lines.push(stringify(doc.contents, ctx));
  }
  let dc = doc.comment;
  if (dc && chompKeep)
    dc = dc.replace(/^\n+/, "");
  if (dc) {
    if ((!chompKeep || contentComment) && lines[lines.length - 1] !== "")
      lines.push("");
    lines.push(indentComment(commentString(dc), ""));
  }
  return lines.join("\n") + "\n";
}

// node_modules/yaml/browser/dist/doc/applyReviver.js
function applyReviver(reviver, obj, key, val) {
  if (val && typeof val === "object") {
    if (Array.isArray(val)) {
      for (let i = 0, len = val.length; i < len; ++i) {
        const v0 = val[i];
        const v1 = applyReviver(reviver, val, String(i), v0);
        if (v1 === void 0)
          delete val[i];
        else if (v1 !== v0)
          val[i] = v1;
      }
    } else if (val instanceof Map) {
      for (const k of Array.from(val.keys())) {
        const v0 = val.get(k);
        const v1 = applyReviver(reviver, val, k, v0);
        if (v1 === void 0)
          val.delete(k);
        else if (v1 !== v0)
          val.set(k, v1);
      }
    } else if (val instanceof Set) {
      for (const v0 of Array.from(val)) {
        const v1 = applyReviver(reviver, val, v0, v0);
        if (v1 === void 0)
          val.delete(v0);
        else if (v1 !== v0) {
          val.delete(v0);
          val.add(v1);
        }
      }
    } else {
      for (const [k, v0] of Object.entries(val)) {
        const v1 = applyReviver(reviver, val, k, v0);
        if (v1 === void 0)
          delete val[k];
        else if (v1 !== v0)
          val[k] = v1;
      }
    }
  }
  return reviver.call(obj, key, val);
}

// node_modules/yaml/browser/dist/doc/Document.js
var Document = class {
  constructor(value, replacer, options) {
    this.commentBefore = null;
    this.comment = null;
    this.errors = [];
    this.warnings = [];
    Object.defineProperty(this, NODE_TYPE, { value: DOC });
    let _replacer = null;
    if (typeof replacer === "function" || Array.isArray(replacer)) {
      _replacer = replacer;
    } else if (options === void 0 && replacer) {
      options = replacer;
      replacer = void 0;
    }
    const opt = Object.assign({}, defaultOptions, options);
    this.options = opt;
    let { version } = opt;
    if (options === null || options === void 0 ? void 0 : options.directives) {
      this.directives = options.directives.atDocument();
      if (this.directives.yaml.explicit)
        version = this.directives.yaml.version;
    } else
      this.directives = new Directives({ version });
    this.setSchema(version, options);
    if (value === void 0)
      this.contents = null;
    else {
      this.contents = this.createNode(value, _replacer, options);
    }
  }
  /**
   * Create a deep copy of this Document and its contents.
   *
   * Custom Node values that inherit from `Object` still refer to their original instances.
   */
  clone() {
    const copy = Object.create(Document.prototype, {
      [NODE_TYPE]: { value: DOC }
    });
    copy.commentBefore = this.commentBefore;
    copy.comment = this.comment;
    copy.errors = this.errors.slice();
    copy.warnings = this.warnings.slice();
    copy.options = Object.assign({}, this.options);
    if (this.directives)
      copy.directives = this.directives.clone();
    copy.schema = this.schema.clone();
    copy.contents = isNode(this.contents) ? this.contents.clone(copy.schema) : this.contents;
    if (this.range)
      copy.range = this.range.slice();
    return copy;
  }
  /** Adds a value to the document. */
  add(value) {
    if (assertCollection(this.contents))
      this.contents.add(value);
  }
  /** Adds a value to the document. */
  addIn(path, value) {
    if (assertCollection(this.contents))
      this.contents.addIn(path, value);
  }
  /**
   * Create a new `Alias` node, ensuring that the target `node` has the required anchor.
   *
   * If `node` already has an anchor, `name` is ignored.
   * Otherwise, the `node.anchor` value will be set to `name`,
   * or if an anchor with that name is already present in the document,
   * `name` will be used as a prefix for a new unique anchor.
   * If `name` is undefined, the generated anchor will use 'a' as a prefix.
   */
  createAlias(node, name) {
    if (!node.anchor) {
      const prev = anchorNames(this);
      node.anchor = !name || prev.has(name) ? findNewAnchor(name || "a", prev) : name;
    }
    return new Alias(node.anchor);
  }
  createNode(value, replacer, options) {
    let _replacer = void 0;
    if (typeof replacer === "function") {
      value = replacer.call({ "": value }, "", value);
      _replacer = replacer;
    } else if (Array.isArray(replacer)) {
      const keyToStr = (v) => typeof v === "number" || v instanceof String || v instanceof Number;
      const asStr = replacer.filter(keyToStr).map(String);
      if (asStr.length > 0)
        replacer = replacer.concat(asStr);
      _replacer = replacer;
    } else if (options === void 0 && replacer) {
      options = replacer;
      replacer = void 0;
    }
    const { aliasDuplicateObjects, anchorPrefix, flow, keepUndefined, onTagObj, tag: tag2 } = options || {};
    const { onAnchor, setAnchors, sourceObjects } = createNodeAnchors(this, anchorPrefix || "a");
    const ctx = {
      aliasDuplicateObjects: aliasDuplicateObjects !== null && aliasDuplicateObjects !== void 0 ? aliasDuplicateObjects : true,
      keepUndefined: keepUndefined !== null && keepUndefined !== void 0 ? keepUndefined : false,
      onAnchor,
      onTagObj,
      replacer: _replacer,
      schema: this.schema,
      sourceObjects
    };
    const node = createNode(value, tag2, ctx);
    if (flow && isCollection(node))
      node.flow = true;
    setAnchors();
    return node;
  }
  /**
   * Convert a key and a value into a `Pair` using the current schema,
   * recursively wrapping all values as `Scalar` or `Collection` nodes.
   */
  createPair(key, value, options = {}) {
    const k = this.createNode(key, null, options);
    const v = this.createNode(value, null, options);
    return new Pair(k, v);
  }
  /**
   * Removes a value from the document.
   * @returns `true` if the item was found and removed.
   */
  delete(key) {
    return assertCollection(this.contents) ? this.contents.delete(key) : false;
  }
  /**
   * Removes a value from the document.
   * @returns `true` if the item was found and removed.
   */
  deleteIn(path) {
    if (isEmptyPath(path)) {
      if (this.contents == null)
        return false;
      this.contents = null;
      return true;
    }
    return assertCollection(this.contents) ? this.contents.deleteIn(path) : false;
  }
  /**
   * Returns item at `key`, or `undefined` if not found. By default unwraps
   * scalar values from their surrounding node; to disable set `keepScalar` to
   * `true` (collections are always returned intact).
   */
  get(key, keepScalar) {
    return isCollection(this.contents) ? this.contents.get(key, keepScalar) : void 0;
  }
  /**
   * Returns item at `path`, or `undefined` if not found. By default unwraps
   * scalar values from their surrounding node; to disable set `keepScalar` to
   * `true` (collections are always returned intact).
   */
  getIn(path, keepScalar) {
    if (isEmptyPath(path))
      return !keepScalar && isScalar(this.contents) ? this.contents.value : this.contents;
    return isCollection(this.contents) ? this.contents.getIn(path, keepScalar) : void 0;
  }
  /**
   * Checks if the document includes a value with the key `key`.
   */
  has(key) {
    return isCollection(this.contents) ? this.contents.has(key) : false;
  }
  /**
   * Checks if the document includes a value at `path`.
   */
  hasIn(path) {
    if (isEmptyPath(path))
      return this.contents !== void 0;
    return isCollection(this.contents) ? this.contents.hasIn(path) : false;
  }
  /**
   * Sets a value in this document. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   */
  set(key, value) {
    if (this.contents == null) {
      this.contents = collectionFromPath(this.schema, [key], value);
    } else if (assertCollection(this.contents)) {
      this.contents.set(key, value);
    }
  }
  /**
   * Sets a value in this document. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   */
  setIn(path, value) {
    if (isEmptyPath(path))
      this.contents = value;
    else if (this.contents == null) {
      this.contents = collectionFromPath(this.schema, Array.from(path), value);
    } else if (assertCollection(this.contents)) {
      this.contents.setIn(path, value);
    }
  }
  /**
   * Change the YAML version and schema used by the document.
   * A `null` version disables support for directives, explicit tags, anchors, and aliases.
   * It also requires the `schema` option to be given as a `Schema` instance value.
   *
   * Overrides all previously set schema options.
   */
  setSchema(version, options = {}) {
    if (typeof version === "number")
      version = String(version);
    let opt;
    switch (version) {
      case "1.1":
        if (this.directives)
          this.directives.yaml.version = "1.1";
        else
          this.directives = new Directives({ version: "1.1" });
        opt = { merge: true, resolveKnownTags: false, schema: "yaml-1.1" };
        break;
      case "1.2":
        if (this.directives)
          this.directives.yaml.version = "1.2";
        else
          this.directives = new Directives({ version: "1.2" });
        opt = { merge: false, resolveKnownTags: true, schema: "core" };
        break;
      case null:
        if (this.directives)
          delete this.directives;
        opt = null;
        break;
      default: {
        const sv = JSON.stringify(version);
        throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${sv}`);
      }
    }
    if (options.schema instanceof Object)
      this.schema = options.schema;
    else if (opt)
      this.schema = new Schema(Object.assign(opt, options));
    else
      throw new Error(`With a null YAML version, the { schema: Schema } option is required`);
  }
  // json & jsonArg are only used from toJSON()
  toJS({ json, jsonArg, mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {
    const ctx = {
      anchors: /* @__PURE__ */ new Map(),
      doc: this,
      keep: !json,
      mapAsMap: mapAsMap === true,
      mapKeyWarned: false,
      maxAliasCount: typeof maxAliasCount === "number" ? maxAliasCount : 100,
      stringify
    };
    const res = toJS(this.contents, jsonArg || "", ctx);
    if (typeof onAnchor === "function")
      for (const { count, res: res2 } of ctx.anchors.values())
        onAnchor(res2, count);
    return typeof reviver === "function" ? applyReviver(reviver, { "": res }, "", res) : res;
  }
  /**
   * A JSON representation of the document `contents`.
   *
   * @param jsonArg Used by `JSON.stringify` to indicate the array index or
   *   property name.
   */
  toJSON(jsonArg, onAnchor) {
    return this.toJS({ json: true, jsonArg, mapAsMap: false, onAnchor });
  }
  /** A YAML representation of the document. */
  toString(options = {}) {
    if (this.errors.length > 0)
      throw new Error("Document with errors cannot be stringified");
    if ("indent" in options && (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {
      const s = JSON.stringify(options.indent);
      throw new Error(`"indent" option must be a positive integer, not ${s}`);
    }
    return stringifyDocument(this, options);
  }
};
function assertCollection(contents) {
  if (isCollection(contents))
    return true;
  throw new Error("Expected a YAML collection as document contents");
}

// node_modules/yaml/browser/dist/errors.js
var YAMLError = class extends Error {
  constructor(name, pos, code, message) {
    super();
    this.name = name;
    this.code = code;
    this.message = message;
    this.pos = pos;
  }
};
var YAMLParseError = class extends YAMLError {
  constructor(pos, code, message) {
    super("YAMLParseError", pos, code, message);
  }
};
var YAMLWarning = class extends YAMLError {
  constructor(pos, code, message) {
    super("YAMLWarning", pos, code, message);
  }
};
var prettifyError = (src, lc) => (error) => {
  if (error.pos[0] === -1)
    return;
  error.linePos = error.pos.map((pos) => lc.linePos(pos));
  const { line, col } = error.linePos[0];
  error.message += ` at line ${line}, column ${col}`;
  let ci = col - 1;
  let lineStr = src.substring(lc.lineStarts[line - 1], lc.lineStarts[line]).replace(/[\n\r]+$/, "");
  if (ci >= 60 && lineStr.length > 80) {
    const trimStart = Math.min(ci - 39, lineStr.length - 79);
    lineStr = "\u2026" + lineStr.substring(trimStart);
    ci -= trimStart - 1;
  }
  if (lineStr.length > 80)
    lineStr = lineStr.substring(0, 79) + "\u2026";
  if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {
    let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);
    if (prev.length > 80)
      prev = prev.substring(0, 79) + "\u2026\n";
    lineStr = prev + lineStr;
  }
  if (/[^ ]/.test(lineStr)) {
    let count = 1;
    const end = error.linePos[1];
    if (end && end.line === line && end.col > col) {
      count = Math.min(end.col - col, 80 - ci);
    }
    const pointer = " ".repeat(ci) + "^".repeat(count);
    error.message += `:

${lineStr}
${pointer}
`;
  }
};

// node_modules/yaml/browser/dist/compose/resolve-props.js
function resolveProps(tokens, { flow, indicator, next, offset, onError, startOnNewline }) {
  let spaceBefore = false;
  let atNewline = startOnNewline;
  let hasSpace = startOnNewline;
  let comment = "";
  let commentSep = "";
  let hasNewline = false;
  let reqSpace = false;
  let anchor = null;
  let tag2 = null;
  let comma = null;
  let found = null;
  let start = null;
  for (const token of tokens) {
    if (reqSpace) {
      if (token.type !== "space" && token.type !== "newline" && token.type !== "comma")
        onError(token.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space");
      reqSpace = false;
    }
    switch (token.type) {
      case "space":
        if (!flow && atNewline && indicator !== "doc-start" && token.source[0] === "	")
          onError(token, "TAB_AS_INDENT", "Tabs are not allowed as indentation");
        hasSpace = true;
        break;
      case "comment": {
        if (!hasSpace)
          onError(token, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
        const cb = token.source.substring(1) || " ";
        if (!comment)
          comment = cb;
        else
          comment += commentSep + cb;
        commentSep = "";
        atNewline = false;
        break;
      }
      case "newline":
        if (atNewline) {
          if (comment)
            comment += token.source;
          else
            spaceBefore = true;
        } else
          commentSep += token.source;
        atNewline = true;
        hasNewline = true;
        hasSpace = true;
        break;
      case "anchor":
        if (anchor)
          onError(token, "MULTIPLE_ANCHORS", "A node can have at most one anchor");
        anchor = token;
        if (start === null)
          start = token.offset;
        atNewline = false;
        hasSpace = false;
        reqSpace = true;
        break;
      case "tag": {
        if (tag2)
          onError(token, "MULTIPLE_TAGS", "A node can have at most one tag");
        tag2 = token;
        if (start === null)
          start = token.offset;
        atNewline = false;
        hasSpace = false;
        reqSpace = true;
        break;
      }
      case indicator:
        if (anchor || tag2)
          onError(token, "BAD_PROP_ORDER", `Anchors and tags must be after the ${token.source} indicator`);
        if (found)
          onError(token, "UNEXPECTED_TOKEN", `Unexpected ${token.source} in ${flow || "collection"}`);
        found = token;
        atNewline = false;
        hasSpace = false;
        break;
      case "comma":
        if (flow) {
          if (comma)
            onError(token, "UNEXPECTED_TOKEN", `Unexpected , in ${flow}`);
          comma = token;
          atNewline = false;
          hasSpace = false;
          break;
        }
      default:
        onError(token, "UNEXPECTED_TOKEN", `Unexpected ${token.type} token`);
        atNewline = false;
        hasSpace = false;
    }
  }
  const last = tokens[tokens.length - 1];
  const end = last ? last.offset + last.source.length : offset;
  if (reqSpace && next && next.type !== "space" && next.type !== "newline" && next.type !== "comma" && (next.type !== "scalar" || next.source !== ""))
    onError(next.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space");
  return {
    comma,
    found,
    spaceBefore,
    comment,
    hasNewline,
    anchor,
    tag: tag2,
    end,
    start: start !== null && start !== void 0 ? start : end
  };
}

// node_modules/yaml/browser/dist/compose/util-contains-newline.js
function containsNewline(key) {
  if (!key)
    return null;
  switch (key.type) {
    case "alias":
    case "scalar":
    case "double-quoted-scalar":
    case "single-quoted-scalar":
      if (key.source.includes("\n"))
        return true;
      if (key.end) {
        for (const st of key.end)
          if (st.type === "newline")
            return true;
      }
      return false;
    case "flow-collection":
      for (const it of key.items) {
        for (const st of it.start)
          if (st.type === "newline")
            return true;
        if (it.sep) {
          for (const st of it.sep)
            if (st.type === "newline")
              return true;
        }
        if (containsNewline(it.key) || containsNewline(it.value))
          return true;
      }
      return false;
    default:
      return true;
  }
}

// node_modules/yaml/browser/dist/compose/util-flow-indent-check.js
function flowIndentCheck(indent, fc, onError) {
  if ((fc === null || fc === void 0 ? void 0 : fc.type) === "flow-collection") {
    const end = fc.end[0];
    if (end.indent === indent && (end.source === "]" || end.source === "}") && containsNewline(fc)) {
      const msg = "Flow end indicator should be more indented than parent";
      onError(end, "BAD_INDENT", msg, true);
    }
  }
}

// node_modules/yaml/browser/dist/compose/util-map-includes.js
function mapIncludes(ctx, items, search) {
  const { uniqueKeys } = ctx.options;
  if (uniqueKeys === false)
    return false;
  const isEqual = typeof uniqueKeys === "function" ? uniqueKeys : (a, b) => a === b || isScalar(a) && isScalar(b) && a.value === b.value && !(a.value === "<<" && ctx.schema.merge);
  return items.some((pair) => isEqual(pair.key, search));
}

// node_modules/yaml/browser/dist/compose/resolve-block-map.js
var startColMsg = "All mapping items must start at the same column";
function resolveBlockMap({ composeNode: composeNode2, composeEmptyNode: composeEmptyNode2 }, ctx, bm, onError) {
  var _a;
  const map2 = new YAMLMap(ctx.schema);
  if (ctx.atRoot)
    ctx.atRoot = false;
  let offset = bm.offset;
  for (const collItem of bm.items) {
    const { start, key, sep, value } = collItem;
    const keyProps = resolveProps(start, {
      indicator: "explicit-key-ind",
      next: key || (sep === null || sep === void 0 ? void 0 : sep[0]),
      offset,
      onError,
      startOnNewline: true
    });
    const implicitKey = !keyProps.found;
    if (implicitKey) {
      if (key) {
        if (key.type === "block-seq")
          onError(offset, "BLOCK_AS_IMPLICIT_KEY", "A block sequence may not be used as an implicit map key");
        else if ("indent" in key && key.indent !== bm.indent)
          onError(offset, "BAD_INDENT", startColMsg);
      }
      if (!keyProps.anchor && !keyProps.tag && !sep) {
        if (keyProps.comment) {
          if (map2.comment)
            map2.comment += "\n" + keyProps.comment;
          else
            map2.comment = keyProps.comment;
        }
        continue;
      }
    } else if (((_a = keyProps.found) === null || _a === void 0 ? void 0 : _a.indent) !== bm.indent)
      onError(offset, "BAD_INDENT", startColMsg);
    if (implicitKey && containsNewline(key))
      onError(
        key,
        // checked by containsNewline()
        "MULTILINE_IMPLICIT_KEY",
        "Implicit keys need to be on a single line"
      );
    const keyStart = keyProps.end;
    const keyNode = key ? composeNode2(ctx, key, keyProps, onError) : composeEmptyNode2(ctx, keyStart, start, null, keyProps, onError);
    if (ctx.schema.compat)
      flowIndentCheck(bm.indent, key, onError);
    if (mapIncludes(ctx, map2.items, keyNode))
      onError(keyStart, "DUPLICATE_KEY", "Map keys must be unique");
    const valueProps = resolveProps(sep || [], {
      indicator: "map-value-ind",
      next: value,
      offset: keyNode.range[2],
      onError,
      startOnNewline: !key || key.type === "block-scalar"
    });
    offset = valueProps.end;
    if (valueProps.found) {
      if (implicitKey) {
        if ((value === null || value === void 0 ? void 0 : value.type) === "block-map" && !valueProps.hasNewline)
          onError(offset, "BLOCK_AS_IMPLICIT_KEY", "Nested mappings are not allowed in compact mappings");
        if (ctx.options.strict && keyProps.start < valueProps.found.offset - 1024)
          onError(keyNode.range, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit block mapping key");
      }
      const valueNode = value ? composeNode2(ctx, value, valueProps, onError) : composeEmptyNode2(ctx, offset, sep, null, valueProps, onError);
      if (ctx.schema.compat)
        flowIndentCheck(bm.indent, value, onError);
      offset = valueNode.range[2];
      const pair = new Pair(keyNode, valueNode);
      if (ctx.options.keepSourceTokens)
        pair.srcToken = collItem;
      map2.items.push(pair);
    } else {
      if (implicitKey)
        onError(keyNode.range, "MISSING_CHAR", "Implicit map keys need to be followed by map values");
      if (valueProps.comment) {
        if (keyNode.comment)
          keyNode.comment += "\n" + valueProps.comment;
        else
          keyNode.comment = valueProps.comment;
      }
      const pair = new Pair(keyNode);
      if (ctx.options.keepSourceTokens)
        pair.srcToken = collItem;
      map2.items.push(pair);
    }
  }
  map2.range = [bm.offset, offset, offset];
  return map2;
}

// node_modules/yaml/browser/dist/compose/resolve-block-seq.js
function resolveBlockSeq({ composeNode: composeNode2, composeEmptyNode: composeEmptyNode2 }, ctx, bs, onError) {
  const seq2 = new YAMLSeq(ctx.schema);
  if (ctx.atRoot)
    ctx.atRoot = false;
  let offset = bs.offset;
  for (const { start, value } of bs.items) {
    const props = resolveProps(start, {
      indicator: "seq-item-ind",
      next: value,
      offset,
      onError,
      startOnNewline: true
    });
    offset = props.end;
    if (!props.found) {
      if (props.anchor || props.tag || value) {
        if (value && value.type === "block-seq")
          onError(offset, "BAD_INDENT", "All sequence items must start at the same column");
        else
          onError(offset, "MISSING_CHAR", "Sequence item without - indicator");
      } else {
        if (props.comment)
          seq2.comment = props.comment;
        continue;
      }
    }
    const node = value ? composeNode2(ctx, value, props, onError) : composeEmptyNode2(ctx, offset, start, null, props, onError);
    if (ctx.schema.compat)
      flowIndentCheck(bs.indent, value, onError);
    offset = node.range[2];
    seq2.items.push(node);
  }
  seq2.range = [bs.offset, offset, offset];
  return seq2;
}

// node_modules/yaml/browser/dist/compose/resolve-end.js
function resolveEnd(end, offset, reqSpace, onError) {
  let comment = "";
  if (end) {
    let hasSpace = false;
    let sep = "";
    for (const token of end) {
      const { source, type } = token;
      switch (type) {
        case "space":
          hasSpace = true;
          break;
        case "comment": {
          if (reqSpace && !hasSpace)
            onError(token, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
          const cb = source.substring(1) || " ";
          if (!comment)
            comment = cb;
          else
            comment += sep + cb;
          sep = "";
          break;
        }
        case "newline":
          if (comment)
            sep += source;
          hasSpace = true;
          break;
        default:
          onError(token, "UNEXPECTED_TOKEN", `Unexpected ${type} at node end`);
      }
      offset += source.length;
    }
  }
  return { comment, offset };
}

// node_modules/yaml/browser/dist/compose/resolve-flow-collection.js
var blockMsg = "Block collections are not allowed within flow collections";
var isBlock = (token) => token && (token.type === "block-map" || token.type === "block-seq");
function resolveFlowCollection({ composeNode: composeNode2, composeEmptyNode: composeEmptyNode2 }, ctx, fc, onError) {
  const isMap2 = fc.start.source === "{";
  const fcName = isMap2 ? "flow map" : "flow sequence";
  const coll = isMap2 ? new YAMLMap(ctx.schema) : new YAMLSeq(ctx.schema);
  coll.flow = true;
  const atRoot = ctx.atRoot;
  if (atRoot)
    ctx.atRoot = false;
  let offset = fc.offset + fc.start.source.length;
  for (let i = 0; i < fc.items.length; ++i) {
    const collItem = fc.items[i];
    const { start, key, sep, value } = collItem;
    const props = resolveProps(start, {
      flow: fcName,
      indicator: "explicit-key-ind",
      next: key || (sep === null || sep === void 0 ? void 0 : sep[0]),
      offset,
      onError,
      startOnNewline: false
    });
    if (!props.found) {
      if (!props.anchor && !props.tag && !sep && !value) {
        if (i === 0 && props.comma)
          onError(props.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${fcName}`);
        else if (i < fc.items.length - 1)
          onError(props.start, "UNEXPECTED_TOKEN", `Unexpected empty item in ${fcName}`);
        if (props.comment) {
          if (coll.comment)
            coll.comment += "\n" + props.comment;
          else
            coll.comment = props.comment;
        }
        offset = props.end;
        continue;
      }
      if (!isMap2 && ctx.options.strict && containsNewline(key))
        onError(
          key,
          // checked by containsNewline()
          "MULTILINE_IMPLICIT_KEY",
          "Implicit keys of flow sequence pairs need to be on a single line"
        );
    }
    if (i === 0) {
      if (props.comma)
        onError(props.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${fcName}`);
    } else {
      if (!props.comma)
        onError(props.start, "MISSING_CHAR", `Missing , between ${fcName} items`);
      if (props.comment) {
        let prevItemComment = "";
        loop:
          for (const st of start) {
            switch (st.type) {
              case "comma":
              case "space":
                break;
              case "comment":
                prevItemComment = st.source.substring(1);
                break loop;
              default:
                break loop;
            }
          }
        if (prevItemComment) {
          let prev = coll.items[coll.items.length - 1];
          if (isPair(prev))
            prev = prev.value || prev.key;
          if (prev.comment)
            prev.comment += "\n" + prevItemComment;
          else
            prev.comment = prevItemComment;
          props.comment = props.comment.substring(prevItemComment.length + 1);
        }
      }
    }
    if (!isMap2 && !sep && !props.found) {
      const valueNode = value ? composeNode2(ctx, value, props, onError) : composeEmptyNode2(ctx, props.end, sep, null, props, onError);
      coll.items.push(valueNode);
      offset = valueNode.range[2];
      if (isBlock(value))
        onError(valueNode.range, "BLOCK_IN_FLOW", blockMsg);
    } else {
      const keyStart = props.end;
      const keyNode = key ? composeNode2(ctx, key, props, onError) : composeEmptyNode2(ctx, keyStart, start, null, props, onError);
      if (isBlock(key))
        onError(keyNode.range, "BLOCK_IN_FLOW", blockMsg);
      const valueProps = resolveProps(sep || [], {
        flow: fcName,
        indicator: "map-value-ind",
        next: value,
        offset: keyNode.range[2],
        onError,
        startOnNewline: false
      });
      if (valueProps.found) {
        if (!isMap2 && !props.found && ctx.options.strict) {
          if (sep)
            for (const st of sep) {
              if (st === valueProps.found)
                break;
              if (st.type === "newline") {
                onError(st, "MULTILINE_IMPLICIT_KEY", "Implicit keys of flow sequence pairs need to be on a single line");
                break;
              }
            }
          if (props.start < valueProps.found.offset - 1024)
            onError(valueProps.found, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit flow sequence key");
        }
      } else if (value) {
        if ("source" in value && value.source && value.source[0] === ":")
          onError(value, "MISSING_CHAR", `Missing space after : in ${fcName}`);
        else
          onError(valueProps.start, "MISSING_CHAR", `Missing , or : between ${fcName} items`);
      }
      const valueNode = value ? composeNode2(ctx, value, valueProps, onError) : valueProps.found ? composeEmptyNode2(ctx, valueProps.end, sep, null, valueProps, onError) : null;
      if (valueNode) {
        if (isBlock(value))
          onError(valueNode.range, "BLOCK_IN_FLOW", blockMsg);
      } else if (valueProps.comment) {
        if (keyNode.comment)
          keyNode.comment += "\n" + valueProps.comment;
        else
          keyNode.comment = valueProps.comment;
      }
      const pair = new Pair(keyNode, valueNode);
      if (ctx.options.keepSourceTokens)
        pair.srcToken = collItem;
      if (isMap2) {
        const map2 = coll;
        if (mapIncludes(ctx, map2.items, keyNode))
          onError(keyStart, "DUPLICATE_KEY", "Map keys must be unique");
        map2.items.push(pair);
      } else {
        const map2 = new YAMLMap(ctx.schema);
        map2.flow = true;
        map2.items.push(pair);
        coll.items.push(map2);
      }
      offset = valueNode ? valueNode.range[2] : valueProps.end;
    }
  }
  const expectedEnd = isMap2 ? "}" : "]";
  const [ce, ...ee] = fc.end;
  let cePos = offset;
  if (ce && ce.source === expectedEnd)
    cePos = ce.offset + ce.source.length;
  else {
    const name = fcName[0].toUpperCase() + fcName.substring(1);
    const msg = atRoot ? `${name} must end with a ${expectedEnd}` : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;
    onError(offset, atRoot ? "MISSING_CHAR" : "BAD_INDENT", msg);
    if (ce && ce.source.length !== 1)
      ee.unshift(ce);
  }
  if (ee.length > 0) {
    const end = resolveEnd(ee, cePos, ctx.options.strict, onError);
    if (end.comment) {
      if (coll.comment)
        coll.comment += "\n" + end.comment;
      else
        coll.comment = end.comment;
    }
    coll.range = [fc.offset, cePos, end.offset];
  } else {
    coll.range = [fc.offset, cePos, cePos];
  }
  return coll;
}

// node_modules/yaml/browser/dist/compose/compose-collection.js
function composeCollection(CN2, ctx, token, tagToken, onError) {
  let coll;
  switch (token.type) {
    case "block-map": {
      coll = resolveBlockMap(CN2, ctx, token, onError);
      break;
    }
    case "block-seq": {
      coll = resolveBlockSeq(CN2, ctx, token, onError);
      break;
    }
    case "flow-collection": {
      coll = resolveFlowCollection(CN2, ctx, token, onError);
      break;
    }
  }
  if (!tagToken)
    return coll;
  const tagName = ctx.directives.tagName(tagToken.source, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg));
  if (!tagName)
    return coll;
  const Coll = coll.constructor;
  if (tagName === "!" || tagName === Coll.tagName) {
    coll.tag = Coll.tagName;
    return coll;
  }
  const expType = isMap(coll) ? "map" : "seq";
  let tag2 = ctx.schema.tags.find((t) => t.collection === expType && t.tag === tagName);
  if (!tag2) {
    const kt = ctx.schema.knownTags[tagName];
    if (kt && kt.collection === expType) {
      ctx.schema.tags.push(Object.assign({}, kt, { default: false }));
      tag2 = kt;
    } else {
      onError(tagToken, "TAG_RESOLVE_FAILED", `Unresolved tag: ${tagName}`, true);
      coll.tag = tagName;
      return coll;
    }
  }
  const res = tag2.resolve(coll, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg), ctx.options);
  const node = isNode(res) ? res : new Scalar(res);
  node.range = coll.range;
  node.tag = tagName;
  if (tag2 === null || tag2 === void 0 ? void 0 : tag2.format)
    node.format = tag2.format;
  return node;
}

// node_modules/yaml/browser/dist/compose/resolve-block-scalar.js
function resolveBlockScalar(scalar, strict, onError) {
  const start = scalar.offset;
  const header = parseBlockScalarHeader(scalar, strict, onError);
  if (!header)
    return { value: "", type: null, comment: "", range: [start, start, start] };
  const type = header.mode === ">" ? Scalar.BLOCK_FOLDED : Scalar.BLOCK_LITERAL;
  const lines = scalar.source ? splitLines(scalar.source) : [];
  let chompStart = lines.length;
  for (let i = lines.length - 1; i >= 0; --i) {
    const content = lines[i][1];
    if (content === "" || content === "\r")
      chompStart = i;
    else
      break;
  }
  if (!scalar.source || chompStart === 0) {
    const value2 = header.chomp === "+" ? "\n".repeat(Math.max(0, lines.length - 1)) : "";
    let end2 = start + header.length;
    if (scalar.source)
      end2 += scalar.source.length;
    return { value: value2, type, comment: header.comment, range: [start, end2, end2] };
  }
  let trimIndent = scalar.indent + header.indent;
  let offset = scalar.offset + header.length;
  let contentStart = 0;
  for (let i = 0; i < chompStart; ++i) {
    const [indent, content] = lines[i];
    if (content === "" || content === "\r") {
      if (header.indent === 0 && indent.length > trimIndent)
        trimIndent = indent.length;
    } else {
      if (indent.length < trimIndent) {
        const message = "Block scalars with more-indented leading empty lines must use an explicit indentation indicator";
        onError(offset + indent.length, "MISSING_CHAR", message);
      }
      if (header.indent === 0)
        trimIndent = indent.length;
      contentStart = i;
      break;
    }
    offset += indent.length + content.length + 1;
  }
  let value = "";
  let sep = "";
  let prevMoreIndented = false;
  for (let i = 0; i < contentStart; ++i)
    value += lines[i][0].slice(trimIndent) + "\n";
  for (let i = contentStart; i < chompStart; ++i) {
    let [indent, content] = lines[i];
    offset += indent.length + content.length + 1;
    const crlf = content[content.length - 1] === "\r";
    if (crlf)
      content = content.slice(0, -1);
    if (content && indent.length < trimIndent) {
      const src = header.indent ? "explicit indentation indicator" : "first line";
      const message = `Block scalar lines must not be less indented than their ${src}`;
      onError(offset - content.length - (crlf ? 2 : 1), "BAD_INDENT", message);
      indent = "";
    }
    if (type === Scalar.BLOCK_LITERAL) {
      value += sep + indent.slice(trimIndent) + content;
      sep = "\n";
    } else if (indent.length > trimIndent || content[0] === "	") {
      if (sep === " ")
        sep = "\n";
      else if (!prevMoreIndented && sep === "\n")
        sep = "\n\n";
      value += sep + indent.slice(trimIndent) + content;
      sep = "\n";
      prevMoreIndented = true;
    } else if (content === "") {
      if (sep === "\n")
        value += "\n";
      else
        sep = "\n";
    } else {
      value += sep + content;
      sep = " ";
      prevMoreIndented = false;
    }
  }
  switch (header.chomp) {
    case "-":
      break;
    case "+":
      for (let i = chompStart; i < lines.length; ++i)
        value += "\n" + lines[i][0].slice(trimIndent);
      if (value[value.length - 1] !== "\n")
        value += "\n";
      break;
    default:
      value += "\n";
  }
  const end = start + header.length + scalar.source.length;
  return { value, type, comment: header.comment, range: [start, end, end] };
}
function parseBlockScalarHeader({ offset, props }, strict, onError) {
  if (props[0].type !== "block-scalar-header") {
    onError(props[0], "IMPOSSIBLE", "Block scalar header not found");
    return null;
  }
  const { source } = props[0];
  const mode = source[0];
  let indent = 0;
  let chomp = "";
  let error = -1;
  for (let i = 1; i < source.length; ++i) {
    const ch = source[i];
    if (!chomp && (ch === "-" || ch === "+"))
      chomp = ch;
    else {
      const n = Number(ch);
      if (!indent && n)
        indent = n;
      else if (error === -1)
        error = offset + i;
    }
  }
  if (error !== -1)
    onError(error, "UNEXPECTED_TOKEN", `Block scalar header includes extra characters: ${source}`);
  let hasSpace = false;
  let comment = "";
  let length = source.length;
  for (let i = 1; i < props.length; ++i) {
    const token = props[i];
    switch (token.type) {
      case "space":
        hasSpace = true;
      case "newline":
        length += token.source.length;
        break;
      case "comment":
        if (strict && !hasSpace) {
          const message = "Comments must be separated from other tokens by white space characters";
          onError(token, "MISSING_CHAR", message);
        }
        length += token.source.length;
        comment = token.source.substring(1);
        break;
      case "error":
        onError(token, "UNEXPECTED_TOKEN", token.message);
        length += token.source.length;
        break;
      default: {
        const message = `Unexpected token in block scalar header: ${token.type}`;
        onError(token, "UNEXPECTED_TOKEN", message);
        const ts = token.source;
        if (ts && typeof ts === "string")
          length += ts.length;
      }
    }
  }
  return { mode, indent, chomp, comment, length };
}
function splitLines(source) {
  const split = source.split(/\n( *)/);
  const first = split[0];
  const m = first.match(/^( *)/);
  const line0 = m && m[1] ? [m[1], first.slice(m[1].length)] : ["", first];
  const lines = [line0];
  for (let i = 1; i < split.length; i += 2)
    lines.push([split[i], split[i + 1]]);
  return lines;
}

// node_modules/yaml/browser/dist/compose/resolve-flow-scalar.js
function resolveFlowScalar(scalar, strict, onError) {
  const { offset, type, source, end } = scalar;
  let _type;
  let value;
  const _onError = (rel, code, msg) => onError(offset + rel, code, msg);
  switch (type) {
    case "scalar":
      _type = Scalar.PLAIN;
      value = plainValue(source, _onError);
      break;
    case "single-quoted-scalar":
      _type = Scalar.QUOTE_SINGLE;
      value = singleQuotedValue(source, _onError);
      break;
    case "double-quoted-scalar":
      _type = Scalar.QUOTE_DOUBLE;
      value = doubleQuotedValue(source, _onError);
      break;
    default:
      onError(scalar, "UNEXPECTED_TOKEN", `Expected a flow scalar value, but found: ${type}`);
      return {
        value: "",
        type: null,
        comment: "",
        range: [offset, offset + source.length, offset + source.length]
      };
  }
  const valueEnd = offset + source.length;
  const re = resolveEnd(end, valueEnd, strict, onError);
  return {
    value,
    type: _type,
    comment: re.comment,
    range: [offset, valueEnd, re.offset]
  };
}
function plainValue(source, onError) {
  let badChar = "";
  switch (source[0]) {
    case "	":
      badChar = "a tab character";
      break;
    case ",":
      badChar = "flow indicator character ,";
      break;
    case "%":
      badChar = "directive indicator character %";
      break;
    case "|":
    case ">": {
      badChar = `block scalar indicator ${source[0]}`;
      break;
    }
    case "@":
    case "`": {
      badChar = `reserved character ${source[0]}`;
      break;
    }
  }
  if (badChar)
    onError(0, "BAD_SCALAR_START", `Plain value cannot start with ${badChar}`);
  return foldLines(source);
}
function singleQuotedValue(source, onError) {
  if (source[source.length - 1] !== "'" || source.length === 1)
    onError(source.length, "MISSING_CHAR", "Missing closing 'quote");
  return foldLines(source.slice(1, -1)).replace(/''/g, "'");
}
function foldLines(source) {
  let first, line;
  try {
    first = new RegExp("(.*?)(?<![ 	])[ 	]*\r?\n", "sy");
    line = new RegExp("[ 	]*(.*?)(?:(?<![ 	])[ 	]*)?\r?\n", "sy");
  } catch (_) {
    first = /(.*?)[ \t]*\r?\n/sy;
    line = /[ \t]*(.*?)[ \t]*\r?\n/sy;
  }
  let match = first.exec(source);
  if (!match)
    return source;
  let res = match[1];
  let sep = " ";
  let pos = first.lastIndex;
  line.lastIndex = pos;
  while (match = line.exec(source)) {
    if (match[1] === "") {
      if (sep === "\n")
        res += sep;
      else
        sep = "\n";
    } else {
      res += sep + match[1];
      sep = " ";
    }
    pos = line.lastIndex;
  }
  const last = /[ \t]*(.*)/sy;
  last.lastIndex = pos;
  match = last.exec(source);
  return res + sep + (match && match[1] || "");
}
function doubleQuotedValue(source, onError) {
  let res = "";
  for (let i = 1; i < source.length - 1; ++i) {
    const ch = source[i];
    if (ch === "\r" && source[i + 1] === "\n")
      continue;
    if (ch === "\n") {
      const { fold, offset } = foldNewline(source, i);
      res += fold;
      i = offset;
    } else if (ch === "\\") {
      let next = source[++i];
      const cc = escapeCodes[next];
      if (cc)
        res += cc;
      else if (next === "\n") {
        next = source[i + 1];
        while (next === " " || next === "	")
          next = source[++i + 1];
      } else if (next === "\r" && source[i + 1] === "\n") {
        next = source[++i + 1];
        while (next === " " || next === "	")
          next = source[++i + 1];
      } else if (next === "x" || next === "u" || next === "U") {
        const length = { x: 2, u: 4, U: 8 }[next];
        res += parseCharCode(source, i + 1, length, onError);
        i += length;
      } else {
        const raw = source.substr(i - 1, 2);
        onError(i - 1, "BAD_DQ_ESCAPE", `Invalid escape sequence ${raw}`);
        res += raw;
      }
    } else if (ch === " " || ch === "	") {
      const wsStart = i;
      let next = source[i + 1];
      while (next === " " || next === "	")
        next = source[++i + 1];
      if (next !== "\n" && !(next === "\r" && source[i + 2] === "\n"))
        res += i > wsStart ? source.slice(wsStart, i + 1) : ch;
    } else {
      res += ch;
    }
  }
  if (source[source.length - 1] !== '"' || source.length === 1)
    onError(source.length, "MISSING_CHAR", 'Missing closing "quote');
  return res;
}
function foldNewline(source, offset) {
  let fold = "";
  let ch = source[offset + 1];
  while (ch === " " || ch === "	" || ch === "\n" || ch === "\r") {
    if (ch === "\r" && source[offset + 2] !== "\n")
      break;
    if (ch === "\n")
      fold += "\n";
    offset += 1;
    ch = source[offset + 1];
  }
  if (!fold)
    fold = " ";
  return { fold, offset };
}
var escapeCodes = {
  "0": "\0",
  a: "\x07",
  b: "\b",
  e: "\x1B",
  f: "\f",
  n: "\n",
  r: "\r",
  t: "	",
  v: "\v",
  N: "\x85",
  _: "\xA0",
  L: "\u2028",
  P: "\u2029",
  " ": " ",
  '"': '"',
  "/": "/",
  "\\": "\\",
  "	": "	"
};
function parseCharCode(source, offset, length, onError) {
  const cc = source.substr(offset, length);
  const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);
  const code = ok ? parseInt(cc, 16) : NaN;
  if (isNaN(code)) {
    const raw = source.substr(offset - 2, length + 2);
    onError(offset - 2, "BAD_DQ_ESCAPE", `Invalid escape sequence ${raw}`);
    return raw;
  }
  return String.fromCodePoint(code);
}

// node_modules/yaml/browser/dist/compose/compose-scalar.js
function composeScalar(ctx, token, tagToken, onError) {
  const { value, type, comment, range } = token.type === "block-scalar" ? resolveBlockScalar(token, ctx.options.strict, onError) : resolveFlowScalar(token, ctx.options.strict, onError);
  const tagName = tagToken ? ctx.directives.tagName(tagToken.source, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg)) : null;
  const tag2 = tagToken && tagName ? findScalarTagByName(ctx.schema, value, tagName, tagToken, onError) : token.type === "scalar" ? findScalarTagByTest(ctx, value, token, onError) : ctx.schema[SCALAR];
  let scalar;
  try {
    const res = tag2.resolve(value, (msg) => onError(tagToken || token, "TAG_RESOLVE_FAILED", msg), ctx.options);
    scalar = isScalar(res) ? res : new Scalar(res);
  } catch (error) {
    const msg = error instanceof Error ? error.message : String(error);
    onError(tagToken || token, "TAG_RESOLVE_FAILED", msg);
    scalar = new Scalar(value);
  }
  scalar.range = range;
  scalar.source = value;
  if (type)
    scalar.type = type;
  if (tagName)
    scalar.tag = tagName;
  if (tag2.format)
    scalar.format = tag2.format;
  if (comment)
    scalar.comment = comment;
  return scalar;
}
function findScalarTagByName(schema4, value, tagName, tagToken, onError) {
  var _a;
  if (tagName === "!")
    return schema4[SCALAR];
  const matchWithTest = [];
  for (const tag2 of schema4.tags) {
    if (!tag2.collection && tag2.tag === tagName) {
      if (tag2.default && tag2.test)
        matchWithTest.push(tag2);
      else
        return tag2;
    }
  }
  for (const tag2 of matchWithTest)
    if ((_a = tag2.test) === null || _a === void 0 ? void 0 : _a.test(value))
      return tag2;
  const kt = schema4.knownTags[tagName];
  if (kt && !kt.collection) {
    schema4.tags.push(Object.assign({}, kt, { default: false, test: void 0 }));
    return kt;
  }
  onError(tagToken, "TAG_RESOLVE_FAILED", `Unresolved tag: ${tagName}`, tagName !== "tag:yaml.org,2002:str");
  return schema4[SCALAR];
}
function findScalarTagByTest({ directives, schema: schema4 }, value, token, onError) {
  const tag2 = schema4.tags.find((tag3) => {
    var _a;
    return tag3.default && ((_a = tag3.test) === null || _a === void 0 ? void 0 : _a.test(value));
  }) || schema4[SCALAR];
  if (schema4.compat) {
    const compat = schema4.compat.find((tag3) => {
      var _a;
      return tag3.default && ((_a = tag3.test) === null || _a === void 0 ? void 0 : _a.test(value));
    }) || schema4[SCALAR];
    if (tag2.tag !== compat.tag) {
      const ts = directives.tagString(tag2.tag);
      const cs = directives.tagString(compat.tag);
      const msg = `Value may be parsed as either ${ts} or ${cs}`;
      onError(token, "TAG_RESOLVE_FAILED", msg, true);
    }
  }
  return tag2;
}

// node_modules/yaml/browser/dist/compose/util-empty-scalar-position.js
function emptyScalarPosition(offset, before, pos) {
  if (before) {
    if (pos === null)
      pos = before.length;
    for (let i = pos - 1; i >= 0; --i) {
      let st = before[i];
      switch (st.type) {
        case "space":
        case "comment":
        case "newline":
          offset -= st.source.length;
          continue;
      }
      st = before[++i];
      while ((st === null || st === void 0 ? void 0 : st.type) === "space") {
        offset += st.source.length;
        st = before[++i];
      }
      break;
    }
  }
  return offset;
}

// node_modules/yaml/browser/dist/compose/compose-node.js
var CN = { composeNode, composeEmptyNode };
function composeNode(ctx, token, props, onError) {
  const { spaceBefore, comment, anchor, tag: tag2 } = props;
  let node;
  switch (token.type) {
    case "alias":
      node = composeAlias(ctx, token, onError);
      if (anchor || tag2)
        onError(token, "ALIAS_PROPS", "An alias node must not specify any properties");
      break;
    case "scalar":
    case "single-quoted-scalar":
    case "double-quoted-scalar":
    case "block-scalar":
      node = composeScalar(ctx, token, tag2, onError);
      if (anchor)
        node.anchor = anchor.source.substring(1);
      break;
    case "block-map":
    case "block-seq":
    case "flow-collection":
      node = composeCollection(CN, ctx, token, tag2, onError);
      if (anchor)
        node.anchor = anchor.source.substring(1);
      break;
    default:
      console.log(token);
      throw new Error(`Unsupporten token type: ${token.type}`);
  }
  if (anchor && node.anchor === "")
    onError(anchor, "BAD_ALIAS", "Anchor cannot be an empty string");
  if (spaceBefore)
    node.spaceBefore = true;
  if (comment) {
    if (token.type === "scalar" && token.source === "")
      node.comment = comment;
    else
      node.commentBefore = comment;
  }
  if (ctx.options.keepSourceTokens)
    node.srcToken = token;
  return node;
}
function composeEmptyNode(ctx, offset, before, pos, { spaceBefore, comment, anchor, tag: tag2 }, onError) {
  const token = {
    type: "scalar",
    offset: emptyScalarPosition(offset, before, pos),
    indent: -1,
    source: ""
  };
  const node = composeScalar(ctx, token, tag2, onError);
  if (anchor) {
    node.anchor = anchor.source.substring(1);
    if (node.anchor === "")
      onError(anchor, "BAD_ALIAS", "Anchor cannot be an empty string");
  }
  if (spaceBefore)
    node.spaceBefore = true;
  if (comment)
    node.comment = comment;
  return node;
}
function composeAlias({ options }, { offset, source, end }, onError) {
  const alias = new Alias(source.substring(1));
  if (alias.source === "")
    onError(offset, "BAD_ALIAS", "Alias cannot be an empty string");
  const valueEnd = offset + source.length;
  const re = resolveEnd(end, valueEnd, options.strict, onError);
  alias.range = [offset, valueEnd, re.offset];
  if (re.comment)
    alias.comment = re.comment;
  return alias;
}

// node_modules/yaml/browser/dist/compose/compose-doc.js
function composeDoc(options, directives, { offset, start, value, end }, onError) {
  const opts = Object.assign({ directives }, options);
  const doc = new Document(void 0, opts);
  const ctx = {
    atRoot: true,
    directives: doc.directives,
    options: doc.options,
    schema: doc.schema
  };
  const props = resolveProps(start, {
    indicator: "doc-start",
    next: value || (end === null || end === void 0 ? void 0 : end[0]),
    offset,
    onError,
    startOnNewline: true
  });
  if (props.found) {
    doc.directives.marker = true;
    if (value && (value.type === "block-map" || value.type === "block-seq") && !props.hasNewline)
      onError(props.end, "MISSING_CHAR", "Block collection cannot start on same line with directives-end marker");
  }
  doc.contents = value ? composeNode(ctx, value, props, onError) : composeEmptyNode(ctx, props.end, start, null, props, onError);
  const contentEnd = doc.contents.range[2];
  const re = resolveEnd(end, contentEnd, false, onError);
  if (re.comment)
    doc.comment = re.comment;
  doc.range = [offset, contentEnd, re.offset];
  return doc;
}

// node_modules/yaml/browser/dist/compose/composer.js
function getErrorPos(src) {
  if (typeof src === "number")
    return [src, src + 1];
  if (Array.isArray(src))
    return src.length === 2 ? src : [src[0], src[1]];
  const { offset, source } = src;
  return [offset, offset + (typeof source === "string" ? source.length : 1)];
}
function parsePrelude(prelude) {
  var _a;
  let comment = "";
  let atComment = false;
  let afterEmptyLine = false;
  for (let i = 0; i < prelude.length; ++i) {
    const source = prelude[i];
    switch (source[0]) {
      case "#":
        comment += (comment === "" ? "" : afterEmptyLine ? "\n\n" : "\n") + (source.substring(1) || " ");
        atComment = true;
        afterEmptyLine = false;
        break;
      case "%":
        if (((_a = prelude[i + 1]) === null || _a === void 0 ? void 0 : _a[0]) !== "#")
          i += 1;
        atComment = false;
        break;
      default:
        if (!atComment)
          afterEmptyLine = true;
        atComment = false;
    }
  }
  return { comment, afterEmptyLine };
}
var Composer = class {
  constructor(options = {}) {
    this.doc = null;
    this.atDirectives = false;
    this.prelude = [];
    this.errors = [];
    this.warnings = [];
    this.onError = (source, code, message, warning) => {
      const pos = getErrorPos(source);
      if (warning)
        this.warnings.push(new YAMLWarning(pos, code, message));
      else
        this.errors.push(new YAMLParseError(pos, code, message));
    };
    this.directives = new Directives({
      version: options.version || defaultOptions.version
    });
    this.options = options;
  }
  decorate(doc, afterDoc) {
    const { comment, afterEmptyLine } = parsePrelude(this.prelude);
    if (comment) {
      const dc = doc.contents;
      if (afterDoc) {
        doc.comment = doc.comment ? `${doc.comment}
${comment}` : comment;
      } else if (afterEmptyLine || doc.directives.marker || !dc) {
        doc.commentBefore = comment;
      } else if (isCollection(dc) && !dc.flow && dc.items.length > 0) {
        let it = dc.items[0];
        if (isPair(it))
          it = it.key;
        const cb = it.commentBefore;
        it.commentBefore = cb ? `${comment}
${cb}` : comment;
      } else {
        const cb = dc.commentBefore;
        dc.commentBefore = cb ? `${comment}
${cb}` : comment;
      }
    }
    if (afterDoc) {
      Array.prototype.push.apply(doc.errors, this.errors);
      Array.prototype.push.apply(doc.warnings, this.warnings);
    } else {
      doc.errors = this.errors;
      doc.warnings = this.warnings;
    }
    this.prelude = [];
    this.errors = [];
    this.warnings = [];
  }
  /**
   * Current stream status information.
   *
   * Mostly useful at the end of input for an empty stream.
   */
  streamInfo() {
    return {
      comment: parsePrelude(this.prelude).comment,
      directives: this.directives,
      errors: this.errors,
      warnings: this.warnings
    };
  }
  /**
   * Compose tokens into documents.
   *
   * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
   * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
   */
  *compose(tokens, forceDoc = false, endOffset = -1) {
    for (const token of tokens)
      yield* this.next(token);
    yield* this.end(forceDoc, endOffset);
  }
  /** Advance the composer by one CST token. */
  *next(token) {
    switch (token.type) {
      case "directive":
        this.directives.add(token.source, (offset, message, warning) => {
          const pos = getErrorPos(token);
          pos[0] += offset;
          this.onError(pos, "BAD_DIRECTIVE", message, warning);
        });
        this.prelude.push(token.source);
        this.atDirectives = true;
        break;
      case "document": {
        const doc = composeDoc(this.options, this.directives, token, this.onError);
        if (this.atDirectives && !doc.directives.marker)
          this.onError(token, "MISSING_CHAR", "Missing directives-end indicator line");
        this.decorate(doc, false);
        if (this.doc)
          yield this.doc;
        this.doc = doc;
        this.atDirectives = false;
        break;
      }
      case "byte-order-mark":
      case "space":
        break;
      case "comment":
      case "newline":
        this.prelude.push(token.source);
        break;
      case "error": {
        const msg = token.source ? `${token.message}: ${JSON.stringify(token.source)}` : token.message;
        const error = new YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", msg);
        if (this.atDirectives || !this.doc)
          this.errors.push(error);
        else
          this.doc.errors.push(error);
        break;
      }
      case "doc-end": {
        if (!this.doc) {
          const msg = "Unexpected doc-end without preceding document";
          this.errors.push(new YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", msg));
          break;
        }
        const end = resolveEnd(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);
        this.decorate(this.doc, true);
        if (end.comment) {
          const dc = this.doc.comment;
          this.doc.comment = dc ? `${dc}
${end.comment}` : end.comment;
        }
        this.doc.range[2] = end.offset;
        break;
      }
      default:
        this.errors.push(new YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", `Unsupported token ${token.type}`));
    }
  }
  /**
   * Call at end of input to yield any remaining document.
   *
   * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
   * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
   */
  *end(forceDoc = false, endOffset = -1) {
    if (this.doc) {
      this.decorate(this.doc, true);
      yield this.doc;
      this.doc = null;
    } else if (forceDoc) {
      const opts = Object.assign({ directives: this.directives }, this.options);
      const doc = new Document(void 0, opts);
      if (this.atDirectives)
        this.onError(endOffset, "MISSING_CHAR", "Missing directives-end indicator line");
      doc.range = [0, endOffset, endOffset];
      this.decorate(doc, false);
      yield doc;
    }
  }
};

// node_modules/yaml/browser/dist/parse/cst.js
var cst_exports = {};
__export(cst_exports, {
  BOM: () => BOM,
  DOCUMENT: () => DOCUMENT,
  FLOW_END: () => FLOW_END,
  SCALAR: () => SCALAR2,
  createScalarToken: () => createScalarToken,
  isCollection: () => isCollection2,
  isScalar: () => isScalar2,
  prettyToken: () => prettyToken,
  resolveAsScalar: () => resolveAsScalar,
  setScalarValue: () => setScalarValue,
  stringify: () => stringify2,
  tokenType: () => tokenType,
  visit: () => visit2
});

// node_modules/yaml/browser/dist/parse/cst-scalar.js
function resolveAsScalar(token, strict = true, onError) {
  if (token) {
    const _onError = (pos, code, message) => {
      const offset = typeof pos === "number" ? pos : Array.isArray(pos) ? pos[0] : pos.offset;
      if (onError)
        onError(offset, code, message);
      else
        throw new YAMLParseError([offset, offset + 1], code, message);
    };
    switch (token.type) {
      case "scalar":
      case "single-quoted-scalar":
      case "double-quoted-scalar":
        return resolveFlowScalar(token, strict, _onError);
      case "block-scalar":
        return resolveBlockScalar(token, strict, _onError);
    }
  }
  return null;
}
function createScalarToken(value, context) {
  var _a;
  const { implicitKey = false, indent, inFlow = false, offset = -1, type = "PLAIN" } = context;
  const source = stringifyString({ type, value }, {
    implicitKey,
    indent: indent > 0 ? " ".repeat(indent) : "",
    inFlow,
    options: { blockQuote: true, lineWidth: -1 }
  });
  const end = (_a = context.end) !== null && _a !== void 0 ? _a : [
    { type: "newline", offset: -1, indent, source: "\n" }
  ];
  switch (source[0]) {
    case "|":
    case ">": {
      const he = source.indexOf("\n");
      const head = source.substring(0, he);
      const body = source.substring(he + 1) + "\n";
      const props = [
        { type: "block-scalar-header", offset, indent, source: head }
      ];
      if (!addEndtoBlockProps(props, end))
        props.push({ type: "newline", offset: -1, indent, source: "\n" });
      return { type: "block-scalar", offset, indent, props, source: body };
    }
    case '"':
      return { type: "double-quoted-scalar", offset, indent, source, end };
    case "'":
      return { type: "single-quoted-scalar", offset, indent, source, end };
    default:
      return { type: "scalar", offset, indent, source, end };
  }
}
function setScalarValue(token, value, context = {}) {
  let { afterKey = false, implicitKey = false, inFlow = false, type } = context;
  let indent = "indent" in token ? token.indent : null;
  if (afterKey && typeof indent === "number")
    indent += 2;
  if (!type)
    switch (token.type) {
      case "single-quoted-scalar":
        type = "QUOTE_SINGLE";
        break;
      case "double-quoted-scalar":
        type = "QUOTE_DOUBLE";
        break;
      case "block-scalar": {
        const header = token.props[0];
        if (header.type !== "block-scalar-header")
          throw new Error("Invalid block scalar header");
        type = header.source[0] === ">" ? "BLOCK_FOLDED" : "BLOCK_LITERAL";
        break;
      }
      default:
        type = "PLAIN";
    }
  const source = stringifyString({ type, value }, {
    implicitKey: implicitKey || indent === null,
    indent: indent !== null && indent > 0 ? " ".repeat(indent) : "",
    inFlow,
    options: { blockQuote: true, lineWidth: -1 }
  });
  switch (source[0]) {
    case "|":
    case ">":
      setBlockScalarValue(token, source);
      break;
    case '"':
      setFlowScalarValue(token, source, "double-quoted-scalar");
      break;
    case "'":
      setFlowScalarValue(token, source, "single-quoted-scalar");
      break;
    default:
      setFlowScalarValue(token, source, "scalar");
  }
}
function setBlockScalarValue(token, source) {
  const he = source.indexOf("\n");
  const head = source.substring(0, he);
  const body = source.substring(he + 1) + "\n";
  if (token.type === "block-scalar") {
    const header = token.props[0];
    if (header.type !== "block-scalar-header")
      throw new Error("Invalid block scalar header");
    header.source = head;
    token.source = body;
  } else {
    const { offset } = token;
    const indent = "indent" in token ? token.indent : -1;
    const props = [
      { type: "block-scalar-header", offset, indent, source: head }
    ];
    if (!addEndtoBlockProps(props, "end" in token ? token.end : void 0))
      props.push({ type: "newline", offset: -1, indent, source: "\n" });
    for (const key of Object.keys(token))
      if (key !== "type" && key !== "offset")
        delete token[key];
    Object.assign(token, { type: "block-scalar", indent, props, source: body });
  }
}
function addEndtoBlockProps(props, end) {
  if (end)
    for (const st of end)
      switch (st.type) {
        case "space":
        case "comment":
          props.push(st);
          break;
        case "newline":
          props.push(st);
          return true;
      }
  return false;
}
function setFlowScalarValue(token, source, type) {
  switch (token.type) {
    case "scalar":
    case "double-quoted-scalar":
    case "single-quoted-scalar":
      token.type = type;
      token.source = source;
      break;
    case "block-scalar": {
      const end = token.props.slice(1);
      let oa = source.length;
      if (token.props[0].type === "block-scalar-header")
        oa -= token.props[0].source.length;
      for (const tok of end)
        tok.offset += oa;
      delete token.props;
      Object.assign(token, { type, source, end });
      break;
    }
    case "block-map":
    case "block-seq": {
      const offset = token.offset + source.length;
      const nl = { type: "newline", offset, indent: token.indent, source: "\n" };
      delete token.items;
      Object.assign(token, { type, source, end: [nl] });
      break;
    }
    default: {
      const indent = "indent" in token ? token.indent : -1;
      const end = "end" in token && Array.isArray(token.end) ? token.end.filter((st) => st.type === "space" || st.type === "comment" || st.type === "newline") : [];
      for (const key of Object.keys(token))
        if (key !== "type" && key !== "offset")
          delete token[key];
      Object.assign(token, { type, indent, source, end });
    }
  }
}

// node_modules/yaml/browser/dist/parse/cst-stringify.js
var stringify2 = (cst) => "type" in cst ? stringifyToken(cst) : stringifyItem(cst);
function stringifyToken(token) {
  switch (token.type) {
    case "block-scalar": {
      let res = "";
      for (const tok of token.props)
        res += stringifyToken(tok);
      return res + token.source;
    }
    case "block-map":
    case "block-seq": {
      let res = "";
      for (const item of token.items)
        res += stringifyItem(item);
      return res;
    }
    case "flow-collection": {
      let res = token.start.source;
      for (const item of token.items)
        res += stringifyItem(item);
      for (const st of token.end)
        res += st.source;
      return res;
    }
    case "document": {
      let res = stringifyItem(token);
      if (token.end)
        for (const st of token.end)
          res += st.source;
      return res;
    }
    default: {
      let res = token.source;
      if ("end" in token && token.end)
        for (const st of token.end)
          res += st.source;
      return res;
    }
  }
}
function stringifyItem({ start, key, sep, value }) {
  let res = "";
  for (const st of start)
    res += st.source;
  if (key)
    res += stringifyToken(key);
  if (sep)
    for (const st of sep)
      res += st.source;
  if (value)
    res += stringifyToken(value);
  return res;
}

// node_modules/yaml/browser/dist/parse/cst-visit.js
var BREAK2 = Symbol("break visit");
var SKIP2 = Symbol("skip children");
var REMOVE2 = Symbol("remove item");
function visit2(cst, visitor) {
  if ("type" in cst && cst.type === "document")
    cst = { start: cst.start, value: cst.value };
  _visit2(Object.freeze([]), cst, visitor);
}
visit2.BREAK = BREAK2;
visit2.SKIP = SKIP2;
visit2.REMOVE = REMOVE2;
visit2.itemAtPath = (cst, path) => {
  let item = cst;
  for (const [field, index] of path) {
    const tok = item && item[field];
    if (tok && "items" in tok) {
      item = tok.items[index];
    } else
      return void 0;
  }
  return item;
};
visit2.parentCollection = (cst, path) => {
  const parent = visit2.itemAtPath(cst, path.slice(0, -1));
  const field = path[path.length - 1][0];
  const coll = parent && parent[field];
  if (coll && "items" in coll)
    return coll;
  throw new Error("Parent collection not found");
};
function _visit2(path, item, visitor) {
  let ctrl = visitor(item, path);
  if (typeof ctrl === "symbol")
    return ctrl;
  for (const field of ["key", "value"]) {
    const token = item[field];
    if (token && "items" in token) {
      for (let i = 0; i < token.items.length; ++i) {
        const ci = _visit2(Object.freeze(path.concat([[field, i]])), token.items[i], visitor);
        if (typeof ci === "number")
          i = ci - 1;
        else if (ci === BREAK2)
          return BREAK2;
        else if (ci === REMOVE2) {
          token.items.splice(i, 1);
          i -= 1;
        }
      }
      if (typeof ctrl === "function" && field === "key")
        ctrl = ctrl(item, path);
    }
  }
  return typeof ctrl === "function" ? ctrl(item, path) : ctrl;
}

// node_modules/yaml/browser/dist/parse/cst.js
var BOM = "\uFEFF";
var DOCUMENT = "";
var FLOW_END = "";
var SCALAR2 = "";
var isCollection2 = (token) => !!token && "items" in token;
var isScalar2 = (token) => !!token && (token.type === "scalar" || token.type === "single-quoted-scalar" || token.type === "double-quoted-scalar" || token.type === "block-scalar");
function prettyToken(token) {
  switch (token) {
    case BOM:
      return "<BOM>";
    case DOCUMENT:
      return "<DOC>";
    case FLOW_END:
      return "<FLOW_END>";
    case SCALAR2:
      return "<SCALAR>";
    default:
      return JSON.stringify(token);
  }
}
function tokenType(source) {
  switch (source) {
    case BOM:
      return "byte-order-mark";
    case DOCUMENT:
      return "doc-mode";
    case FLOW_END:
      return "flow-error-end";
    case SCALAR2:
      return "scalar";
    case "---":
      return "doc-start";
    case "...":
      return "doc-end";
    case "":
    case "\n":
    case "\r\n":
      return "newline";
    case "-":
      return "seq-item-ind";
    case "?":
      return "explicit-key-ind";
    case ":":
      return "map-value-ind";
    case "{":
      return "flow-map-start";
    case "}":
      return "flow-map-end";
    case "[":
      return "flow-seq-start";
    case "]":
      return "flow-seq-end";
    case ",":
      return "comma";
  }
  switch (source[0]) {
    case " ":
    case "	":
      return "space";
    case "#":
      return "comment";
    case "%":
      return "directive-line";
    case "*":
      return "alias";
    case "&":
      return "anchor";
    case "!":
      return "tag";
    case "'":
      return "single-quoted-scalar";
    case '"':
      return "double-quoted-scalar";
    case "|":
    case ">":
      return "block-scalar-header";
  }
  return null;
}

// node_modules/yaml/browser/dist/parse/lexer.js
function isEmpty(ch) {
  switch (ch) {
    case void 0:
    case " ":
    case "\n":
    case "\r":
    case "	":
      return true;
    default:
      return false;
  }
}
var hexDigits = "0123456789ABCDEFabcdef".split("");
var tagChars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()".split("");
var invalidFlowScalarChars = ",[]{}".split("");
var invalidAnchorChars = " ,[]{}\n\r	".split("");
var isNotAnchorChar = (ch) => !ch || invalidAnchorChars.includes(ch);
var Lexer = class {
  constructor() {
    this.atEnd = false;
    this.blockScalarIndent = -1;
    this.blockScalarKeep = false;
    this.buffer = "";
    this.flowKey = false;
    this.flowLevel = 0;
    this.indentNext = 0;
    this.indentValue = 0;
    this.lineEndPos = null;
    this.next = null;
    this.pos = 0;
  }
  /**
   * Generate YAML tokens from the `source` string. If `incomplete`,
   * a part of the last line may be left as a buffer for the next call.
   *
   * @returns A generator of lexical tokens
   */
  *lex(source, incomplete = false) {
    if (source) {
      this.buffer = this.buffer ? this.buffer + source : source;
      this.lineEndPos = null;
    }
    this.atEnd = !incomplete;
    let next = this.next || "stream";
    while (next && (incomplete || this.hasChars(1)))
      next = yield* this.parseNext(next);
  }
  atLineEnd() {
    let i = this.pos;
    let ch = this.buffer[i];
    while (ch === " " || ch === "	")
      ch = this.buffer[++i];
    if (!ch || ch === "#" || ch === "\n")
      return true;
    if (ch === "\r")
      return this.buffer[i + 1] === "\n";
    return false;
  }
  charAt(n) {
    return this.buffer[this.pos + n];
  }
  continueScalar(offset) {
    let ch = this.buffer[offset];
    if (this.indentNext > 0) {
      let indent = 0;
      while (ch === " ")
        ch = this.buffer[++indent + offset];
      if (ch === "\r") {
        const next = this.buffer[indent + offset + 1];
        if (next === "\n" || !next && !this.atEnd)
          return offset + indent + 1;
      }
      return ch === "\n" || indent >= this.indentNext || !ch && !this.atEnd ? offset + indent : -1;
    }
    if (ch === "-" || ch === ".") {
      const dt = this.buffer.substr(offset, 3);
      if ((dt === "---" || dt === "...") && isEmpty(this.buffer[offset + 3]))
        return -1;
    }
    return offset;
  }
  getLine() {
    let end = this.lineEndPos;
    if (typeof end !== "number" || end !== -1 && end < this.pos) {
      end = this.buffer.indexOf("\n", this.pos);
      this.lineEndPos = end;
    }
    if (end === -1)
      return this.atEnd ? this.buffer.substring(this.pos) : null;
    if (this.buffer[end - 1] === "\r")
      end -= 1;
    return this.buffer.substring(this.pos, end);
  }
  hasChars(n) {
    return this.pos + n <= this.buffer.length;
  }
  setNext(state) {
    this.buffer = this.buffer.substring(this.pos);
    this.pos = 0;
    this.lineEndPos = null;
    this.next = state;
    return null;
  }
  peek(n) {
    return this.buffer.substr(this.pos, n);
  }
  *parseNext(next) {
    switch (next) {
      case "stream":
        return yield* this.parseStream();
      case "line-start":
        return yield* this.parseLineStart();
      case "block-start":
        return yield* this.parseBlockStart();
      case "doc":
        return yield* this.parseDocument();
      case "flow":
        return yield* this.parseFlowCollection();
      case "quoted-scalar":
        return yield* this.parseQuotedScalar();
      case "block-scalar":
        return yield* this.parseBlockScalar();
      case "plain-scalar":
        return yield* this.parsePlainScalar();
    }
  }
  *parseStream() {
    let line = this.getLine();
    if (line === null)
      return this.setNext("stream");
    if (line[0] === BOM) {
      yield* this.pushCount(1);
      line = line.substring(1);
    }
    if (line[0] === "%") {
      let dirEnd = line.length;
      const cs = line.indexOf("#");
      if (cs !== -1) {
        const ch = line[cs - 1];
        if (ch === " " || ch === "	")
          dirEnd = cs - 1;
      }
      while (true) {
        const ch = line[dirEnd - 1];
        if (ch === " " || ch === "	")
          dirEnd -= 1;
        else
          break;
      }
      const n = (yield* this.pushCount(dirEnd)) + (yield* this.pushSpaces(true));
      yield* this.pushCount(line.length - n);
      this.pushNewline();
      return "stream";
    }
    if (this.atLineEnd()) {
      const sp = yield* this.pushSpaces(true);
      yield* this.pushCount(line.length - sp);
      yield* this.pushNewline();
      return "stream";
    }
    yield DOCUMENT;
    return yield* this.parseLineStart();
  }
  *parseLineStart() {
    const ch = this.charAt(0);
    if (!ch && !this.atEnd)
      return this.setNext("line-start");
    if (ch === "-" || ch === ".") {
      if (!this.atEnd && !this.hasChars(4))
        return this.setNext("line-start");
      const s = this.peek(3);
      if (s === "---" && isEmpty(this.charAt(3))) {
        yield* this.pushCount(3);
        this.indentValue = 0;
        this.indentNext = 0;
        return "doc";
      } else if (s === "..." && isEmpty(this.charAt(3))) {
        yield* this.pushCount(3);
        return "stream";
      }
    }
    this.indentValue = yield* this.pushSpaces(false);
    if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1)))
      this.indentNext = this.indentValue;
    return yield* this.parseBlockStart();
  }
  *parseBlockStart() {
    const [ch0, ch1] = this.peek(2);
    if (!ch1 && !this.atEnd)
      return this.setNext("block-start");
    if ((ch0 === "-" || ch0 === "?" || ch0 === ":") && isEmpty(ch1)) {
      const n = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));
      this.indentNext = this.indentValue + 1;
      this.indentValue += n;
      return yield* this.parseBlockStart();
    }
    return "doc";
  }
  *parseDocument() {
    yield* this.pushSpaces(true);
    const line = this.getLine();
    if (line === null)
      return this.setNext("doc");
    let n = yield* this.pushIndicators();
    switch (line[n]) {
      case "#":
        yield* this.pushCount(line.length - n);
      case void 0:
        yield* this.pushNewline();
        return yield* this.parseLineStart();
      case "{":
      case "[":
        yield* this.pushCount(1);
        this.flowKey = false;
        this.flowLevel = 1;
        return "flow";
      case "}":
      case "]":
        yield* this.pushCount(1);
        return "doc";
      case "*":
        yield* this.pushUntil(isNotAnchorChar);
        return "doc";
      case '"':
      case "'":
        return yield* this.parseQuotedScalar();
      case "|":
      case ">":
        n += yield* this.parseBlockScalarHeader();
        n += yield* this.pushSpaces(true);
        yield* this.pushCount(line.length - n);
        yield* this.pushNewline();
        return yield* this.parseBlockScalar();
      default:
        return yield* this.parsePlainScalar();
    }
  }
  *parseFlowCollection() {
    let nl, sp;
    let indent = -1;
    do {
      nl = yield* this.pushNewline();
      sp = yield* this.pushSpaces(true);
      if (nl > 0)
        this.indentValue = indent = sp;
    } while (nl + sp > 0);
    const line = this.getLine();
    if (line === null)
      return this.setNext("flow");
    if (indent !== -1 && indent < this.indentNext && line[0] !== "#" || indent === 0 && (line.startsWith("---") || line.startsWith("...")) && isEmpty(line[3])) {
      const atFlowEndMarker = indent === this.indentNext - 1 && this.flowLevel === 1 && (line[0] === "]" || line[0] === "}");
      if (!atFlowEndMarker) {
        this.flowLevel = 0;
        yield FLOW_END;
        return yield* this.parseLineStart();
      }
    }
    let n = 0;
    while (line[n] === ",") {
      n += yield* this.pushCount(1);
      n += yield* this.pushSpaces(true);
      this.flowKey = false;
    }
    n += yield* this.pushIndicators();
    switch (line[n]) {
      case void 0:
        return "flow";
      case "#":
        yield* this.pushCount(line.length - n);
        return "flow";
      case "{":
      case "[":
        yield* this.pushCount(1);
        this.flowKey = false;
        this.flowLevel += 1;
        return "flow";
      case "}":
      case "]":
        yield* this.pushCount(1);
        this.flowKey = true;
        this.flowLevel -= 1;
        return this.flowLevel ? "flow" : "doc";
      case "*":
        yield* this.pushUntil(isNotAnchorChar);
        return "flow";
      case '"':
      case "'":
        this.flowKey = true;
        return yield* this.parseQuotedScalar();
      case ":": {
        const next = this.charAt(1);
        if (this.flowKey || isEmpty(next) || next === ",") {
          this.flowKey = false;
          yield* this.pushCount(1);
          yield* this.pushSpaces(true);
          return "flow";
        }
      }
      default:
        this.flowKey = false;
        return yield* this.parsePlainScalar();
    }
  }
  *parseQuotedScalar() {
    const quote = this.charAt(0);
    let end = this.buffer.indexOf(quote, this.pos + 1);
    if (quote === "'") {
      while (end !== -1 && this.buffer[end + 1] === "'")
        end = this.buffer.indexOf("'", end + 2);
    } else {
      while (end !== -1) {
        let n = 0;
        while (this.buffer[end - 1 - n] === "\\")
          n += 1;
        if (n % 2 === 0)
          break;
        end = this.buffer.indexOf('"', end + 1);
      }
    }
    const qb = this.buffer.substring(0, end);
    let nl = qb.indexOf("\n", this.pos);
    if (nl !== -1) {
      while (nl !== -1) {
        const cs = this.continueScalar(nl + 1);
        if (cs === -1)
          break;
        nl = qb.indexOf("\n", cs);
      }
      if (nl !== -1) {
        end = nl - (qb[nl - 1] === "\r" ? 2 : 1);
      }
    }
    if (end === -1) {
      if (!this.atEnd)
        return this.setNext("quoted-scalar");
      end = this.buffer.length;
    }
    yield* this.pushToIndex(end + 1, false);
    return this.flowLevel ? "flow" : "doc";
  }
  *parseBlockScalarHeader() {
    this.blockScalarIndent = -1;
    this.blockScalarKeep = false;
    let i = this.pos;
    while (true) {
      const ch = this.buffer[++i];
      if (ch === "+")
        this.blockScalarKeep = true;
      else if (ch > "0" && ch <= "9")
        this.blockScalarIndent = Number(ch) - 1;
      else if (ch !== "-")
        break;
    }
    return yield* this.pushUntil((ch) => isEmpty(ch) || ch === "#");
  }
  *parseBlockScalar() {
    let nl = this.pos - 1;
    let indent = 0;
    let ch;
    loop:
      for (let i = this.pos; ch = this.buffer[i]; ++i) {
        switch (ch) {
          case " ":
            indent += 1;
            break;
          case "\n":
            nl = i;
            indent = 0;
            break;
          case "\r": {
            const next = this.buffer[i + 1];
            if (!next && !this.atEnd)
              return this.setNext("block-scalar");
            if (next === "\n")
              break;
          }
          default:
            break loop;
        }
      }
    if (!ch && !this.atEnd)
      return this.setNext("block-scalar");
    if (indent >= this.indentNext) {
      if (this.blockScalarIndent === -1)
        this.indentNext = indent;
      else
        this.indentNext += this.blockScalarIndent;
      do {
        const cs = this.continueScalar(nl + 1);
        if (cs === -1)
          break;
        nl = this.buffer.indexOf("\n", cs);
      } while (nl !== -1);
      if (nl === -1) {
        if (!this.atEnd)
          return this.setNext("block-scalar");
        nl = this.buffer.length;
      }
    }
    if (!this.blockScalarKeep) {
      do {
        let i = nl - 1;
        let ch2 = this.buffer[i];
        if (ch2 === "\r")
          ch2 = this.buffer[--i];
        while (ch2 === " " || ch2 === "	")
          ch2 = this.buffer[--i];
        if (ch2 === "\n" && i >= this.pos)
          nl = i;
        else
          break;
      } while (true);
    }
    yield SCALAR2;
    yield* this.pushToIndex(nl + 1, true);
    return yield* this.parseLineStart();
  }
  *parsePlainScalar() {
    const inFlow = this.flowLevel > 0;
    let end = this.pos - 1;
    let i = this.pos - 1;
    let ch;
    while (ch = this.buffer[++i]) {
      if (ch === ":") {
        const next = this.buffer[i + 1];
        if (isEmpty(next) || inFlow && next === ",")
          break;
        end = i;
      } else if (isEmpty(ch)) {
        let next = this.buffer[i + 1];
        if (ch === "\r") {
          if (next === "\n") {
            i += 1;
            ch = "\n";
            next = this.buffer[i + 1];
          } else
            end = i;
        }
        if (next === "#" || inFlow && invalidFlowScalarChars.includes(next))
          break;
        if (ch === "\n") {
          const cs = this.continueScalar(i + 1);
          if (cs === -1)
            break;
          i = Math.max(i, cs - 2);
        }
      } else {
        if (inFlow && invalidFlowScalarChars.includes(ch))
          break;
        end = i;
      }
    }
    if (!ch && !this.atEnd)
      return this.setNext("plain-scalar");
    yield SCALAR2;
    yield* this.pushToIndex(end + 1, true);
    return inFlow ? "flow" : "doc";
  }
  *pushCount(n) {
    if (n > 0) {
      yield this.buffer.substr(this.pos, n);
      this.pos += n;
      return n;
    }
    return 0;
  }
  *pushToIndex(i, allowEmpty) {
    const s = this.buffer.slice(this.pos, i);
    if (s) {
      yield s;
      this.pos += s.length;
      return s.length;
    } else if (allowEmpty)
      yield "";
    return 0;
  }
  *pushIndicators() {
    switch (this.charAt(0)) {
      case "!":
        return (yield* this.pushTag()) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
      case "&":
        return (yield* this.pushUntil(isNotAnchorChar)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
      case ":":
      case "?":
      case "-":
        if (isEmpty(this.charAt(1))) {
          if (this.flowLevel === 0)
            this.indentNext = this.indentValue + 1;
          else if (this.flowKey)
            this.flowKey = false;
          return (yield* this.pushCount(1)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
        }
    }
    return 0;
  }
  *pushTag() {
    if (this.charAt(1) === "<") {
      let i = this.pos + 2;
      let ch = this.buffer[i];
      while (!isEmpty(ch) && ch !== ">")
        ch = this.buffer[++i];
      return yield* this.pushToIndex(ch === ">" ? i + 1 : i, false);
    } else {
      let i = this.pos + 1;
      let ch = this.buffer[i];
      while (ch) {
        if (tagChars.includes(ch))
          ch = this.buffer[++i];
        else if (ch === "%" && hexDigits.includes(this.buffer[i + 1]) && hexDigits.includes(this.buffer[i + 2])) {
          ch = this.buffer[i += 3];
        } else
          break;
      }
      return yield* this.pushToIndex(i, false);
    }
  }
  *pushNewline() {
    const ch = this.buffer[this.pos];
    if (ch === "\n")
      return yield* this.pushCount(1);
    else if (ch === "\r" && this.charAt(1) === "\n")
      return yield* this.pushCount(2);
    else
      return 0;
  }
  *pushSpaces(allowTabs) {
    let i = this.pos - 1;
    let ch;
    do {
      ch = this.buffer[++i];
    } while (ch === " " || allowTabs && ch === "	");
    const n = i - this.pos;
    if (n > 0) {
      yield this.buffer.substr(this.pos, n);
      this.pos = i;
    }
    return n;
  }
  *pushUntil(test) {
    let i = this.pos;
    let ch = this.buffer[i];
    while (!test(ch))
      ch = this.buffer[++i];
    return yield* this.pushToIndex(i, false);
  }
};

// node_modules/yaml/browser/dist/parse/line-counter.js
var LineCounter = class {
  constructor() {
    this.lineStarts = [];
    this.addNewLine = (offset) => this.lineStarts.push(offset);
    this.linePos = (offset) => {
      let low = 0;
      let high = this.lineStarts.length;
      while (low < high) {
        const mid = low + high >> 1;
        if (this.lineStarts[mid] < offset)
          low = mid + 1;
        else
          high = mid;
      }
      if (this.lineStarts[low] === offset)
        return { line: low + 1, col: 1 };
      if (low === 0)
        return { line: 0, col: offset };
      const start = this.lineStarts[low - 1];
      return { line: low, col: offset - start + 1 };
    };
  }
};

// node_modules/yaml/browser/dist/parse/parser.js
function includesToken(list, type) {
  for (let i = 0; i < list.length; ++i)
    if (list[i].type === type)
      return true;
  return false;
}
function includesNonEmpty(list) {
  for (let i = 0; i < list.length; ++i) {
    switch (list[i].type) {
      case "space":
      case "comment":
      case "newline":
        break;
      default:
        return true;
    }
  }
  return false;
}
function isFlowToken(token) {
  switch (token === null || token === void 0 ? void 0 : token.type) {
    case "alias":
    case "scalar":
    case "single-quoted-scalar":
    case "double-quoted-scalar":
    case "flow-collection":
      return true;
    default:
      return false;
  }
}
function getPrevProps(parent) {
  switch (parent.type) {
    case "document":
      return parent.start;
    case "block-map": {
      const it = parent.items[parent.items.length - 1];
      return it.sep || it.start;
    }
    case "block-seq":
      return parent.items[parent.items.length - 1].start;
    default:
      return [];
  }
}
function getFirstKeyStartProps(prev) {
  var _a;
  if (prev.length === 0)
    return [];
  let i = prev.length;
  loop:
    while (--i >= 0) {
      switch (prev[i].type) {
        case "doc-start":
        case "explicit-key-ind":
        case "map-value-ind":
        case "seq-item-ind":
        case "newline":
          break loop;
      }
    }
  while (((_a = prev[++i]) === null || _a === void 0 ? void 0 : _a.type) === "space") {
  }
  return prev.splice(i, prev.length);
}
function fixFlowSeqItems(fc) {
  if (fc.start.type === "flow-seq-start") {
    for (const it of fc.items) {
      if (it.sep && !it.value && !includesToken(it.start, "explicit-key-ind") && !includesToken(it.sep, "map-value-ind")) {
        if (it.key)
          it.value = it.key;
        delete it.key;
        if (isFlowToken(it.value)) {
          if (it.value.end)
            Array.prototype.push.apply(it.value.end, it.sep);
          else
            it.value.end = it.sep;
        } else
          Array.prototype.push.apply(it.start, it.sep);
        delete it.sep;
      }
    }
  }
}
var Parser = class {
  /**
   * @param onNewLine - If defined, called separately with the start position of
   *   each new line (in `parse()`, including the start of input).
   */
  constructor(onNewLine) {
    this.atNewLine = true;
    this.atScalar = false;
    this.indent = 0;
    this.offset = 0;
    this.onKeyLine = false;
    this.stack = [];
    this.source = "";
    this.type = "";
    this.lexer = new Lexer();
    this.onNewLine = onNewLine;
  }
  /**
   * Parse `source` as a YAML stream.
   * If `incomplete`, a part of the last line may be left as a buffer for the next call.
   *
   * Errors are not thrown, but yielded as `{ type: 'error', message }` tokens.
   *
   * @returns A generator of tokens representing each directive, document, and other structure.
   */
  *parse(source, incomplete = false) {
    if (this.onNewLine && this.offset === 0)
      this.onNewLine(0);
    for (const lexeme of this.lexer.lex(source, incomplete))
      yield* this.next(lexeme);
    if (!incomplete)
      yield* this.end();
  }
  /**
   * Advance the parser by the `source` of one lexical token.
   */
  *next(source) {
    this.source = source;
    if (this.atScalar) {
      this.atScalar = false;
      yield* this.step();
      this.offset += source.length;
      return;
    }
    const type = tokenType(source);
    if (!type) {
      const message = `Not a YAML token: ${source}`;
      yield* this.pop({ type: "error", offset: this.offset, message, source });
      this.offset += source.length;
    } else if (type === "scalar") {
      this.atNewLine = false;
      this.atScalar = true;
      this.type = "scalar";
    } else {
      this.type = type;
      yield* this.step();
      switch (type) {
        case "newline":
          this.atNewLine = true;
          this.indent = 0;
          if (this.onNewLine)
            this.onNewLine(this.offset + source.length);
          break;
        case "space":
          if (this.atNewLine && source[0] === " ")
            this.indent += source.length;
          break;
        case "explicit-key-ind":
        case "map-value-ind":
        case "seq-item-ind":
          if (this.atNewLine)
            this.indent += source.length;
          break;
        case "doc-mode":
        case "flow-error-end":
          return;
        default:
          this.atNewLine = false;
      }
      this.offset += source.length;
    }
  }
  /** Call at end of input to push out any remaining constructions */
  *end() {
    while (this.stack.length > 0)
      yield* this.pop();
  }
  get sourceToken() {
    const st = {
      type: this.type,
      offset: this.offset,
      indent: this.indent,
      source: this.source
    };
    return st;
  }
  *step() {
    const top = this.peek(1);
    if (this.type === "doc-end" && (!top || top.type !== "doc-end")) {
      while (this.stack.length > 0)
        yield* this.pop();
      this.stack.push({
        type: "doc-end",
        offset: this.offset,
        source: this.source
      });
      return;
    }
    if (!top)
      return yield* this.stream();
    switch (top.type) {
      case "document":
        return yield* this.document(top);
      case "alias":
      case "scalar":
      case "single-quoted-scalar":
      case "double-quoted-scalar":
        return yield* this.scalar(top);
      case "block-scalar":
        return yield* this.blockScalar(top);
      case "block-map":
        return yield* this.blockMap(top);
      case "block-seq":
        return yield* this.blockSequence(top);
      case "flow-collection":
        return yield* this.flowCollection(top);
      case "doc-end":
        return yield* this.documentEnd(top);
    }
    yield* this.pop();
  }
  peek(n) {
    return this.stack[this.stack.length - n];
  }
  *pop(error) {
    const token = error || this.stack.pop();
    if (!token) {
      const message = "Tried to pop an empty stack";
      yield { type: "error", offset: this.offset, source: "", message };
    } else if (this.stack.length === 0) {
      yield token;
    } else {
      const top = this.peek(1);
      if (token.type === "block-scalar") {
        token.indent = "indent" in top ? top.indent : 0;
      } else if (token.type === "flow-collection" && top.type === "document") {
        token.indent = 0;
      }
      if (token.type === "flow-collection")
        fixFlowSeqItems(token);
      switch (top.type) {
        case "document":
          top.value = token;
          break;
        case "block-scalar":
          top.props.push(token);
          break;
        case "block-map": {
          const it = top.items[top.items.length - 1];
          if (it.value) {
            top.items.push({ start: [], key: token, sep: [] });
            this.onKeyLine = true;
            return;
          } else if (it.sep) {
            it.value = token;
          } else {
            Object.assign(it, { key: token, sep: [] });
            this.onKeyLine = !includesToken(it.start, "explicit-key-ind");
            return;
          }
          break;
        }
        case "block-seq": {
          const it = top.items[top.items.length - 1];
          if (it.value)
            top.items.push({ start: [], value: token });
          else
            it.value = token;
          break;
        }
        case "flow-collection": {
          const it = top.items[top.items.length - 1];
          if (!it || it.value)
            top.items.push({ start: [], key: token, sep: [] });
          else if (it.sep)
            it.value = token;
          else
            Object.assign(it, { key: token, sep: [] });
          return;
        }
        default:
          yield* this.pop();
          yield* this.pop(token);
      }
      if ((top.type === "document" || top.type === "block-map" || top.type === "block-seq") && (token.type === "block-map" || token.type === "block-seq")) {
        const last = token.items[token.items.length - 1];
        if (last && !last.sep && !last.value && last.start.length > 0 && !includesNonEmpty(last.start) && (token.indent === 0 || last.start.every((st) => st.type !== "comment" || st.indent < token.indent))) {
          if (top.type === "document")
            top.end = last.start;
          else
            top.items.push({ start: last.start });
          token.items.splice(-1, 1);
        }
      }
    }
  }
  *stream() {
    switch (this.type) {
      case "directive-line":
        yield { type: "directive", offset: this.offset, source: this.source };
        return;
      case "byte-order-mark":
      case "space":
      case "comment":
      case "newline":
        yield this.sourceToken;
        return;
      case "doc-mode":
      case "doc-start": {
        const doc = {
          type: "document",
          offset: this.offset,
          start: []
        };
        if (this.type === "doc-start")
          doc.start.push(this.sourceToken);
        this.stack.push(doc);
        return;
      }
    }
    yield {
      type: "error",
      offset: this.offset,
      message: `Unexpected ${this.type} token in YAML stream`,
      source: this.source
    };
  }
  *document(doc) {
    if (doc.value)
      return yield* this.lineEnd(doc);
    switch (this.type) {
      case "doc-start": {
        if (includesNonEmpty(doc.start)) {
          yield* this.pop();
          yield* this.step();
        } else
          doc.start.push(this.sourceToken);
        return;
      }
      case "anchor":
      case "tag":
      case "space":
      case "comment":
      case "newline":
        doc.start.push(this.sourceToken);
        return;
    }
    const bv = this.startBlockValue(doc);
    if (bv)
      this.stack.push(bv);
    else {
      yield {
        type: "error",
        offset: this.offset,
        message: `Unexpected ${this.type} token in YAML document`,
        source: this.source
      };
    }
  }
  *scalar(scalar) {
    if (this.type === "map-value-ind") {
      const prev = getPrevProps(this.peek(2));
      const start = getFirstKeyStartProps(prev);
      let sep;
      if (scalar.end) {
        sep = scalar.end;
        sep.push(this.sourceToken);
        delete scalar.end;
      } else
        sep = [this.sourceToken];
      const map2 = {
        type: "block-map",
        offset: scalar.offset,
        indent: scalar.indent,
        items: [{ start, key: scalar, sep }]
      };
      this.onKeyLine = true;
      this.stack[this.stack.length - 1] = map2;
    } else
      yield* this.lineEnd(scalar);
  }
  *blockScalar(scalar) {
    switch (this.type) {
      case "space":
      case "comment":
      case "newline":
        scalar.props.push(this.sourceToken);
        return;
      case "scalar":
        scalar.source = this.source;
        this.atNewLine = true;
        this.indent = 0;
        if (this.onNewLine) {
          let nl = this.source.indexOf("\n") + 1;
          while (nl !== 0) {
            this.onNewLine(this.offset + nl);
            nl = this.source.indexOf("\n", nl) + 1;
          }
        }
        yield* this.pop();
        break;
      default:
        yield* this.pop();
        yield* this.step();
    }
  }
  *blockMap(map2) {
    var _a;
    const it = map2.items[map2.items.length - 1];
    switch (this.type) {
      case "newline":
        this.onKeyLine = false;
        if (it.value) {
          const end = "end" in it.value ? it.value.end : void 0;
          const last = Array.isArray(end) ? end[end.length - 1] : void 0;
          if ((last === null || last === void 0 ? void 0 : last.type) === "comment")
            end === null || end === void 0 ? void 0 : end.push(this.sourceToken);
          else
            map2.items.push({ start: [this.sourceToken] });
        } else if (it.sep)
          it.sep.push(this.sourceToken);
        else
          it.start.push(this.sourceToken);
        return;
      case "space":
      case "comment":
        if (it.value)
          map2.items.push({ start: [this.sourceToken] });
        else if (it.sep)
          it.sep.push(this.sourceToken);
        else {
          if (this.atIndentedComment(it.start, map2.indent)) {
            const prev = map2.items[map2.items.length - 2];
            const end = (_a = prev === null || prev === void 0 ? void 0 : prev.value) === null || _a === void 0 ? void 0 : _a.end;
            if (Array.isArray(end)) {
              Array.prototype.push.apply(end, it.start);
              end.push(this.sourceToken);
              map2.items.pop();
              return;
            }
          }
          it.start.push(this.sourceToken);
        }
        return;
    }
    if (this.indent >= map2.indent) {
      const atNextItem = !this.onKeyLine && this.indent === map2.indent && (it.sep || includesNonEmpty(it.start));
      switch (this.type) {
        case "anchor":
        case "tag":
          if (atNextItem || it.value) {
            map2.items.push({ start: [this.sourceToken] });
            this.onKeyLine = true;
          } else if (it.sep)
            it.sep.push(this.sourceToken);
          else
            it.start.push(this.sourceToken);
          return;
        case "explicit-key-ind":
          if (!it.sep && !includesToken(it.start, "explicit-key-ind"))
            it.start.push(this.sourceToken);
          else if (atNextItem || it.value)
            map2.items.push({ start: [this.sourceToken] });
          else
            this.stack.push({
              type: "block-map",
              offset: this.offset,
              indent: this.indent,
              items: [{ start: [this.sourceToken] }]
            });
          this.onKeyLine = true;
          return;
        case "map-value-ind":
          if (!it.sep)
            Object.assign(it, { key: null, sep: [this.sourceToken] });
          else if (it.value || atNextItem && !includesToken(it.start, "explicit-key-ind"))
            map2.items.push({ start: [], key: null, sep: [this.sourceToken] });
          else if (includesToken(it.sep, "map-value-ind"))
            this.stack.push({
              type: "block-map",
              offset: this.offset,
              indent: this.indent,
              items: [{ start: [], key: null, sep: [this.sourceToken] }]
            });
          else if (includesToken(it.start, "explicit-key-ind") && isFlowToken(it.key) && !includesToken(it.sep, "newline")) {
            const start = getFirstKeyStartProps(it.start);
            const key = it.key;
            const sep = it.sep;
            sep.push(this.sourceToken);
            delete it.key, delete it.sep;
            this.stack.push({
              type: "block-map",
              offset: this.offset,
              indent: this.indent,
              items: [{ start, key, sep }]
            });
          } else
            it.sep.push(this.sourceToken);
          this.onKeyLine = true;
          return;
        case "alias":
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar": {
          const fs = this.flowScalar(this.type);
          if (atNextItem || it.value) {
            map2.items.push({ start: [], key: fs, sep: [] });
            this.onKeyLine = true;
          } else if (it.sep) {
            this.stack.push(fs);
          } else {
            Object.assign(it, { key: fs, sep: [] });
            this.onKeyLine = true;
          }
          return;
        }
        default: {
          const bv = this.startBlockValue(map2);
          if (bv) {
            if (atNextItem && bv.type !== "block-seq" && includesToken(it.start, "explicit-key-ind"))
              map2.items.push({ start: [] });
            this.stack.push(bv);
            return;
          }
        }
      }
    }
    yield* this.pop();
    yield* this.step();
  }
  *blockSequence(seq2) {
    var _a;
    const it = seq2.items[seq2.items.length - 1];
    switch (this.type) {
      case "newline":
        if (it.value) {
          const end = "end" in it.value ? it.value.end : void 0;
          const last = Array.isArray(end) ? end[end.length - 1] : void 0;
          if ((last === null || last === void 0 ? void 0 : last.type) === "comment")
            end === null || end === void 0 ? void 0 : end.push(this.sourceToken);
          else
            seq2.items.push({ start: [this.sourceToken] });
        } else
          it.start.push(this.sourceToken);
        return;
      case "space":
      case "comment":
        if (it.value)
          seq2.items.push({ start: [this.sourceToken] });
        else {
          if (this.atIndentedComment(it.start, seq2.indent)) {
            const prev = seq2.items[seq2.items.length - 2];
            const end = (_a = prev === null || prev === void 0 ? void 0 : prev.value) === null || _a === void 0 ? void 0 : _a.end;
            if (Array.isArray(end)) {
              Array.prototype.push.apply(end, it.start);
              end.push(this.sourceToken);
              seq2.items.pop();
              return;
            }
          }
          it.start.push(this.sourceToken);
        }
        return;
      case "anchor":
      case "tag":
        if (it.value || this.indent <= seq2.indent)
          break;
        it.start.push(this.sourceToken);
        return;
      case "seq-item-ind":
        if (this.indent !== seq2.indent)
          break;
        if (it.value || includesToken(it.start, "seq-item-ind"))
          seq2.items.push({ start: [this.sourceToken] });
        else
          it.start.push(this.sourceToken);
        return;
    }
    if (this.indent > seq2.indent) {
      const bv = this.startBlockValue(seq2);
      if (bv) {
        this.stack.push(bv);
        return;
      }
    }
    yield* this.pop();
    yield* this.step();
  }
  *flowCollection(fc) {
    const it = fc.items[fc.items.length - 1];
    if (this.type === "flow-error-end") {
      let top;
      do {
        yield* this.pop();
        top = this.peek(1);
      } while (top && top.type === "flow-collection");
    } else if (fc.end.length === 0) {
      switch (this.type) {
        case "comma":
        case "explicit-key-ind":
          if (!it || it.sep)
            fc.items.push({ start: [this.sourceToken] });
          else
            it.start.push(this.sourceToken);
          return;
        case "map-value-ind":
          if (!it || it.value)
            fc.items.push({ start: [], key: null, sep: [this.sourceToken] });
          else if (it.sep)
            it.sep.push(this.sourceToken);
          else
            Object.assign(it, { key: null, sep: [this.sourceToken] });
          return;
        case "space":
        case "comment":
        case "newline":
        case "anchor":
        case "tag":
          if (!it || it.value)
            fc.items.push({ start: [this.sourceToken] });
          else if (it.sep)
            it.sep.push(this.sourceToken);
          else
            it.start.push(this.sourceToken);
          return;
        case "alias":
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar": {
          const fs = this.flowScalar(this.type);
          if (!it || it.value)
            fc.items.push({ start: [], key: fs, sep: [] });
          else if (it.sep)
            this.stack.push(fs);
          else
            Object.assign(it, { key: fs, sep: [] });
          return;
        }
        case "flow-map-end":
        case "flow-seq-end":
          fc.end.push(this.sourceToken);
          return;
      }
      const bv = this.startBlockValue(fc);
      if (bv)
        this.stack.push(bv);
      else {
        yield* this.pop();
        yield* this.step();
      }
    } else {
      const parent = this.peek(2);
      if (parent.type === "block-map" && (this.type === "map-value-ind" || this.type === "newline" && !parent.items[parent.items.length - 1].sep)) {
        yield* this.pop();
        yield* this.step();
      } else if (this.type === "map-value-ind" && parent.type !== "flow-collection") {
        const prev = getPrevProps(parent);
        const start = getFirstKeyStartProps(prev);
        fixFlowSeqItems(fc);
        const sep = fc.end.splice(1, fc.end.length);
        sep.push(this.sourceToken);
        const map2 = {
          type: "block-map",
          offset: fc.offset,
          indent: fc.indent,
          items: [{ start, key: fc, sep }]
        };
        this.onKeyLine = true;
        this.stack[this.stack.length - 1] = map2;
      } else {
        yield* this.lineEnd(fc);
      }
    }
  }
  flowScalar(type) {
    if (this.onNewLine) {
      let nl = this.source.indexOf("\n") + 1;
      while (nl !== 0) {
        this.onNewLine(this.offset + nl);
        nl = this.source.indexOf("\n", nl) + 1;
      }
    }
    return {
      type,
      offset: this.offset,
      indent: this.indent,
      source: this.source
    };
  }
  startBlockValue(parent) {
    switch (this.type) {
      case "alias":
      case "scalar":
      case "single-quoted-scalar":
      case "double-quoted-scalar":
        return this.flowScalar(this.type);
      case "block-scalar-header":
        return {
          type: "block-scalar",
          offset: this.offset,
          indent: this.indent,
          props: [this.sourceToken],
          source: ""
        };
      case "flow-map-start":
      case "flow-seq-start":
        return {
          type: "flow-collection",
          offset: this.offset,
          indent: this.indent,
          start: this.sourceToken,
          items: [],
          end: []
        };
      case "seq-item-ind":
        return {
          type: "block-seq",
          offset: this.offset,
          indent: this.indent,
          items: [{ start: [this.sourceToken] }]
        };
      case "explicit-key-ind": {
        this.onKeyLine = true;
        const prev = getPrevProps(parent);
        const start = getFirstKeyStartProps(prev);
        start.push(this.sourceToken);
        return {
          type: "block-map",
          offset: this.offset,
          indent: this.indent,
          items: [{ start }]
        };
      }
      case "map-value-ind": {
        this.onKeyLine = true;
        const prev = getPrevProps(parent);
        const start = getFirstKeyStartProps(prev);
        return {
          type: "block-map",
          offset: this.offset,
          indent: this.indent,
          items: [{ start, key: null, sep: [this.sourceToken] }]
        };
      }
    }
    return null;
  }
  atIndentedComment(start, indent) {
    if (this.type !== "comment")
      return false;
    if (this.indent <= indent)
      return false;
    return start.every((st) => st.type === "newline" || st.type === "space");
  }
  *documentEnd(docEnd) {
    if (this.type !== "doc-mode") {
      if (docEnd.end)
        docEnd.end.push(this.sourceToken);
      else
        docEnd.end = [this.sourceToken];
      if (this.type === "newline")
        yield* this.pop();
    }
  }
  *lineEnd(token) {
    switch (this.type) {
      case "comma":
      case "doc-start":
      case "doc-end":
      case "flow-seq-end":
      case "flow-map-end":
      case "map-value-ind":
        yield* this.pop();
        yield* this.step();
        break;
      case "newline":
        this.onKeyLine = false;
      case "space":
      case "comment":
      default:
        if (token.end)
          token.end.push(this.sourceToken);
        else
          token.end = [this.sourceToken];
        if (this.type === "newline")
          yield* this.pop();
    }
  }
};

// node_modules/yaml/browser/dist/public-api.js
function parseOptions(options) {
  const prettyErrors = options.prettyErrors !== false;
  const lineCounter = options.lineCounter || prettyErrors && new LineCounter() || null;
  return { lineCounter, prettyErrors };
}
function parseDocument(source, options = {}) {
  const { lineCounter, prettyErrors } = parseOptions(options);
  const parser = new Parser(lineCounter === null || lineCounter === void 0 ? void 0 : lineCounter.addNewLine);
  const composer = new Composer(options);
  let doc = null;
  for (const _doc of composer.compose(parser.parse(source), true, source.length)) {
    if (!doc)
      doc = _doc;
    else if (doc.options.logLevel !== "silent") {
      doc.errors.push(new YAMLParseError(_doc.range.slice(0, 2), "MULTIPLE_DOCS", "Source contains multiple documents; please use YAML.parseAllDocuments()"));
      break;
    }
  }
  if (prettyErrors && lineCounter) {
    doc.errors.forEach(prettifyError(source, lineCounter));
    doc.warnings.forEach(prettifyError(source, lineCounter));
  }
  return doc;
}

// tagrenamer/File.ts
var File = class {
  constructor(app2, filename, tagPositions, hasFrontMatter2) {
    this.app = app2;
    this.filename = filename;
    this.basename = filename.split("/").pop();
    this.tagPositions = tagPositions;
    this.hasFrontMatter = !!hasFrontMatter2;
  }
  /** @param {Replacement} replace */
  async renamed(replace) {
    const file = this.app.vault.getAbstractFileByPath(this.filename);
    const original = await this.app.vault.read(file);
    let text = original;
    if (this.hasFrontMatter) {
      text = this.replaceInFrontMatter(text, replace);
    }
    if (text !== original) {
      await this.app.vault.modify(file, text);
      return true;
    }
  }
  /** @param {Replacement} replace */
  replaceInFrontMatter(text, replace) {
    const [empty, frontMatter] = text.split(/^---\r?$\n?/m, 2);
    if (empty.trim() !== "" || !frontMatter.trim() || !frontMatter.endsWith("\n"))
      return text;
    const parsed = parseDocument(frontMatter, { keepSourceTokens: true });
    if (parsed.errors.length) {
      const error = `YAML issue with ${this.filename}: ${parsed.errors[0]}`;
      console.error(error);
      new import_obsidian.Notice(error + "; skipping frontmatter");
      return;
    }
    let changed = false, json = parsed.toJSON();
    function setInNode(node, value, afterKey = false) {
      cst_exports.setScalarValue(node.srcToken, value, { afterKey });
      changed = true;
      node.value = value;
    }
    function processField(prop, isAlias2) {
      const node = parsed.get(prop, true);
      if (!node)
        return;
      const field = json[prop];
      if (!field || !field.length)
        return;
      if (typeof field === "string") {
        const parts = field.split(isAlias2 ? /(^\s+|\s*,\s*|\s+$)/ : /([\s,]+)/);
        const after = replace.inArray(parts, true, isAlias2).join("");
        if (field != after)
          setInNode(node, after, true);
      } else if (Array.isArray(field)) {
        replace.inArray(field, false, isAlias2).forEach((v, i) => {
          if (field[i] !== v)
            setInNode(node.get(i, true), v);
        });
      }
    }
    for (const { key: { value: prop } } of parsed.contents.items) {
      if (/^tags?$/i.test(prop)) {
        processField(prop, false);
      } else if (/^alias(es)?$/i.test(prop)) {
        processField(prop, true);
      }
    }
    return changed ? text.replace(frontMatter, cst_exports.stringify(parsed.contents.srcToken)) : text;
  }
};

// tagrenamer/renaming.ts
function hasFrontMatter(file) {
  let { frontmatter } = app.metadataCache.getFileCache(file) || {};
  return frontmatter != null;
}
function hasTags(file) {
  let { frontmatter } = app.metadataCache.getFileCache(file) || {};
  const fmtags = (0, import_obsidian2.parseFrontMatterTags)(frontmatter) || [];
  const aliasTags = ((0, import_obsidian2.parseFrontMatterAliases)(frontmatter) || []).filter(Tag.isTag);
  return fmtags.length || aliasTags.length ? true : false;
}
async function renameTag(file, tagName, newName) {
  const oldTag = new Tag(tagName), newTag = new Tag(newName), replace = new Replacement(oldTag, newTag);
  const target = await findTargets(oldTag, file);
  if (!target) {
    return false;
  }
  await target.renamed(replace);
  return true;
}
async function findTargets(tag2, file) {
  let { frontmatter, tags } = app.metadataCache.getFileCache(file) || {};
  const fmtags = ((0, import_obsidian2.parseFrontMatterTags)(frontmatter) || []).filter(tag2.matches);
  const aliasTags = ((0, import_obsidian2.parseFrontMatterAliases)(frontmatter) || []).filter(Tag.isTag).filter(tag2.matches);
  if (fmtags.length || aliasTags.length) {
    return new File(app, file.path, tags, fmtags.length + aliasTags.length);
  }
  return null;
}
function renameBlogTitle(app2, path, view) {
  let moment5 = require_moment();
  const dateYYYYMMDD = moment5().format("YYYYMMDD");
  let renamedPath = "";
  if (path.match(/^.\/Blog \d\d\d\d\d\d\d\d/)) {
    return Promise.resolve();
  } else if (path.match(/^.\/blog \d\d\d\d\d\d\d\d/)) {
    new import_obsidian2.Notice("start with blog with date, renaming blog to Blog");
    renamedPath = path.replace(/^(.\/)blog /, `$1Blog `);
    return renameFile(app2, view.file, renamedPath);
  } else if (path.match(/^.\/Blog /)) {
    new import_obsidian2.Notice("starts with Blog but no date, adding date");
    renamedPath = path.replace(/^(.\/Blog )/, `$1${dateYYYYMMDD} `);
    return renameFile(app2, view.file, renamedPath);
  } else if (path.match(/^.\/blog /)) {
    new import_obsidian2.Notice("starts with blog but no date, adding date");
    renamedPath = path.replace(/^(.\/)blog /, `$1Blog ${dateYYYYMMDD} `);
    return renameFile(app2, view.file, renamedPath);
  } else {
    new import_obsidian2.Notice("starts without blog, adding Blog + date");
    renamedPath = path.replace(/^(.\/)/, `$1Blog ${dateYYYYMMDD} `);
    return renameFile(app2, view.file, renamedPath);
  }
}
function renameThreadsTitle(app2, path, view) {
  let moment5 = require_moment();
  const dateYYYYMMDD = moment5().format("YYYYMMDD");
  let renamedPath = "";
  if (path.match(/^.\/Threads \d\d\d\d\d\d\d\d/)) {
    return Promise.resolve();
  } else if (path.match(/^.\/threads \d\d\d\d\d\d\d\d/)) {
    new import_obsidian2.Notice("start with threads with date, renaming threads to Threads");
    renamedPath = path.replace(/^(.\/)threads /, `$1Threads `);
    return renameFile(app2, view.file, renamedPath);
  } else if (path.match(/^.\/Threads /)) {
    new import_obsidian2.Notice("starts with Threads but no date, adding date");
    renamedPath = path.replace(/^(.\/Threads )/, `$1${dateYYYYMMDD} `);
    return renameFile(app2, view.file, renamedPath);
  } else if (path.match(/^.\/threads /)) {
    new import_obsidian2.Notice("starts with threads but no date, adding date");
    renamedPath = path.replace(/^(.\/)threads /, `$1Threads ${dateYYYYMMDD} `);
    return renameFile(app2, view.file, renamedPath);
  } else {
    new import_obsidian2.Notice("starts without threads, adding Threads + date");
    renamedPath = path.replace(/^(.\/)/, `$1Threads ${dateYYYYMMDD} `);
    return renameFile(app2, view.file, renamedPath);
  }
}
async function renameFile(app2, file, newPath) {
  app2.fileManager.renameFile(file, newPath);
}

// selfutil/getTaskTag.ts
var import_obsidian3 = require("obsidian");
var ALL_TYPES = [
  {
    type: "a/n/n",
    description: "N Current Task",
    prefix: "\u{1F534}"
  },
  {
    type: "a/w/n",
    description: "W Current Task",
    prefix: "\u{1F534}"
  },
  {
    type: "a/n/l",
    description: "N Later Task",
    prefix: "\u{1F7E2}"
  },
  {
    type: "a/w/l",
    description: "W Later Task",
    prefix: "\u{1F7E2}"
  },
  {
    type: "a/n/p",
    description: "N Permanent Task",
    prefix: "\u{1F7E0}"
  },
  {
    type: "a/w/p",
    description: "W Permanent Task",
    prefix: "\u{1F7E0}"
  },
  {
    type: "a/a/p",
    description: "Area of Responsibility - Primary important poeople",
    prefix: "\u2764\uFE0F"
  },
  {
    type: "a/a/s",
    description: "Area of Responsibility - Secondary important poeople",
    prefix: "\u{1F49A}"
  },
  {
    type: "a/a/f",
    description: "Area of Responsibility - Area to focus",
    prefix: "\u{1F7E5}"
  },
  {
    type: "a/a/h",
    description: "Area of Responsibility - Hobby",
    prefix: "\u{1F7E9}"
  },
  {
    type: "a/a/h",
    description: "Area of Responsibility - Abandoned",
    prefix: "\u{1F7EA}"
  },
  {
    type: "b/n/s",
    description: "Zettelkasten - Source notes snippets from content or Reference notes (like books / video / thoughts / conversation)",
    prefix: "\u{1F4E8}"
  },
  /*
  {
    type: "b/n/r",
    description: "Zettelkasten - Reference notes (like books / video / thoughts / conversation)",
    prefix: "📖",
  },
  */
  {
    type: "b/n/c",
    description: "Zettelkasten - Cards (With your own thought)",
    prefix: "\u{1F516}"
  },
  {
    type: "b/n/p",
    description: "Perspective - combine mulitple notes into a perspective e.g. solve a problem",
    prefix: "\u{1F50D}"
  },
  {
    type: "b/n/f",
    description: "Framework - Try to put the stuff into a a framework and find the missing puzzle",
    prefix: "\u{1F9E9}"
  },
  {
    type: "c/b/d",
    description: "Blog post draft",
    prefix: "\u{1F4C4}"
  },
  {
    type: "b/n/j",
    description: "Journal / events",
    prefix: "\u{1F4C5}"
  },
  {
    type: "b/n/m",
    description: "Zettelkasten - MOC Notes for a small topic",
    prefix: "\u{1F4C2}"
  },
  {
    type: "b/n/z",
    description: "Zettelkasten - Slip box (mainly on thought and the one I am interested)",
    prefix: "\u{1F5C3}\uFE0F"
  },
  {
    type: "b/n/i",
    description: "Index Notes for others framework",
    prefix: "\u{1F4C9}"
  },
  {
    type: "b/n/t",
    description: "Placeholder Notes for Target Audience (Notes starts with TA)",
    prefix: "\u{1F464}"
  },
  /*
  {
    type: "b/n/w",
    description: "Wiki Notes for a messy wiki topic",
    prefix: "📖",
  },
  */
  /*
  {
    type: "b/n/v",
    description: "Zettelkasten - Voice script (Deprecated?)",
    prefix: "🗣️",
  },
  */
  /*
  {
    type: "b/n/r",
    description: "Zettelkasten - Reference (Deprecated?)",
    prefix: "📖",
  },
  */
  /*
  {
    type: "b/n/u",
    description: "Zettelkasten - Unprocessed material like an inbox",
    prefix: "📥",
  },
  */
  {
    type: "b/t/a",
    description: "Atomic Essay Template",
    prefix: "\u270D\u{1F3FB}"
  },
  {
    type: "b/t/p",
    description: "ChatGPT Prompt Template",
    prefix: "\u{1FA84}"
  },
  {
    type: "c/a/d",
    description: "Atomic Essay drafting",
    prefix: "\u{1F195}"
  },
  {
    type: "c/a/r",
    description: "Atomic Essay ready to post",
    prefix: "\u{1F197}"
  },
  {
    type: "c/a/p",
    description: "Atomic Essay published",
    prefix: "\u{1F199}"
  },
  {
    type: "c/a/a",
    description: "Atomic Essay abandoned",
    prefix: "\u{1F5D1}\uFE0F"
  },
  {
    type: "c/b/r",
    description: "Blog post ready to publish",
    prefix: "\u{1F197}"
  },
  {
    type: "c/b/p",
    description: "Blog post published",
    prefix: "\u{1F199}"
  },
  {
    type: "c/b/a",
    description: "Blog post abandoned",
    prefix: "\u{1F5D1}\uFE0F"
  },
  {
    type: "c/t/d",
    description: "Threads post draft",
    prefix: "\u{1F195}"
  },
  {
    type: "c/t/r",
    description: "Threads post ready to post",
    prefix: "\u{1F197}"
  },
  {
    type: "c/t/t",
    description: "Threads post threads published",
    prefix: "\u{1F199}"
  },
  {
    type: "c/t/p",
    description: "Threads post published",
    prefix: "\u{1F199}"
  },
  {
    type: "c/t/o",
    description: "Threads post old (rewritten somewhere",
    prefix: "\u{1F474}\u{1F3FB}"
  },
  {
    type: "c/t/a",
    description: "Threads post abandoned",
    prefix: "\u{1F5D1}\uFE0F"
  },
  {
    type: "c/x/d",
    description: "Twitter post drafting",
    prefix: "\u{1F195}"
  },
  {
    type: "c/x/r",
    description: "Twitter post ready to publish",
    prefix: "\u{1F197}"
  },
  {
    type: "c/x/p",
    description: "Twitter post published",
    prefix: "\u{1F199}"
  },
  {
    type: "a/n/w",
    description: "N Waiting Task",
    prefix: "\u{1F535}"
  },
  {
    type: "a/n/d",
    description: "N Done Task",
    prefix: "\u26AA\uFE0F"
  },
  {
    type: "a/n/a",
    description: "N Archive Task",
    prefix: "\u{1F7E3}"
  },
  {
    type: "a/n/o",
    description: "N Others' Task",
    prefix: "\u{1F7E4}"
  },
  {
    type: "a/w/w",
    description: "W Waiting Task",
    prefix: "\u{1F535}"
  },
  {
    type: "a/w/d",
    description: "W Done Task",
    prefix: "\u26AA\uFE0F"
  },
  {
    type: "a/w/a",
    description: "W Archive Task",
    prefix: "\u{1F7E3}"
  },
  {
    type: "a/w/o",
    description: "W Others' Task",
    prefix: "\u{1F7E4}"
  },
  {
    type: "b/k/q",
    description: "Expermential Knowledge Group - Unresolved Thought Question",
    prefix: "0\uFE0F\u20E3"
  },
  {
    type: "b/k/d",
    description: "Expermential Knowledge Group - Data",
    prefix: "1\uFE0F\u20E3"
  },
  {
    type: "b/k/s",
    description: "Expermential Knowledge Group - Simple Card (Single perspective)",
    prefix: "2\uFE0F\u20E3"
  },
  {
    type: "b/k/p",
    description: "Expermential Knowledge Group - Perspective Card (Multiple perspective)",
    prefix: "3\uFE0F\u20E3"
  },
  {
    type: "b/k/c",
    description: "Expermential Knowledge Group - Collections of Perspective Card for a topic",
    prefix: "4\uFE0F\u20E3"
  }
];
function getNoteDescriptionByType(type) {
  for (const noteType of ALL_TYPES) {
    if (type.replace("#", "").replace("@", "") == noteType.type) {
      return noteType.description;
    }
  }
  return "";
}
function getNoteType(path) {
  const file = this.app.vault.getAbstractFileByPath(path);
  if (!file) {
    return null;
  }
  const { frontmatter } = app.metadataCache.getFileCache(file) || {};
  const fmtags = (0, import_obsidian3.parseFrontMatterTags)(frontmatter) || [];
  for (const tag2 of fmtags) {
    for (const noteType of ALL_TYPES) {
      if (tag2 == "#" + noteType.type) {
        return noteType;
      }
    }
  }
  return null;
}

// updateNoteTypeModal.ts
var UpdateNoteTypeModal = class extends import_obsidian4.FuzzySuggestModal {
  constructor(app2, editor, file) {
    super(app2);
    this.editor = editor;
    this.file = file;
    this.keydownHandler = (event) => {
      if (event.ctrlKey && event.altKey && event.shiftKey && event.key === "C") {
        this.close();
      } else if (event.ctrlKey && event.metaKey && event.shiftKey && event.key === "C") {
        this.close();
      } else if (event.metaKey || event.ctrlKey) {
        const key = parseInt(event.key, 10);
        if (key >= 1 && key <= 9) {
          event.preventDefault();
          this.selectElement(key - 1);
        }
      }
    };
    document.addEventListener("keydown", this.keydownHandler);
  }
  selectElement(index) {
    const elements = this.resultContainerEl.querySelectorAll(".suggestion-item");
    if (elements.length > index) {
      const element = elements[index];
      element.click();
    }
  }
  onClose() {
    super.onClose();
    document.removeEventListener("keydown", this.keydownHandler);
  }
  getItems() {
    return ALL_TYPES;
  }
  getItemText(noteType) {
    return noteType.type;
  }
  // Renders each suggestion item.
  renderSuggestion(choosenNoteTypeMatch, el) {
    const noteType = choosenNoteTypeMatch.item;
    const index = this.resultContainerEl.querySelectorAll(".suggestion-item").length;
    const itemIndex = index < 10 ? index + ". " : "    ";
    el.createEl("div", { text: itemIndex + noteType.prefix + " " + noteType.type });
    el.createEl("small", { text: "     " + noteType.description });
  }
  containsType(line) {
    return ALL_TYPES.filter((noteType) => line.contains(noteType.type)).length > 0;
  }
  addFrontMatterWithTag(value) {
    const cursor = this.editor.getCursor();
    const oldLine = cursor.line;
    const oldCh = cursor.ch;
    const addText = `---
tags: ${value}
---

${this.editor.getValue()}`;
    this.editor.setValue(addText);
    cursor.line = oldLine + 4;
    cursor.ch = oldCh;
    this.editor.setCursor(cursor);
  }
  addTagAssumingHasFrontMatter(value) {
    const cursor = this.editor.getCursor();
    const oldLine = cursor.line;
    const oldCh = cursor.ch;
    let firstLineIndex = 0;
    const lineCount = this.editor.lineCount();
    for (let i = 0; i < lineCount; i++) {
      if (this.editor.getLine(i).trim() == "---".trim()) {
        firstLineIndex = i;
        break;
      }
    }
    if (firstLineIndex == lineCount) {
      new import_obsidian4.Notice("Something wrong here");
      return;
    }
    let text = "";
    for (let i = 0; i <= firstLineIndex; i++) {
      text = text + this.editor.getLine(i) + "\n";
    }
    text = text + `tags: ${value}
`;
    for (let i = firstLineIndex + 1; i <= this.editor.lineCount(); i++) {
      text = text + this.editor.getLine(i) + "\n";
    }
    this.editor.setValue(text);
    cursor.line = oldLine + (oldLine <= firstLineIndex ? 0 : 1);
    cursor.ch = oldCh;
    this.editor.setCursor(cursor);
  }
  // Perform action on the selected suggestion.
  onChooseItem(choosenNoteType, evt) {
    if (!hasFrontMatter(this.file)) {
      this.addFrontMatterWithTag(choosenNoteType.type);
    } else {
      if (hasTags(this.file)) {
        ALL_TYPES.forEach((t) => {
          renameTag(this.file, t.type, choosenNoteType.type);
        });
      } else {
        this.addTagAssumingHasFrontMatter(choosenNoteType.type);
      }
    }
  }
};

// main.ts
var import_obsidian37 = require("obsidian");

// addCommentTagModal.ts
var import_obsidian5 = require("obsidian");
var ALL_FOOTNOTE_TYPES = [
  {
    type: "## Goal / Outcome : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u76EE\u7684 / \u6210\u679C\uFF1A"
  },
  {
    type: "## Actions : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u884C\u52D5\uFF1A"
  },
  {
    type: "## Event Thought / Exp / Notes : ",
    description: "",
    additionalInfo: "",
    chinese: ""
  },
  {
    type: "## References : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u53C3\u8003\uFF1A"
  },
  {
    type: "## Tips : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u8A23\u7AC5\uFF1A"
  },
  {
    type: "## Stats : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u7D71\u8A08\uFF1A"
  },
  {
    type: "## Steps : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u6B65\u9A5F\uFF1A"
  },
  {
    type: "## Reasons : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u539F\u56E0\uFF1A"
  },
  {
    type: "## Mistakes : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u932F\u8AA4\uFF1A"
  },
  {
    type: "## Benefits : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u597D\u8655\uFF1A"
  },
  {
    type: "## Lessons : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u6559\u8A13\uFF1A"
  },
  {
    type: "## Examples : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u4F8B\u5B50\uFF1A"
  },
  {
    type: "## Questions : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u554F\u984C\uFF1A"
  },
  {
    type: "## Personal Stories : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u500B\u4EBA\u6545\u4E8B\uFF1A"
  },
  {
    type: "## Frameworks : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u6846\u67B6\uFF1A"
  },
  {
    type: "## Observations : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u89C0\u5BDF\uFF1A"
  },
  {
    type: "## Rules : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u898F\u5247\uFF1A"
  },
  {
    type: "## Resources : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u8CC7\u6E90\uFF1A"
  },
  {
    type: "## Reflections : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u53CD\u601D\uFF1A"
  },
  {
    type: "## Tools : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u5DE5\u5177\uFF1A"
  },
  {
    type: "## Problems : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u554F\u984C\uFF1A"
  },
  {
    type: "## Solutions : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u89E3\u6C7A\u65B9\u6848\uFF1A"
  },
  {
    type: "## Context : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u60C5\u666F\uFF1A"
  },
  {
    type: "## Analogy : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u985E\u6BD4\uFF1A"
  },
  {
    type: "## Comparison : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u6BD4\u8F03\uFF1A"
  },
  {
    type: "## Application : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u61C9\u7528\uFF1A"
  },
  {
    type: "## Action : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u884C\u52D5\uFF1A"
  },
  {
    type: "## Counter Example : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u53CD\u4F8B\uFF1A"
  },
  {
    type: "## Why Important : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u70BA\u4EC0\u9EBC\u91CD\u8981\uFF1A"
  },
  {
    type: "## Target Auduience : ",
    description: "",
    additionalInfo: `This piece is about {Topic}.

It's written for {Audience} who have {Problem}.

By the time they finish, they will feel {Emotion}.

And they will {learn, have, be able to} do {Benefit}.

After reading this piece they will releaze {Point}, so they will {Next desired action, belief, or thought}.

The immediate next step the reader should take is {CTA}.`,
    chinese: "## \u76EE\u6A19\u53D7\u773E\uFF1A"
  },
  {
    type: "## Hooks : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u958B\u982D\uFF1A"
  },
  {
    type: "## Conclusions : ",
    description: "",
    additionalInfo: "",
    chinese: "## \u7D50\u8AD6\uFF1A"
  },
  {
    type: "## Raw : ",
    description: "",
    additionalInfo: "```\n\n```",
    chinese: ""
  },
  {
    type: "## GPT Summary : ",
    description: "",
    additionalInfo: "```\n\n```",
    chinese: ""
  },
  {
    type: "e/\u{1F4AB}",
    description: "Echo from",
    additionalInfo: "",
    chinese: ""
  },
  {
    type: "e/\u23EB",
    description: "Idea/Task/Action Compass - Up - North - Where does this idea come from / Reason of this idea? OR What is the goal/prereq of this task/action?",
    additionalInfo: "",
    chinese: ""
  },
  {
    type: "e/\u23EC",
    description: "Idea/Task/Action Compass - Down - Sorth - Where does the idea lead to / It can solve what problem? OR What is the result/next task/action of this task/action?",
    additionalInfo: "",
    chinese: ""
  },
  {
    type: "e/\u23E9\uFE0F",
    description: "Idea/Task/Action Compass - Right - East - What are similar / supporting idea? OR Same Goal Different Task/Action?",
    additionalInfo: "",
    chinese: ""
  },
  {
    type: "e/\u23EA",
    description: "Idea/Task/Action Compass - Left - West - What are oppose idea? OR Same Task/Action Different Goal?",
    additionalInfo: "",
    chinese: ""
  }
];
var AddFootnoteTagModal = class extends import_obsidian5.FuzzySuggestModal {
  constructor(app2, editor) {
    super(app2);
    this.editor = editor;
    this.keydownHandler = (event) => {
      if (event.ctrlKey && event.altKey && event.shiftKey && event.key === "Z") {
        this.close();
      } else if (event.ctrlKey && event.metaKey && event.shiftKey && event.key === "Z") {
        this.close();
      } else if (event.metaKey || event.ctrlKey) {
        const key = parseInt(event.key, 10);
        if (key >= 1 && key <= 9) {
          event.preventDefault();
          this.selectElement(key - 1);
        }
      }
    };
    document.addEventListener("keydown", this.keydownHandler);
  }
  selectElement(index) {
    const elements = this.resultContainerEl.querySelectorAll(".suggestion-item");
    if (elements.length > index) {
      const element = elements[index];
      element.click();
    }
  }
  onClose() {
    super.onClose();
    document.removeEventListener("keydown", this.keydownHandler);
  }
  getItems() {
    return ALL_FOOTNOTE_TYPES;
  }
  getItemText(noteType) {
    return noteType.type + " " + noteType.description;
  }
  static removeTag(line) {
    ALL_FOOTNOTE_TYPES.forEach((noteType) => line = line.replace(`#${noteType.type} `, ""));
    return line;
  }
  // Renders each suggestion item.
  renderSuggestion(choosenNoteTypeMatch, el) {
    const noteType = choosenNoteTypeMatch.item;
    const index = this.resultContainerEl.querySelectorAll(".suggestion-item").length;
    const itemIndex = index < 10 ? index + ". " : "    ";
    el.createEl("div", { text: itemIndex + noteType.type });
    if (noteType.description.length > 0) {
      el.createEl("small", { text: "     " + noteType.description });
    }
  }
  containsType(line) {
    return ALL_FOOTNOTE_TYPES.filter((noteType) => line.contains(noteType.type)).length > 0;
  }
  // Perform action on the selected suggestion.
  onChooseItem(choosenNoteType, evt) {
    const selection = this.editor.getSelection();
    let replacedStr = choosenNoteType.type.startsWith("## ") ? `${choosenNoteType.type}

` : `#${choosenNoteType.type} `;
    if (choosenNoteType.additionalInfo.length > 0) {
      replacedStr = replacedStr + choosenNoteType.additionalInfo + "\n\n";
    }
    if (selection.length != 0) {
      this.editor.replaceSelection(replacedStr);
    } else {
      const cursor = this.editor.getCursor();
      this.editor.replaceRange(replacedStr, cursor);
      cursor.ch = cursor.ch + replacedStr.length;
      this.editor.setCursor(cursor);
    }
  }
};

// addTaskTagModal.ts
var import_obsidian6 = require("obsidian");
var ALL_TYPES2 = [
  /*
  {
    type: "n",
    cursor: "c",
    description: "N Cursor"
  },
  */
  {
    type: "n",
    cursor: "b",
    description: "N Beginning of line"
  },
  /*
  {
    type: "n",
    cursor: "e",
    description: "N End of line"
  },
  {
    type: "w",
    cursor: "c",
    description: "W Cursor"
  },
  */
  {
    type: "w",
    cursor: "b",
    description: "W Beginning of line"
  }
  /*
  {
    type: "w",
    cursor: "e",
    description: "W End of line"
  }
  */
];
var AddTaskTagModal = class extends import_obsidian6.FuzzySuggestModal {
  constructor(app2, editor, taskType) {
    super(app2);
    this.editor = editor;
    this.taskType = taskType;
  }
  getItems() {
    return ALL_TYPES2;
  }
  getItemText(noteType) {
    return noteType.type + noteType.cursor;
  }
  // Renders each suggestion item.
  renderSuggestion(choosenNoteTypeMatch, el) {
    const noteType = choosenNoteTypeMatch.item;
    el.createEl("div", { text: noteType.type + " " + noteType.cursor });
    el.createEl("small", { text: noteType.description });
  }
  containsType(line) {
    return ALL_TYPES2.filter((noteType) => line.contains(noteType.type)).length > 0;
  }
  // Perform action on the selected suggestion.
  onChooseItem(choosenNoteType, evt) {
    const cursor = this.editor.getCursor();
    const line = this.editor.getLine(cursor.line);
    if (choosenNoteType.cursor == "c") {
      this.editor.replaceRange(`${line.charAt(cursor.ch - 1) != " " ? " " : ""}#${choosenNoteType.type}${this.taskType} `, cursor);
      cursor.ch = cursor.ch + 4 + (line.charAt(cursor.ch - 1) != " " ? 1 : 0);
      this.editor.setCursor(cursor);
    } else if (choosenNoteType.cursor == "b") {
      let modifiedLine = line;
      if (/^\t*- /.test(line)) {
        modifiedLine = line.replace(/^(\t*- )/, `$1#${choosenNoteType.type}${this.taskType} `);
      } else if (/^\t*\d+\. /.test(line)) {
        modifiedLine = line.replace(/^(\t*\d+\. )/, `$1${choosenNoteType.type}${this.taskType} `);
      } else {
        modifiedLine = line.replace(/^/, `#${choosenNoteType.type}${this.taskType} `);
      }
      this.editor.setLine(cursor.line, modifiedLine);
      cursor.ch = cursor.ch + 4;
      this.editor.setCursor(cursor);
    } else if (choosenNoteType.cursor == "e") {
      let modifiedLine = line.replace(/$/, ` #${choosenNoteType.type}${this.taskType}`);
      this.editor.setLine(cursor.line, modifiedLine);
      cursor.ch = cursor.ch;
      this.editor.setCursor(cursor);
    }
  }
};

// ThreadsToImagesModal.ts
var import_obsidian7 = require("obsidian");
var ALL_TYPES3 = [
  {
    type: "first-page",
    description: "first page"
  },
  {
    type: "with-header",
    description: "with header"
  },
  {
    type: "without-header",
    description: "without header"
  },
  {
    type: "custom-font-size",
    description: "custom font size"
  }
];
var ThreadsToImagesModal = class extends import_obsidian7.FuzzySuggestModal {
  constructor(app2, threadSegment) {
    super(app2);
    this.threadSegment = threadSegment;
  }
  getItems() {
    return ALL_TYPES3;
  }
  getItemText(noteType) {
    return noteType.type;
  }
  // Renders each suggestion item.
  renderSuggestion(choosenNoteTypeMatch, el) {
    const noteType = choosenNoteTypeMatch.item;
    el.createEl("div", { text: noteType.type });
    el.createEl("small", { text: noteType.description });
  }
  containsType(line) {
    return ALL_TYPES3.filter((noteType) => line.contains(noteType.type)).length > 0;
  }
  // Perform action on the selected suggestion.
  onChooseItem(choosenNoteType, evt) {
    let param = choosenNoteType.type;
    let s = this.threadSegment.toString();
    navigator.clipboard.writeText(this.threadSegment.toString()).then(function() {
      new import_obsidian7.Notice(`Copied
\`\`\`
${s}\`\`\`
to clipboard!`);
      window.open(`shortcuts://run-shortcut?name=Threads%20to%20image&input=text&text=${param}&x-success=obsidian://&x-cancel=obsidian://&x-error=obsidian://`);
    }, function(error) {
      new import_obsidian7.Notice(`error when copy to clipboard!`);
    });
  }
};

// copyOrMoveToNewNoteModal.ts
var import_obsidian8 = require("obsidian");
var ALL_TYPES4 = [
  {
    type: "copy",
    description: "Copy"
  },
  {
    type: "move",
    description: "Move"
  }
];
var CopyOrMoveToNewNoteModal = class extends import_obsidian8.FuzzySuggestModal {
  constructor(app2, editor) {
    super(app2);
    this.editor = editor;
    this.setPlaceholder(`Copy or move selection to new note?`);
  }
  getItems() {
    return ALL_TYPES4;
  }
  getItemText(noteType) {
    return noteType.type;
  }
  // Renders each suggestion item.
  renderSuggestion(choosenNoteTypeMatch, el) {
    const noteType = choosenNoteTypeMatch.item;
    el.createEl("div", { text: noteType.type });
    el.createEl("small", { text: noteType.description });
  }
  containsType(line) {
    return ALL_TYPES4.filter((noteType) => line.contains(noteType.type)).length > 0;
  }
  // Perform action on the selected suggestion.
  async onChooseItem(choosenOperation, evt) {
    const selection = this.editor.getSelection();
    const line = this.editor.getCursor().line;
    const textToCopyOrMove = selection.length == 0 ? this.editor.getLine(line) : selection;
    const newFileName = "I/United Push.md";
    await this.createOrAppendFile(newFileName, textToCopyOrMove);
    if (choosenOperation.type == "move") {
      if (selection.length != 0) {
        this.editor.replaceSelection("");
      } else {
        let content = "";
        for (let i = 0; i < this.editor.lineCount(); i++) {
          if (i != line) {
            content += this.editor.getLine(i) + "\n";
          }
        }
        this.editor.setValue(content);
      }
    }
    const { vault } = this.app;
    const { workspace } = this.app;
    const mode = this.app.vault.getConfig("defaultViewMode");
    const leaf = workspace.getLeaf(false);
    await leaf.openFile(vault.getAbstractFileByPath(newFileName), { active: true });
  }
  async createOrAppendFile(filePath, note2) {
    const { vault } = this.app;
    const fileExists = await vault.adapter.exists(filePath);
    if (fileExists) {
      await this.appendFile(vault, filePath, note2);
    } else {
      await vault.create(filePath, "---\ntag: b/n/s\n---\n\n" + note2);
    }
    return filePath;
  }
  async appendFile(vault, filePath, note2) {
    let existingContent = await vault.adapter.read(filePath);
    if (existingContent.length > 0) {
      existingContent = existingContent + "\r\r";
    }
    await vault.adapter.write(filePath, existingContent + note2);
  }
};

// clipboardPasteModal.ts
var import_obsidian9 = require("obsidian");
var ClipboardPasteModal = class extends import_obsidian9.FuzzySuggestModal {
  constructor(app2, editor, clipboardContent) {
    super(app2);
    this.editor = editor;
    this.clipboardContent = clipboardContent;
    this.setPlaceholder(`Which clipboard content do you want to paste?`);
    this.keydownHandler = (event) => {
      if (event.metaKey && event.shiftKey && event.key === "V") {
        this.close();
      } else if (event.metaKey || event.ctrlKey) {
        const key = parseInt(event.key, 10);
        if (key >= 1 && key <= 9) {
          event.preventDefault();
          this.selectElement(key - 1);
        }
      }
    };
    document.addEventListener("keydown", this.keydownHandler);
  }
  onClose() {
    super.onClose();
    document.removeEventListener("keydown", this.keydownHandler);
  }
  selectElement(index) {
    const elements = this.resultContainerEl.querySelectorAll(".suggestion-item");
    if (elements.length > index) {
      const element = elements[index];
      element.click();
    }
  }
  getItems() {
    return this.clipboardContent.slice().reverse();
  }
  getItemText(item) {
    return item;
  }
  // Renders each suggestion item.
  renderSuggestion(i, el) {
    const item = i.item;
    const index = this.resultContainerEl.querySelectorAll(".suggestion-item").length;
    const itemIndex = index < 10 ? index + ". " : "    ";
    el.createEl("div", { text: itemIndex + item.replace(/\n/gm, "").substring(0, 100) });
  }
  // Perform action on the selected suggestion.
  onChooseItem(selectedContent, evt) {
    const index = this.clipboardContent.indexOf(selectedContent, 0);
    if (index > -1) {
      this.clipboardContent.remove(selectedContent);
    }
    this.clipboardContent.push(selectedContent);
    const selection = this.editor.getSelection();
    const replacedStr = selectedContent;
    if (selection.length != 0) {
      this.editor.replaceSelection(replacedStr);
    } else {
      const cursor = this.editor.getCursor();
      this.editor.replaceRange(replacedStr, cursor);
      cursor.ch = cursor.ch + replacedStr.length;
      this.editor.setCursor(cursor);
    }
  }
};

// openPlaygroundModal.ts
var import_obsidian10 = require("obsidian");
var OpenPlaygroundModal = class extends import_obsidian10.FuzzySuggestModal {
  constructor(app2) {
    super(app2);
    this.removeExistingContent = "Remove playground content";
    this.notRemoveExistingContent = "Not remove existing playground content";
    this.playgroundMd = "I/Playground.md";
    this.options = [this.removeExistingContent, this.notRemoveExistingContent];
  }
  getItems() {
    return this.options.reverse();
  }
  getItemText(item) {
    return item;
  }
  // Renders each suggestion item.
  renderSuggestion(i, el) {
    const item = i.item;
    el.createEl("div", { text: item });
  }
  // Perform action on the selected suggestion.
  async onChooseItem(selectedContent, evt) {
    const choosenOption = selectedContent;
    const { vault } = this.app;
    const { workspace } = this.app;
    const leaf = workspace.getLeaf(false);
    Promise.resolve().then(() => {
      if (vault.getAbstractFileByPath(this.playgroundMd) == null) {
        return vault.create(this.playgroundMd, "");
      }
      return vault.getAbstractFileByPath(this.playgroundMd);
    }).then((tFile) => {
      if (this.removeExistingContent === choosenOption) {
        return vault.modify(tFile, "");
      }
      return Promise.resolve();
    }).then(() => {
      return leaf.openFile(vault.getAbstractFileByPath(this.playgroundMd), { active: true });
    });
  }
};

// threadsToBlogModal.ts
var import_obsidian11 = require("obsidian");
var ThreadsToBlogModal = class extends import_obsidian11.FuzzySuggestModal {
  constructor(app2, editor, view) {
    super(app2);
    this.toNewNote = "To New Note";
    this.toClipboard = "To Clipboard";
    this.options = [this.toNewNote, this.toClipboard];
    this.editor = editor;
    this.view = view;
    this.setPlaceholder(`Putting Threads content to Blog notes. Which option do you want to proceed?`);
  }
  getItems() {
    return this.options;
  }
  getItemText(item) {
    return item;
  }
  // Renders each suggestion item.
  renderSuggestion(i, el) {
    const item = i.item;
    el.createEl("div", { text: item });
  }
  // Perform action on the selected suggestion.
  onChooseItem(selectedContent, evt) {
    const choosenOption = selectedContent;
    const lineCount = this.editor.lineCount();
    let tagLineNumber = null;
    let metadataLineCount = 0;
    let text = "";
    for (let i = 0; i < lineCount; i++) {
      let line = this.editor.getLine(i);
      if (!line.trim().startsWith("%%") || !line.trim().endsWith("%%")) {
        let modifiedLine = line.replace("\u{1F9F5} ", "# ").replace("\u3010", "").replace("\u3011", "").replace("\u{1F447}", "");
        if (modifiedLine == "---") {
          metadataLineCount++;
          if (metadataLineCount > 2) {
            if (metadataLineCount == 3) {
              modifiedLine = modifiedLine.replace("---", "");
            } else if (metadataLineCount == 4) {
              modifiedLine = modifiedLine.replace("---", "<!--more-->\n\n**\u76EE\u9304\uFF1A**\n\n* Table of Content\n{:toc}\n\n## .");
            } else {
              modifiedLine = modifiedLine.replace("---", "## .");
            }
          }
        }
        if (metadataLineCount == 1 || metadataLineCount == 2) {
          modifiedLine = modifiedLine.replace("c/t/p", "c/b/d");
          modifiedLine = modifiedLine.replace("c/t/t", "c/b/d");
          modifiedLine = modifiedLine.replace("c/t/r", "c/b/d");
        }
        if (/^!\[.*\]\(.*\)/.test(modifiedLine.trim())) {
          if (!modifiedLine.contains("https://roulesophy.github.io")) {
            modifiedLine = modifiedLine.replace(/!\[([^\[\]\(\)]+)\]\(([^\[\]\(\)]+)\)/g, "$2");
          }
        }
        text = text + modifiedLine + "\n";
      }
    }
    text = text.replace(/## .\n+## [Rr]eferences?[\:]?([\n]*.*)*$/, "");
    text += `

---

#nl generate summary for meta description below:



`;
    text += `---

## References:

- Thread post 1: [[${this.view.file.basename}]]
- Blog link: 
`;
    const { vault } = this.app;
    if (this.toNewNote === choosenOption) {
      const { vault: vault2 } = this.app;
      const path = this.view.file.path;
      const newPath = path.match(/.\/Threads \d\d\d\d\d\d\d\d/) ? path.replace(/(.\/)Threads \d\d\d\d\d\d\d\d/, "$1Blog ") : path.replace(/(.\/)/, "$1Blog ");
      const { workspace } = this.app;
      const leaf = workspace.getLeaf(false);
      Promise.resolve().then(() => {
        return vault2.adapter.exists(newPath);
      }).then((fileExists) => {
        if (fileExists) {
          new import_obsidian11.Notice(`Will not proceed. Blog post "${newPath}" already exist.`);
          return Promise.reject("Blog post exist");
        }
        return vault2.create(newPath, text);
      }).then(
        (tFile) => {
          return leaf.openFile(tFile, { active: true });
        },
        (rejectReason) => {
        }
      );
    }
    if (this.toClipboard === choosenOption) {
      navigator.clipboard.writeText(text).then(function() {
        new import_obsidian11.Notice(`Copied blog content to clipboard!`);
      }, function(error) {
        new import_obsidian11.Notice(`error when copy to clipboard!`);
      });
    }
  }
};

// clipboardRemovalModal.ts
var import_obsidian12 = require("obsidian");
var ClipboardRemovalModal = class extends import_obsidian12.FuzzySuggestModal {
  constructor(app2, editor, clipboardContent) {
    super(app2);
    this.REMOVE_ALL = "REMOVE ALL";
    this.editor = editor;
    this.clipboardContent = clipboardContent;
    this.setPlaceholder(`Which clipboard content do you want to remove?`);
  }
  getItems() {
    return [...[this.REMOVE_ALL], ...this.clipboardContent.slice().reverse()];
  }
  getItemText(item) {
    return item;
  }
  // Renders each suggestion item.
  renderSuggestion(i, el) {
    const item = i.item;
    el.createEl("div", { text: "\u2022 " + item.replace(/\n/gm, "").substring(0, 100) });
  }
  // Perform action on the selected suggestion.
  onChooseItem(selectedContent, evt) {
    if (selectedContent === this.REMOVE_ALL) {
      new import_obsidian12.Notice("haha");
      while (this.clipboardContent.length > 0) {
        this.clipboardContent.pop();
      }
    } else {
      const index = this.clipboardContent.indexOf(selectedContent, 0);
      if (index > -1) {
        this.clipboardContent.splice(index, 1);
      }
    }
  }
};

// tagSearchModal.ts
var import_obsidian14 = require("obsidian");

// selfutil/getAllNoteTags.ts
var import_obsidian13 = require("obsidian");
function getAllNoteTags(app2) {
  return getAllTagsWithFilter(app2, (tag2) => /^#[a-z]\/[a-z]\/[a-z]$/.test(tag2));
}
function getAllTagsWithFilter(app2, filter) {
  var _a;
  const files = app2.vault.getMarkdownFiles();
  const items = [];
  for (const file of files) {
    const cache = app2.metadataCache.getCache(file.path);
    if (cache === null) {
      continue;
    }
    (_a = (0, import_obsidian13.getAllTags)(cache)) == null ? void 0 : _a.forEach((tag2) => {
      if (filter == null || filter(tag2)) {
        const layerOfTag = getLayersOfTag(tag2);
        for (const layer of layerOfTag) {
          if (!items.includes(layer)) {
            items.push(layer);
          }
        }
      }
    });
  }
  return items.sort((a, b) => a.localeCompare(b));
}
function getAllTaskMixedWithActionTagsWithFilter(app2) {
  const files = app2.vault.getMarkdownFiles();
  const taskTags = /* @__PURE__ */ new Set();
  const nonTaskTags = /* @__PURE__ */ new Set();
  const taskAndActionTags = /* @__PURE__ */ new Set();
  for (const file of files) {
    const cache = app2.metadataCache.getCache(file.path);
    if (cache === null) {
      continue;
    }
    const allTags = (0, import_obsidian13.getAllTags)(cache);
    if (!allTags) {
      continue;
    }
    const tts = /* @__PURE__ */ new Set();
    const ats = /* @__PURE__ */ new Set();
    allTags.forEach((tag2) => {
      if (/^#[a-z]\/[a-z]\/[a-z]$/.test(tag2)) {
        const layerOfTag = getLayersOfTag(tag2);
        for (const layer of layerOfTag) {
          tts.add(layer);
        }
      } else {
        ats.add(tag2);
      }
    });
    for (const tt of tts) {
      taskTags.add(tt);
      for (const at of ats) {
        const tag2 = tt + " " + at;
        taskAndActionTags.add(tag2);
      }
    }
    for (const at of ats) {
      nonTaskTags.add(at);
    }
  }
  return [
    ...Array.from(nonTaskTags).sort((a, b) => a.localeCompare(b)),
    ...Array.from(taskTags).sort((a, b) => a.localeCompare(b)),
    ...Array.from(taskAndActionTags).sort((a, b) => a.localeCompare(b))
  ];
}
function getLayersOfTag(tag2) {
  const layers = [];
  const tagSplit = tag2.split("/");
  let tagLayer = tagSplit[0];
  layers.push(tagLayer);
  for (const tagPart of tagSplit.slice(1, tagSplit.length)) {
    tagLayer += "/" + tagPart;
    layers.push(tagLayer);
  }
  return layers;
}

// tagSearchModal.ts
var TagSearchModal = class extends import_obsidian14.SuggestModal {
  constructor(app2, search, plugin) {
    super(app2);
    this.app = app2;
    this.search = search;
    this.search = search;
    this.keydownHandler = (event) => {
      if (event.ctrlKey && event.altKey && event.shiftKey && event.key === "S") {
        this.close();
      } else if (event.ctrlKey && event.metaKey && event.shiftKey && event.key === "S") {
        this.close();
      } else if (event.metaKey || event.ctrlKey) {
        const key = parseInt(event.key, 10);
        if (key >= 1 && key <= 9) {
          event.preventDefault();
          this.selectElement(key - 1);
        }
      }
    };
    document.addEventListener("keydown", this.keydownHandler);
    this.plugin = plugin;
  }
  selectElement(index) {
    const elements = this.resultContainerEl.querySelectorAll(".suggestion-item");
    if (elements.length > index) {
      const element = elements[index];
      element.click();
    }
  }
  getItems() {
    return getAllTaskMixedWithActionTagsWithFilter(this.app);
  }
  getItemText(item) {
    return item;
  }
  //onChooseSuggestion(item: string, evt: MouseEvent | KeyboardEvent) {
  //	throw new Error("Method not implemented.");
  //}
  //async onChooseItem(item: string, evt: MouseEvent | KeyboardEvent): void {
  async onChooseSuggestion(item, evt) {
    this.plugin.notesTypeView.notesTypeTag = item;
    this.plugin.activateNoteListView();
    this.plugin.notesTypeView.redraw();
  }
  onClose() {
    super.onClose();
    document.removeEventListener("keydown", this.keydownHandler);
  }
  //getSuggestions(query: string): string[] | Promise<string[]> {
  //	throw new Error("Method not implemented.");
  //}
  renderSuggestion(tag2, el) {
    const noteType = tag2;
    const index = this.resultContainerEl.querySelectorAll(".suggestion-item").length;
    const itemIndex = index < 10 ? index + ". " : "    ";
    el.createEl("div", { text: itemIndex + noteType });
    const taskPlusAction = noteType.split(" ");
    const description = getNoteDescriptionByType(taskPlusAction[0]);
    if (description !== "") {
      el.createEl("small", { text: "     " + description + (taskPlusAction.length > 1 ? " - " + taskPlusAction[1] : "") });
    }
  }
  getSuggestions(query) {
    const tags = this.getItems();
    const lowerQuery = query.toLowerCase();
    return tags.filter((tag2) => tag2.replace(/ /g, "").replace(/\//g, "").replace(/#/g, "").toLowerCase().includes(lowerQuery.replace(/ /g, "").replace(/\//g, "").replace(/#/g, "")));
  }
};

// main.ts
var import_obsidian38 = require("obsidian");
var import_moment3 = __toESM(require_moment());

// addTextToNotesFromSpecificTagModal.ts
var import_obsidian17 = require("obsidian");

// selfutil/addlinktonotes.ts
var import_obsidian15 = require("obsidian");
async function addTextToNotes(textToAdd, toPath, app2, insertFromBeginning, headingLine) {
  const vault = this.app.vault;
  const workspace = this.app.workspace;
  const leaf = workspace.getLeaf(false);
  const tFile = vault.getAbstractFileByPath(toPath);
  const link = textToAdd;
  Promise.resolve().then(() => {
    return leaf.openFile(tFile, { active: true });
  }).then(() => {
    return vault.read(tFile);
  }).then((value) => {
    return vault.modify(tFile, value);
  }).then(() => {
    const markdownView = app2.workspace.getActiveViewOfType(import_obsidian15.MarkdownView);
    const editor = markdownView == null ? void 0 : markdownView.editor;
    const value = markdownView == null ? void 0 : markdownView.getViewData();
    if (markdownView == null || editor == null || value == null) {
      const errorReason = `editor or value ${toPath} not exist. Aborting...`;
      return Promise.reject(errorReason);
    }
    console.log(editor.getValue());
    const trimmedLink = link.trim().replace(/^- /, "");
    if (editor.getValue().includes(trimmedLink)) {
      const errorReason = `Link ${trimmedLink} already exists in ${toPath}!`;
      new import_obsidian15.Notice(errorReason);
      for (let i = 0; i < editor.lineCount(); i++) {
        if (editor.getLine(i).includes(trimmedLink)) {
          editor.setCursor({ line: i, ch: 0 });
          editor.scrollIntoView({ from: { line: i, ch: 0 }, to: { line: i, ch: 0 } }, true);
          break;
        }
      }
    } else {
      if (headingLine < 0) {
        const newValue = insertFromBeginning ? getNoteValueInsertingTextFromStartOfNotes(value, link) : getNoteValueInsertingTextFromEndOfNotes(value, link);
        markdownView.setViewData(newValue, false);
        editor.setValue(newValue);
        if (insertFromBeginning) {
          const frontMatterRegex = /^(---\n[\s\S]*?\n---\n)/gm;
          if (frontMatterRegex.test(value)) {
            const lineAfterFrontMatter = getLineAfterFrontMatter(value);
            editor.setCursor({ line: lineAfterFrontMatter, ch: 0 });
            editor.scrollIntoView({ from: { line: lineAfterFrontMatter, ch: 0 }, to: { line: lineAfterFrontMatter, ch: 0 } }, true);
          } else {
            editor.setCursor({ line: 0, ch: 0 });
            editor.scrollIntoView({ from: { line: 0, ch: 0 }, to: { line: 0, ch: 0 } }, true);
          }
        } else {
          const lastLineNum = editor.lineCount() - 1;
          editor.setCursor({ line: lastLineNum, ch: 0 });
          editor.scrollIntoView({ from: { line: lastLineNum, ch: 0 }, to: { line: lastLineNum, ch: 0 } }, true);
        }
        new import_obsidian15.Notice(`Added link to ${insertFromBeginning ? "beginning" : "end"} of ${toPath}!`);
      } else {
        const newValue = insertFromBeginning ? getNoteValueInsertingTextFromStartOfNotesHeading(value, link, headingLine) : getNoteValueInsertingTextFromEndOfNotesHeading(value, link, headingLine);
        markdownView.setViewData(newValue.value, false);
        editor.setValue(newValue.value);
        editor.setCursor({ line: newValue.line, ch: 0 });
        editor.scrollIntoView({ from: { line: newValue.line, ch: 0 }, to: { line: newValue.line, ch: 0 } }, true);
        new import_obsidian15.Notice(`Added link to ${insertFromBeginning ? "beginning" : "end"} of Section of ${toPath}!`);
      }
    }
    return Promise.resolve();
  }).catch((reason) => {
    new import_obsidian15.Notice(reason);
  });
}
function getLineAfterFrontMatter(value) {
  const values = value.split("\n");
  let fmCount = 0;
  const lineNum = values.length;
  for (let i = 0; i < lineNum; i++) {
    if (values[i] === "---") {
      fmCount++;
    }
    if (fmCount == 2) {
      return Math.min(i + 1, lineNum - 1);
    }
  }
  return lineNum - 1;
}
function getNoteValueInsertingTextFromStartOfNotes(value, text) {
  const frontMatterRegex = /^(---\n[\s\S]*?\n---\n)/gm;
  if (frontMatterRegex.test(value)) {
    return value.replace(frontMatterRegex, "$1" + text + "\n");
  } else {
    return text + "\n" + value;
  }
}
function getNoteValueInsertingTextFromEndOfNotes(value, text) {
  return value + "\n" + text;
}
function getNoteValueInsertingTextFromStartOfNotesHeading(value, text, headingLine) {
  const values = value.split("\n");
  let result = "";
  let addedLine = -1;
  let isAddedLine = false;
  for (let i = 0; i < values.length; i++) {
    if (i <= headingLine) {
      result += values[i] + "\n";
    } else if (values[i].trim() === "") {
      result += values[i] + "\n";
    } else if (!isAddedLine) {
      result += text + "\n" + values[i] + "\n";
      addedLine = i;
      isAddedLine = true;
    } else {
      result += values[i] + "\n";
    }
  }
  return { value: result.replace(/\n$/, ""), line: isAddedLine ? addedLine : headingLine };
}
function getNoteValueInsertingTextFromEndOfNotesHeading(value, text, headingLine) {
  const values = value.split("\n");
  let addedLine = headingLine;
  let endLineOfSection = values.length - 1;
  for (let i = headingLine; i < values.length; i++) {
    if (i === headingLine) {
    } else {
      if (/^[#]{1,6} /.test(values[i])) {
        endLineOfSection = i - 1;
        break;
      }
    }
  }
  let finish = false;
  for (let i = endLineOfSection; i > headingLine && !finish; i--) {
    if (values[i].trim() !== "") {
      addedLine = i;
      finish = true;
    }
  }
  let result = "";
  for (let i = 0; i < values.length; i++) {
    if (i != addedLine) {
      result += values[i] + "\n";
    } else {
      result += values[i] + "\n" + text + "\n";
    }
  }
  return { value: result.replace(/\n$/, ""), line: addedLine + 1 };
}

// selfutil/findNotesFromTag.ts
var import_obsidian16 = require("obsidian");
function filesWhereTagIsUsed(findTag) {
  const filesList = [];
  for (const filePath of locationsWhereTagIsUsed(findTag)) {
    if (!filesList.includes(filePath)) {
      filesList.push(filePath);
    }
  }
  return filesList.sort((a, b) => a.localeCompare(b));
}
function filesHeadersWhereTagIsUsed(app2, findTag) {
  const fileList = filesWhereTagIsUsed(findTag);
  const resultList = [];
  for (const filePath of fileList) {
    const file = app2.vault.getAbstractFileByPath(filePath);
    const fileCache = app2.metadataCache.getFileCache(file);
    if (!fileCache) {
    } else if (!fileCache.headings) {
    } else {
      fileCache.headings.forEach((h) => {
        resultList.push({ notePath: filePath, header: "#" + h.heading, startLine: h.position.start.line, noteType: null });
      });
    }
  }
  return resultList;
}
function locationsWhereTagIsUsed(findTag) {
  const oApp = app;
  const results = [];
  for (const file of oApp.vault.getMarkdownFiles()) {
    const cache = oApp.metadataCache.getFileCache(file);
    if (cache != null && cache.tags) {
      for (const tag2 of cache.tags) {
        if (findTag === tag2.tag) {
          results.push(file.path);
        }
      }
    }
    if (cache != null && cache.frontmatter) {
      const fmtags = ((0, import_obsidian16.parseFrontMatterTags)(cache.frontmatter) || []).filter((tag2) => findTag == tag2 || tag2.startsWith(findTag + "/"));
      if (fmtags.length) {
        results.push(file.path);
      }
      const fmtags2 = ((0, import_obsidian16.parseFrontMatterAliases)(cache.frontmatter) || []).filter((tag2) => findTag == tag2 || tag2.startsWith(findTag + "/"));
      if (fmtags2.length) {
        results.push(file.path);
      }
    }
  }
  return results;
}

// selfutil/noteWithHeader.ts
var SEPARATOR = "-------------------------";

// addTextToNotesFromSpecificTagModal.ts
var BACK_TO_SELECT_TAG = "Back to select tag";
var AddTextToNotesFromSpecificTagModal = class extends import_obsidian17.FuzzySuggestModal {
  constructor(app2, linkToAdd, tagToFind, description, insertFromBeginning, postAction) {
    super(app2);
    this.linkToAdd = linkToAdd;
    this.tagToFind = tagToFind;
    this.insertFromBeginning = insertFromBeginning;
    this.description = description;
    this.modalValueSelected = false;
    this.postAction = postAction;
    this.setPlaceholder(`Which notes with tag ${tagToFind} do you want to ${description} to ${insertFromBeginning ? "beginning" : "end"} of the notes?`);
    this.setInstructions([
      {
        command: "",
        purpose: `Which notes with tag ${tagToFind} do you want to ${description} to ${insertFromBeginning ? "beginning" : "end"} of the notes?`
      }
    ]);
    this.keydownHandler = (event) => {
      if (event.metaKey || event.ctrlKey) {
        const key = parseInt(event.key, 10);
        if (key >= 1 && key <= 9) {
          event.preventDefault();
          this.selectElement(key - 1);
        }
      }
    };
    document.addEventListener("keydown", this.keydownHandler);
  }
  selectElement(index) {
    const elements = this.resultContainerEl.querySelectorAll(".suggestion-item");
    if (elements.length > index) {
      const element = elements[index];
      element.click();
    }
  }
  onClose() {
    super.onClose();
    document.removeEventListener("keydown", this.keydownHandler);
    if (!this.modalValueSelected) {
      this.postAction();
    }
  }
  getItems() {
    const filePaths = filesWhereTagIsUsed(this.tagToFind);
    const filePathsForHeader = filesHeadersWhereTagIsUsed(this.app, this.tagToFind);
    return [
      ...[{ notePath: BACK_TO_SELECT_TAG, header: "", startLine: -1, noteType: null }],
      ...filePaths.map((f) => {
        return { notePath: f, header: "", startLine: -1, noteType: getNoteType(f) };
      }),
      ...[{ notePath: SEPARATOR, header: "", startLine: 0, noteType: null }],
      ...filePathsForHeader
    ];
  }
  getItemText(path) {
    return path.notePath + path.header;
  }
  // Renders each suggestion item.
  renderSuggestion(path, el) {
    const item = path.item;
    const pathItem = item.notePath;
    let prefix = item.noteType ? item.noteType.prefix ? item.noteType.prefix + " " : "" : "";
    const index = this.resultContainerEl.querySelectorAll(".suggestion-item").length;
    const itemIndex = index < 10 ? index + ". " : "    ";
    el.createEl("div", { text: itemIndex + prefix + item.notePath });
    if (path.item.header.length > 0) {
      el.createEl("small", { text: "     " + item.header });
    }
  }
  // Perform action on the selected suggestion.
  async onChooseItem(path, evt) {
    this.modalValueSelected = true;
    if (BACK_TO_SELECT_TAG == path.notePath) {
      new AddTextToNotesModal(this.app, this.linkToAdd, this.description, this.insertFromBeginning, this.postAction).open();
    } else if (SEPARATOR === path.notePath) {
    } else {
      await addTextToNotes(this.linkToAdd, path.notePath, this.app, this.insertFromBeginning, path.startLine);
    }
  }
};

// addTextToNotesModal.ts
var import_obsidian19 = require("obsidian");

// selfutil/getAllHeaders.ts
function getAllHeaders(app2, fileList) {
  const resultList = [];
  for (const filePath of fileList) {
    const file = app2.vault.getAbstractFileByPath(filePath);
    const fileCache = app2.metadataCache.getFileCache(file);
    if (!fileCache) {
    } else if (!fileCache.headings) {
    } else {
      fileCache.headings.forEach((h) => {
        resultList.push({ notePath: filePath, header: "#" + h.heading, startLine: h.position.start.line, noteType: null });
      });
    }
  }
  return resultList;
}

// selfutil/getRecentNotes.ts
var import_obsidian18 = require("obsidian");
function getRecentNotes(app2, limit) {
  const recentViewedNotes = app2.workspace.getLastOpenFiles().filter((path) => app2.vault.getAbstractFileByPath(path) !== null);
  return recentViewedNotes.slice(0, Math.min(limit, recentViewedNotes.length));
}
function getRecentNotesWithInfo(app2, limit) {
  const recentViewedPaths = app2.workspace.getLastOpenFiles();
  const now = Date.now();
  const noteInfoMap = /* @__PURE__ */ new Map();
  recentViewedPaths.forEach((path, index) => {
    const file = app2.vault.getAbstractFileByPath(path);
    if (file && file instanceof import_obsidian18.TFile) {
      const lastViewedEstimate = now - index * 6e4;
      noteInfoMap.set(path, {
        path,
        mtime: file.stat.mtime,
        lastViewed: lastViewedEstimate
      });
    }
  });
  const allFiles = app2.vault.getMarkdownFiles();
  allFiles.forEach((file) => {
    if (!noteInfoMap.has(file.path) && file.stat.mtime > now - 31 * 24 * 60 * 60 * 1e3) {
      noteInfoMap.set(file.path, {
        path: file.path,
        mtime: file.stat.mtime,
        lastViewed: 0
        // Not recently viewed, rely on mtime for sorting
      });
    }
  });
  const result = Array.from(noteInfoMap.values()).sort((a, b) => {
    const scoreA = Math.max(a.lastViewed, a.mtime);
    const scoreB = Math.max(b.lastViewed, b.mtime);
    return scoreB - scoreA;
  });
  return result.slice(0, Math.min(limit, result.length));
}
function getAllNotes(app2) {
  const files = app2.vault.getMarkdownFiles();
  const allNotes = files.map((file) => file.path);
  return allNotes;
}
function getAllNotesWithoutMetadata(app2) {
  let getAllNotesWithoutMetadata2 = [];
  const files = app2.vault.getMarkdownFiles();
  files.forEach((file) => {
    const fileCache = this.app.metadataCache.getFileCache(file);
    if (fileCache) {
      const frontmatter = fileCache.frontmatter;
      if (!frontmatter) {
        getAllNotesWithoutMetadata2.push(file.path);
      }
    }
  });
  return getAllNotesWithoutMetadata2;
}

// addTextToNotesModal.ts
var AddTextToNotesModal = class extends import_obsidian19.FuzzySuggestModal {
  constructor(app2, linkToAdd, description, insertFromBeginning, postAction) {
    super(app2);
    this.linkToAdd = linkToAdd;
    this.description = description;
    this.insertFromBeginning = insertFromBeginning;
    this.modalValueSelected = false;
    this.postAction = postAction;
    this.setPlaceholder(`Which notes with tags do you want to ${description} to ${insertFromBeginning ? "beginning" : "end"} of the notes?`);
    this.setInstructions([
      {
        command: "",
        purpose: `Which notes with tags do you want to ${description} to ${insertFromBeginning ? "beginning" : "end"} of the notes?`
      }
    ]);
    this.keydownHandler = (event) => {
      if (event.metaKey || event.ctrlKey) {
        const key = parseInt(event.key, 10);
        if (key >= 1 && key <= 9) {
          event.preventDefault();
          this.selectElement(key - 1);
        }
      }
    };
    document.addEventListener("keydown", this.keydownHandler);
    this.items = this.prepareItems();
  }
  selectElement(index) {
    const elements = this.resultContainerEl.querySelectorAll(".suggestion-item");
    if (elements.length > index) {
      const element = elements[index];
      element.click();
    }
  }
  getItems() {
    return this.items;
  }
  prepareItems() {
    const allNotesPath = getAllNotes(this.app);
    const allHeader = getAllHeaders(this.app, allNotesPath);
    const l = [
      ...[{ notePath: "I/Inbox.md", header: "", startLine: -1, noteType: getNoteType("I/Inbox.md") }],
      ...getRecentNotes(this.app, 50).map((s) => {
        return { notePath: s, header: "", startLine: -1, noteType: getNoteType(s) };
      }),
      ...getAllNoteTags(this.app).map((s) => s.replace(/^#/, "@")).map((s) => {
        return { notePath: s, header: "", startLine: -1, noteType: null };
      }),
      ...allNotesPath.map((s) => {
        return { notePath: s, header: "", startLine: -1, noteType: getNoteType(s) };
      }),
      ...allHeader
    ];
    return l.filter((item, index) => l.indexOf(item) === index);
  }
  onClose() {
    super.onClose();
    document.removeEventListener("keydown", this.keydownHandler);
    if (!this.modalValueSelected) {
    }
  }
  getItemText(value) {
    return value.notePath + value.header;
  }
  // Renders each suggestion item.
  renderSuggestion(value, el) {
    const item = value.item;
    let prefix = item.noteType ? item.noteType.prefix ? item.noteType.prefix + " " : "" : "";
    const index = this.resultContainerEl.querySelectorAll(".suggestion-item").length;
    const itemIndex = index < 10 ? index + ". " : "    ";
    el.createEl("div", { text: itemIndex + prefix + item.notePath });
    if (item.header.length > 0) {
      el.createEl("small", { text: "     " + item.header });
    }
  }
  onOpen() {
    super.onOpen();
    this.inputEl.value = "@";
    this.inputEl.trigger("input");
    this.inputEl.addEventListener("input", () => {
      if (this.inputEl.value.startsWith("@") && (this.inputEl.value.length > 4 || this.inputEl.value.contains("#"))) {
        this.inputEl.value = this.inputEl.value.substring(1);
      }
    });
    this.inputEl.addEventListener("paste", (event) => {
      if (this.inputEl.value === "@") {
        event.preventDefault();
        const text = (event.clipboardData || window.clipboardData).getData("text");
        this.inputEl.value = text;
        this.inputEl.trigger("input");
      }
    });
  }
  // Perform action on the selected suggestion.
  async onChooseItem(choosenValue, evt) {
    this.modalValueSelected = true;
    if (choosenValue.notePath.startsWith("@")) {
      new AddTextToNotesFromSpecificTagModal(this.app, this.linkToAdd, choosenValue.notePath.replace(/^@/, "#"), this.description, this.insertFromBeginning, this.postAction).open();
    } else {
      const tFile = app.vault.getAbstractFileByPath(choosenValue.notePath);
      const value = await app.vault.read(tFile);
      await addTextToNotes(this.linkToAdd, choosenValue.notePath, this.app, this.insertFromBeginning, choosenValue.startLine);
    }
  }
};

// navigateToNoteFromSpecificTagModal.ts
var import_obsidian20 = require("obsidian");
var BACK_TO_SELECT_TAG2 = "Back to select tag";
var OPEN_IN_SEARCH_MODE = "Open in search mode";
var NavigateToNoteFromSpecificTagModal = class extends import_obsidian20.SuggestModal {
  constructor(app2, tagToFind) {
    super(app2);
    this.tagToFind = tagToFind;
    this.setPlaceholder(`Which notes with tag ${tagToFind} do you want to navigate to?`);
    this.setInstructions([
      {
        command: "",
        purpose: `Which notes with tag ${tagToFind} do you want to navigate to?`
      }
    ]);
    this.keydownHandler = (event) => {
      if (event.ctrlKey && event.altKey && event.shiftKey && event.key === ";") {
        this.close();
      } else if (event.ctrlKey && event.metaKey && event.shiftKey && event.key === ";") {
        this.close();
      } else if (event.metaKey || event.ctrlKey) {
        const key = parseInt(event.key, 10);
        if (key >= 1 && key <= 9) {
          event.preventDefault();
          this.selectElement(key - 1);
        }
      }
    };
    document.addEventListener("keydown", this.keydownHandler);
  }
  selectElement(index) {
    const elements = this.resultContainerEl.querySelectorAll(".suggestion-item");
    if (elements.length > index) {
      const element = elements[index];
      element.click();
    }
  }
  onClose() {
    super.onClose();
    document.removeEventListener("keydown", this.keydownHandler);
  }
  async getSuggestions(query) {
    const filePaths = filesWhereTagIsUsed(this.tagToFind);
    const headers = [];
    const lines = [];
    const isActionTag = !/^#[a-z]\/[a-z]\/[a-z]$/.test(this.tagToFind) && !/^#[a-z]\/[a-z]$/.test(this.tagToFind) && !/^#[a-z]$/.test(this.tagToFind);
    const readPromises = filePaths.map(async (filePath) => {
      const file = this.app.vault.getAbstractFileByPath(filePath);
      const fileCache = this.app.metadataCache.getFileCache(file);
      if (!fileCache)
        return;
      if (isActionTag) {
        if (fileCache.tags) {
          const content = await this.app.vault.read(file);
          const fileLines = content.split("\n");
          for (const tag2 of fileCache.tags) {
            if (tag2.tag === this.tagToFind) {
              const heading2 = this.getHeadingForLine(fileCache, tag2.position.start.line);
              const lineContent = fileLines[tag2.position.start.line].trim();
              if ((filePath + lineContent).toLowerCase().includes(query.toLowerCase())) {
                lines.push({
                  notePath: filePath,
                  header: (heading2 ? heading2 + "\n     " : "") + lineContent,
                  startLine: tag2.position.start.line,
                  noteType: null
                });
              }
            }
          }
        }
      } else {
        if (fileCache.headings) {
          fileCache.headings.forEach((h) => {
            headers.push({
              notePath: filePath,
              header: "#" + h.heading,
              startLine: h.position.start.line,
              noteType: null
            });
          });
        }
      }
    });
    await Promise.all(readPromises);
    if (isActionTag) {
      return [
        { notePath: BACK_TO_SELECT_TAG2, header: "", startLine: 0, noteType: null },
        { notePath: OPEN_IN_SEARCH_MODE, header: "", startLine: 0, noteType: null },
        ...lines
      ];
    }
    return [
      { notePath: BACK_TO_SELECT_TAG2, header: "", startLine: 0, noteType: null },
      { notePath: OPEN_IN_SEARCH_MODE, header: "", startLine: 0, noteType: null },
      ...filePaths.filter((f) => f.toLowerCase().includes(query.toLowerCase())).map((f) => ({ notePath: f, header: "", startLine: 0, noteType: getNoteType(f) })),
      //    ...filePaths.filter(f => this.fuzzyMatch(f.toLowerCase(), query.toLowerCase())).map(f => ({ notePath: f, header: "", startLine: 0, noteType: getNoteType(f) })),
      { notePath: SEPARATOR, header: "", startLine: 0, noteType: null },
      ...headers
    ];
  }
  getHeadingForLine(fileCache, lineNumber) {
    if (!fileCache || !fileCache.headings) {
      return "";
    }
    const headings = fileCache.headings;
    let currentHeading = "";
    for (const heading2 of headings) {
      if (heading2.position.start.line <= lineNumber) {
        currentHeading = "# " + heading2.heading;
      } else {
        break;
      }
    }
    return currentHeading;
  }
  fuzzyMatch(str, pattern) {
    if (!pattern)
      return true;
    pattern = pattern.split("").reduce((a, b) => `${a}.*${b}`);
    return new RegExp(pattern).test(str);
  }
  getItemText(path) {
    return path.notePath + path.header;
  }
  // Renders each suggestion item.
  //renderSuggestion(path: FuzzyMatch<NoteWithHeader>, el: HTMLElement) {
  renderSuggestion(item, el) {
    const pathItem = item.notePath;
    let noteType = getNoteType(item.notePath);
    let prefix = noteType ? noteType.prefix ? noteType.prefix + " " : "" : "";
    const index = this.resultContainerEl.querySelectorAll(".suggestion-item").length;
    const itemIndex = index < 10 ? index + ". " : "    ";
    el.createEl("div", { text: itemIndex + prefix + pathItem });
    if (item.header.length > 0) {
      el.createEl("small", { text: "     " + item.header });
    }
  }
  onChooseSuggestion(path, evt) {
    if (BACK_TO_SELECT_TAG2 === path.notePath) {
      new NavigateToNoteFromTagModal(this.app).open();
    } else if (OPEN_IN_SEARCH_MODE === path.notePath) {
      const searchPlugin = this.app.internalPlugins.getPluginById("global-search");
      const search = searchPlugin && searchPlugin.instance;
      const defaultTagSearchString = `tag:${this.tagToFind}`;
      search.openGlobalSearch(defaultTagSearchString);
    } else if (SEPARATOR === path.notePath) {
    } else {
      const { vault, workspace } = this.app;
      const leaf = workspace.getLeaf(false);
      Promise.resolve().then(() => {
        return leaf.openFile(vault.getAbstractFileByPath(path.notePath), { active: true });
      }).then(() => {
        const markdownView = app.workspace.getActiveViewOfType(import_obsidian20.MarkdownView);
        const editor = markdownView == null ? void 0 : markdownView.editor;
        if (markdownView == null || editor == null) {
          const errorReason = `editor or value ${path.notePath} not exist. Aborting...`;
          return Promise.reject(errorReason);
        }
        editor.setCursor({ line: path.startLine, ch: 0 });
        if (path.startLine > 0) {
          const line = path.startLine;
          try {
            markdownView.setEphemeralState({ line });
          } catch (error) {
            console.error(error);
          }
        }
      });
    }
  }
};

// navigateToNoteFromTagModal.ts
var import_obsidian21 = require("obsidian");
var note = "note";
var history = "history";
var tag = "tag";
var heading = "heading";
var NavigateToNoteFromTagModal = class extends import_obsidian21.FuzzySuggestModal {
  constructor(app2) {
    super(app2);
    this.setPlaceholder(`Which notes with tags do you want to navigate to?`);
    this.setInstructions([
      {
        command: "",
        purpose: "Which notes with tags do you want to navigate to?"
      }
    ]);
    this.keydownHandler = (event) => {
      if (event.ctrlKey && event.altKey && event.shiftKey && event.key === ";") {
        this.close();
      } else if (event.ctrlKey && event.metaKey && event.shiftKey && event.key === ";") {
        this.close();
      } else if (event.metaKey || event.ctrlKey) {
        const key = parseInt(event.key, 10);
        if (key >= 1 && key <= 9) {
          event.preventDefault();
          this.selectElement(key - 1);
        }
      }
    };
    document.addEventListener("keydown", this.keydownHandler);
    this.items = this.prepareItems();
  }
  selectElement(index) {
    const elements = this.resultContainerEl.querySelectorAll(".suggestion-item");
    if (elements.length > index) {
      const element = elements[index];
      element.click();
    }
  }
  onClose() {
    super.onClose();
    document.removeEventListener("keydown", this.keydownHandler);
  }
  getItems() {
    return this.items;
  }
  prepareItems() {
    const allNotes = getAllNotes(this.app);
    let headings = [];
    allNotes.forEach((n) => {
      const file = this.app.vault.getAbstractFileByPath(n);
      const fileCache = this.app.metadataCache.getFileCache(file);
      if (!fileCache) {
        return;
      }
      if (!fileCache.headings) {
        return;
      }
      fileCache.headings.forEach((h) => {
        headings.push({ note: n, heading: h.heading, level: h.level, startLine: h.position.start.line });
      });
    });
    return [
      ...getRecentNotes(this.app, 50).map((n) => {
        return { search: n, secondary: "", type: history, line: -1 };
      }),
      ...getAllTagsWithFilter(this.app).map((n) => {
        return { search: n.replace(/^#/, "@"), secondary: "", type: tag, line: -1 };
      }),
      ...allNotes.map((n) => {
        return { search: n, secondary: "", type: note, line: -1 };
      }),
      ...headings.map((h) => {
        return { search: "#".repeat(h.level) + " " + h.heading, secondary: h.note, type: heading, line: h.startLine };
      })
    ];
  }
  getItemText(value) {
    return value.type === heading ? value.secondary + value.search : value.search;
  }
  // Renders each suggestion item.
  renderSuggestion(value, el) {
    const item = value.item;
    let prefix = "";
    if (item.type === note || item.type === history) {
      const noteType = getNoteType(item.search);
      prefix = noteType ? noteType.prefix + " " : "";
    }
    const taskType = item.type == tag ? getNoteDescriptionByType(item.search) : "";
    const index = this.resultContainerEl.querySelectorAll(".suggestion-item").length;
    const itemIndex = index < 10 ? index + ". " : "    ";
    el.createEl("div", { text: itemIndex + prefix + item.search });
    const lineInfo = item.line > 0 ? " (line " + item.line + ")" : "";
    el.createEl("small", { text: "     " + item.type + " " + item.secondary + taskType + lineInfo });
  }
  onOpen() {
    super.onOpen();
    this.inputEl.value = "@";
    this.inputEl.trigger("input");
    this.inputEl.addEventListener("input", () => {
      if (this.inputEl.value.startsWith("@") && (this.inputEl.value.length > 4 || this.inputEl.value.contains("#"))) {
        this.inputEl.value = this.inputEl.value.substring(1);
      }
    });
    this.inputEl.addEventListener("paste", (event) => {
      if (this.inputEl.value === "@") {
        event.preventDefault();
        const text = (event.clipboardData || window.clipboardData).getData("text");
        this.inputEl.value = text;
        this.inputEl.trigger("input");
      }
    });
  }
  // Perform action on the selected suggestion.
  async onChooseItem(choosenValue, evt) {
    if (choosenValue.type == tag) {
      new NavigateToNoteFromSpecificTagModal(this.app, choosenValue.search.replace("@", "#")).open();
    } else if (choosenValue.type == note || choosenValue.type == history) {
      const { vault, workspace } = this.app;
      const leaf = workspace.getLeaf(false);
      Promise.resolve().then(() => {
        return leaf.openFile(vault.getAbstractFileByPath(choosenValue.search), { active: true });
      });
    } else if (choosenValue.type == heading) {
      const { vault, workspace } = this.app;
      const leaf = workspace.getLeaf(false);
      Promise.resolve().then(() => {
        return leaf.openFile(vault.getAbstractFileByPath(choosenValue.secondary), { active: true });
      }).then(() => {
        const markdownView = app.workspace.getActiveViewOfType(import_obsidian21.MarkdownView);
        const editor = markdownView == null ? void 0 : markdownView.editor;
        if (markdownView == null || editor == null) {
          const errorReason = `editor or value ${choosenValue.secondary} not exist. Aborting...`;
          return Promise.reject(errorReason);
        }
        editor.setCursor({ line: choosenValue.line, ch: 0 });
        if (choosenValue.line > 0) {
          const line = choosenValue.line;
          try {
            markdownView.setEphemeralState({ line });
          } catch (error) {
            console.error(error);
          }
        }
      });
    }
  }
};

// selfutil/extractSelection.ts
function exportCurrentSelection(editor) {
  let text = "";
  const listSelections = editor.listSelections();
  listSelections.forEach((listSelection) => {
    const a = listSelection.head.line;
    const b = listSelection.anchor.line;
    const fromLineNum = b > a ? a : b;
    const toLineNum = b > a ? b : a;
    for (let i = fromLineNum; i <= toLineNum; i++) {
      const line = editor.getLine(i);
      text += line + "\n";
    }
  });
  return text.replace(/\n$/, "");
}
function getCurrentSelectionLineNumber(editor) {
  let text = "";
  let fromLineNum = 0;
  let fromCh = 0;
  let toLineNum = 0;
  let toCh = 0;
  const listSelections = editor.listSelections();
  listSelections.forEach((listSelection) => {
    const a = listSelection.head.line;
    const ach = listSelection.head.ch;
    const b = listSelection.anchor.line;
    const bch = listSelection.anchor.ch;
    fromLineNum = b > a ? a : b;
    fromCh = b > a ? ach : bch;
    toLineNum = b > a ? b : a;
    toCh = b > a ? bch : ach;
  });
  return { fromLineNum, fromCh, toLineNum, toCh };
}

// twmigration/twMigrateTools.ts
var skipFrontMatterField = [
  "freetimetask: ",
  "expectedtime: ",
  "mode: ",
  "days: ",
  "showheaderfooter: ",
  "showstate: ",
  "sortsubpagefilter: ",
  "throughttree: ",
  "urgent: ",
  "displayas: ",
  "startdate: ",
  "readwritemode: ",
  "showChandlerNow: ",
  "deepwork: ",
  "expectedtime: ",
  "parsedate: ",
  "tidscope: ",
  "inserttodoaction: ",
  "optional: ",
  "replaceto: ",
  "backuptiddler: ",
  "deadline: ",
  "caption: ",
  "collection: ",
  "library: ",
  "library_version: ",
  "dummy: ",
  "tidName: ",
  "chronicledate: ",
  "eventdate: ",
  "dailyhighlight: ",
  "displaycardmode: ",
  "displaymode: ",
  "numcol: ",
  "dateyyyymmdd: ",
  "graphdisplaymode: ",
  "maxdepth: ",
  "journaldate: ",
  "thisBillDate: ",
  "lastBillDate: ",
  "roottiddler: ",
  "year: ",
  "to: ",
  "tidtemplate: ",
  "tiddlername: ",
  "theme: ",
  "tagvalue: ",
  "subtasknum: ",
  "removetagvalue: ",
  "recurringeventstartdate: ",
  "recurringeventenddate: ",
  "pluginname: ",
  "pid: ",
  "macroname: ",
  "limit: ",
  "keyword: ",
  "keywordtmp: ",
  "from: ",
  "deprecatereason: ",
  "deepwo: ",
  "color: ",
  "row: ",
  "col: ",
  "bookmarked: ",
  "blockingreminderdate: ",
  "backup: "
];
function replaceTWUselessValue(value) {
  return value.replace("## > References\n\n- \n\n", "").replace("## > Goal and Reason\n\n- \n\n", "").replace("## > Deliverable Spec\n\n- \n\n", "").replace("## > Conditon of done\n\n- \n\n", "").replace("## > Step\n\n- \n\n", "").replace("## > Progress\n\n- \n\n", "").replace("## > Results\n\n- \n\n", "").replace("## > Experience\n\n- \n\n", "").replace("## > References\n\n- \n\n", "").replace("## > Results, Steps and Exp\n\n- \n\n", "").replace("## > Checklist\n\n[ ] \n\n", "").replace("## > Cache\n\n[ ] \n\n", "").replace("## > Scenario\n\n- \n\n", "").replace("## > Goal\n\n- \n\n", "").replace("## > Goal\n\n*\n\n", "").replace("## > Deliverable Spec / Condition of Done\n\n- \n\n", "").replace("## > Planned Step\n\n#\n\n", "").replace("## > Actual Step\n\n1. \n\n", "").replace("## > Actual Step\n\n1.  \n\n", "").replace("## > Result\n\n- \n\n", "").replace("## > How to do it better next time\n\n- \n\n", "").replace("## > Next time action\n\n- \n\n", "").replace(/\n\n\n+/g, "\n\n");
}
function shouldSkipFrontMatter(line) {
  for (let i = 0; i < skipFrontMatterField.length; i++) {
    if (line.startsWith(skipFrontMatterField[i])) {
      return true;
    }
  }
  return false;
}
function getParentLine(value) {
  const values = value.split("\n");
  for (let i = 0; i < values.length; i++) {
    const lineContent = values[i];
    if (/^parent\d+: /.test(lineContent) || /^\t+- parent\d+: /.test(lineContent)) {
      return i;
    }
  }
  return 0;
}
function tidyUpFrontMatteronEditor(editor) {
  const value = editor.getValue();
  const modifiedValue = tidyUpFrontMatterOnValue(value);
  editor.setValue(modifiedValue);
}
function tidyUpFrontMatterOnValue(value) {
  const values = value.split("\n");
  const lineCount = values.length;
  let fm = "";
  let c = "";
  let text = "";
  let h3Count = 0;
  let content = "";
  return replaceTWUselessValue(value);
}

// selfutil/removeContentFromCursor.ts
var import_obsidian22 = require("obsidian");
function removeContentFromStartOfNoteToCursor(editor) {
  const cursor = editor.getCursor();
  const line = cursor.line;
  const ch = cursor.ch;
  const lineContent = editor.getLine(line);
  let newContent = lineContent.substring(ch);
  for (let i = line + 1; i < editor.lineCount(); i++) {
    newContent += "\n" + editor.getLine(i);
  }
  editor.setValue(newContent);
  cursor.line = 0;
  cursor.ch = 0;
  editor.setCursor(cursor);
}
function removeContentFromCursorToEndOfNote(editor) {
  const cursor = editor.getCursor();
  const line = cursor.line;
  const ch = cursor.ch;
  const lineContent = editor.getLine(line);
  let newContent = "";
  for (let i = 0; i < line; i++) {
    newContent += editor.getLine(i) + "\n";
  }
  newContent += lineContent.substring(0, ch);
  editor.setValue(newContent);
  cursor.line = line;
  cursor.ch = ch;
  editor.setCursor(cursor);
}
function copyContentFromStartOfNoteToCursor(editor) {
  const cursor = editor.getCursor();
  const line = cursor.line;
  const ch = cursor.ch;
  let newContent = "";
  for (let i = 0; i < line; i++) {
    newContent += editor.getLine(i) + "\n";
  }
  const lineContent = editor.getLine(line);
  newContent += lineContent.substring(0, ch);
  navigator.clipboard.writeText(newContent).then(function() {
    new import_obsidian22.Notice(`Copied content from cursor to end of note to clipboard!`);
  }, function(error) {
    new import_obsidian22.Notice(`error when copy to clipboard!`);
  });
}
function copyContentFromCursorToEndOfNote(editor) {
  const cursor = editor.getCursor();
  const line = cursor.line;
  const ch = cursor.ch;
  const lineContent = editor.getLine(line);
  let newContent = "";
  newContent += lineContent.substring(ch);
  for (let i = line + 1; i < editor.lineCount(); i++) {
    newContent += "\n" + editor.getLine(i);
  }
  navigator.clipboard.writeText(newContent).then(function() {
    new import_obsidian22.Notice(`Copied content from cursor to end of note to clipboard!`);
  }, function(error) {
    new import_obsidian22.Notice(`error when copy to clipboard!`);
  });
}
function removeContentLeftSameLine(editor) {
  const cursor = editor.getCursor();
  const line = cursor.line;
  const ch = cursor.ch;
  const lineContent = editor.getLine(line);
  editor.setLine(line, lineContent.substring(ch));
  cursor.ch = 0;
  editor.setCursor(cursor);
}
function removeContentRightSameLine(editor) {
  const cursor = editor.getCursor();
  const line = cursor.line;
  const ch = cursor.ch;
  const lineContent = editor.getLine(line);
  editor.setLine(line, lineContent.substring(0, ch));
  cursor.ch = editor.getLine(line).length;
  editor.setCursor(cursor);
}

// removeContentFromCursorModal.ts
var import_obsidian23 = require("obsidian");
var RemoveContentFromCursorModal = class extends import_obsidian23.FuzzySuggestModal {
  constructor(app2, editor) {
    super(app2);
    this.copyContentFromCursorToEndOfNote = "Copy content from cursor to end of note";
    this.cutContentFromCursorToEndOfNote = "Cut content from cursor to end of note";
    this.copyContentFromStartOfNoteToCursor = "Copy content from start of note to cursor";
    this.cutContentFromStartOfNoteToCursor = "Cut content from start of note to cursor";
    this.removeContentLeftSameLine = "Remove content left same line";
    this.removeContentRightSameLine = "Remove content right same line";
    this.removeContentFromStartOfNoteToCursor = "Remove content from start of note to cursor";
    this.removeContentFromCursorToEndOfNote = "Remove content from cursor to end of note";
    this.renameFilenameWithCurrentLineValue = "Rename Filename with Current Line value";
    this.copyCurrentHeadingSectionWithHeading = "Copy current heading section with heading";
    this.copyCurrentHeadingSectionWithoutHeading = "Copy current heading section without heading";
    this.replaceCurrentLineToClipboardLine = "Replace current line to clipboard line";
    this.replaceCurrentLineToClipboardAsListLine = "Replace current line to clipboard as list line";
    this.options = [
      this.copyContentFromCursorToEndOfNote,
      this.cutContentFromCursorToEndOfNote,
      this.copyContentFromStartOfNoteToCursor,
      this.cutContentFromStartOfNoteToCursor,
      this.removeContentLeftSameLine,
      this.removeContentRightSameLine,
      this.removeContentFromStartOfNoteToCursor,
      this.removeContentFromCursorToEndOfNote,
      this.renameFilenameWithCurrentLineValue,
      this.replaceCurrentLineToClipboardLine,
      this.replaceCurrentLineToClipboardAsListLine,
      this.copyCurrentHeadingSectionWithHeading,
      this.copyCurrentHeadingSectionWithoutHeading
    ];
    this.editor = editor;
    this.keydownHandler = (event) => {
      if (event.ctrlKey && event.altKey && event.shiftKey && event.key === "X") {
        this.close();
      } else if (event.ctrlKey && event.metaKey && event.shiftKey && event.key === "X") {
        this.close();
      } else if (event.metaKey || event.ctrlKey) {
        const key = parseInt(event.key, 10);
        if (key >= 1 && key <= 9) {
          event.preventDefault();
          this.selectElement(key - 1);
        }
      }
    };
    document.addEventListener("keydown", this.keydownHandler);
  }
  selectElement(index) {
    const elements = this.resultContainerEl.querySelectorAll(".suggestion-item");
    if (elements.length > index) {
      const element = elements[index];
      element.click();
    }
  }
  onClose() {
    super.onClose();
    document.removeEventListener("keydown", this.keydownHandler);
  }
  getItems() {
    return this.options;
  }
  getItemText(item) {
    return item;
  }
  // Renders each suggestion item.
  renderSuggestion(i, el) {
    const item = i.item;
    const index = this.resultContainerEl.querySelectorAll(".suggestion-item").length;
    const itemIndex = index < 10 ? index + ". " : "    ";
    el.createEl("div", { text: itemIndex + item });
  }
  // Perform action on the selected suggestion.
  async onChooseItem(selectedContent, evt) {
    const choosenOption = selectedContent;
    if (choosenOption === this.removeContentLeftSameLine) {
      removeContentLeftSameLine(this.editor);
    } else if (choosenOption === this.removeContentRightSameLine) {
      removeContentRightSameLine(this.editor);
    } else if (choosenOption === this.removeContentFromStartOfNoteToCursor) {
      removeContentFromStartOfNoteToCursor(this.editor);
    } else if (choosenOption === this.removeContentFromCursorToEndOfNote) {
      removeContentFromCursorToEndOfNote(this.editor);
    } else if (choosenOption === this.copyContentFromCursorToEndOfNote) {
      copyContentFromCursorToEndOfNote(this.editor);
    } else if (choosenOption === this.cutContentFromCursorToEndOfNote) {
      copyContentFromCursorToEndOfNote(this.editor);
      removeContentFromCursorToEndOfNote(this.editor);
    } else if (choosenOption === this.copyContentFromStartOfNoteToCursor) {
      copyContentFromStartOfNoteToCursor(this.editor);
    } else if (choosenOption === this.cutContentFromStartOfNoteToCursor) {
      copyContentFromCursorToEndOfNote(this.editor);
      removeContentFromStartOfNoteToCursor(this.editor);
    } else if (choosenOption === this.renameFilenameWithCurrentLineValue) {
      const cursor = this.editor.getCursor();
      const lineContent = this.editor.getLine(cursor.line);
      if (lineContent.contains("\\") || lineContent.contains("/") || lineContent.contains("'") || lineContent.contains('"') || lineContent.contains("<") || lineContent.contains(">") || lineContent.contains(":") || lineContent.contains("?") || lineContent.contains("*") || lineContent.contains("|")) {
        new import_obsidian23.Notice('Line contains special character (\\ / : * ? " < > |)so cannot rename file');
        return;
      }
      const file = this.app.workspace.getActiveFile();
      if (file && lineContent !== "") {
        const newPath = file.path.replace(/[^\/]+$/, lineContent + ".md");
        this.app.fileManager.renameFile(file, newPath).then(() => {
          var _a;
          new import_obsidian23.Notice(`Renamed file to ${(_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path}`);
          this.editor.replaceRange("", { line: cursor.line, ch: 0 }, { line: cursor.line, ch: this.editor.getLine(cursor.line).length + 1 });
        }).catch((error) => {
          new import_obsidian23.Notice(`Error renaming file: ${error}`);
        });
        return;
      }
      new import_obsidian23.Notice(`Error renaming file: file path not found or lineContent is empty`);
    } else if (choosenOption === this.replaceCurrentLineToClipboardLine) {
      const cursor = this.editor.getCursor();
      const clipboardContent = await this.getClipboardContent();
      if (clipboardContent !== "") {
        this.editor.replaceRange(clipboardContent, { line: cursor.line, ch: 0 }, { line: cursor.line, ch: this.editor.getLine(cursor.line).length });
      }
    } else if (choosenOption === this.replaceCurrentLineToClipboardAsListLine) {
      const cursor = this.editor.getCursor();
      const clipboardContent = await this.getClipboardContent();
      if (clipboardContent !== "") {
        const lineContent = this.editor.getLine(cursor.line);
        const prefix = lineContent.replace(/(\t*- ).*/, "$1");
        const clipboardContent2 = clipboardContent.replace(/(\t*- )?(.*)/, "$2");
        this.editor.replaceRange(prefix + clipboardContent2, { line: cursor.line, ch: 0 }, { line: cursor.line, ch: this.editor.getLine(cursor.line).length });
      }
    } else if (choosenOption === this.copyCurrentHeadingSectionWithHeading) {
      this.copyCurrentHeadingSection(true);
    } else if (choosenOption === this.copyCurrentHeadingSectionWithoutHeading) {
      this.copyCurrentHeadingSection(false);
    }
  }
  // Copy the current markdown heading section
  copyCurrentHeadingSection(includeHeading) {
    var _a, _b;
    const cursor = this.editor.getCursor();
    const text = this.editor.getValue();
    const lines = text.split("\n");
    let currentLine = cursor.line;
    let headingLineNumber = -1;
    let headingLevel = 0;
    for (let i = currentLine; i >= 0; i--) {
      const line = lines[i];
      const headingMatch = line.match(/^(#+)\s+/);
      if (headingMatch) {
        headingLineNumber = i;
        headingLevel = headingMatch[1].length;
        break;
      }
    }
    let endLineNumber = lines.length - 1;
    for (let i = currentLine + 1; i < lines.length; i++) {
      const line = lines[i];
      const nextHeadingMatch = line.match(/^(#+)\s+/);
      if (nextHeadingMatch) {
        if (headingLineNumber === -1) {
          endLineNumber = i - 1;
          break;
        } else {
          if (nextHeadingMatch[1].length <= headingLevel) {
            endLineNumber = i - 1;
            break;
          }
        }
      }
    }
    if (headingLineNumber === -1) {
      let startLine2 = 0;
      if (((_a = lines[0]) == null ? void 0 : _a.trim()) === "---") {
        for (let i = 1; i < lines.length; i++) {
          if (((_b = lines[i]) == null ? void 0 : _b.trim()) === "---") {
            startLine2 = i + 1;
            break;
          }
        }
      }
      const sectionContent2 = lines.slice(startLine2, endLineNumber + 1).join("\n");
      navigator.clipboard.writeText(sectionContent2).then(function() {
        new import_obsidian23.Notice(`Copied
\`\`\`
${sectionContent2}
\`\`\`
from beginning of note to cursor`);
      }, function(error) {
        new import_obsidian23.Notice(`Error when copying to clipboard!`);
      });
      return;
    }
    const startLine = includeHeading ? headingLineNumber : headingLineNumber + 1;
    const sectionContent = lines.slice(startLine, endLineNumber + 1).join("\n");
    navigator.clipboard.writeText(sectionContent).then(function() {
      new import_obsidian23.Notice(`Copied
\`\`\`
${sectionContent}
\`\`\`
to clipboard!`);
    }, function(error) {
      new import_obsidian23.Notice(`error when copy to clipboard!`);
    });
  }
  // Read from clipboard
  async getClipboardContent() {
    try {
      const text = await navigator.clipboard.readText();
      return text;
    } catch (error) {
      new import_obsidian23.Notice("Failed to read clipboard: " + error);
      return "";
    }
  }
};

// findReplaceModal.ts
var import_obsidian24 = require("obsidian");
var FindReplaceModal = class extends import_obsidian24.FuzzySuggestModal {
  constructor(app2) {
    super(app2);
    this.find = "find";
    this.replace = "replace";
    this.options = [this.find, this.replace];
  }
  getItems() {
    return this.options;
  }
  getItemText(item) {
    return item;
  }
  // Renders each suggestion item.
  renderSuggestion(i, el) {
    const item = i.item;
    el.createEl("div", { text: item });
  }
  // Perform action on the selected suggestion.
  async onChooseItem(selectedContent, evt) {
    const choosenOption = selectedContent;
    if (choosenOption === this.find) {
      this.app.commands.executeCommandById("editor:open-search");
    } else {
      this.app.commands.executeCommandById("obsidian-regex-replace:obsidian-regex-replace");
    }
  }
};

// queryOrphanNotesByTagModal.ts
var import_obsidian25 = require("obsidian");
var QueryOrphanNotesByTagModal = class extends import_obsidian25.FuzzySuggestModal {
  constructor(app2, editor, view) {
    super(app2);
    this.setPlaceholder(`Which notes with tags do you want to search orphan?`);
    this.setInstructions([
      {
        command: "",
        purpose: `Which notes with tags do you want to search orphan?`
      }
    ]);
    this.editor = editor;
    this.view = view;
    this.keydownHandler = (event) => {
      if (event.metaKey || event.ctrlKey) {
        const key = parseInt(event.key, 10);
        if (key >= 1 && key <= 9) {
          event.preventDefault();
          this.selectElement(key - 1);
        }
      }
    };
    document.addEventListener("keydown", this.keydownHandler);
  }
  selectElement(index) {
    const elements = this.resultContainerEl.querySelectorAll(".suggestion-item");
    if (elements.length > index) {
      const element = elements[index];
      element.click();
    }
  }
  onClose() {
    super.onClose();
    document.removeEventListener("keydown", this.keydownHandler);
  }
  getItems() {
    const l = [...getAllNoteTags(this.app).map((s) => s.replace(/^#/, "@"))];
    return l.filter((item, index) => l.indexOf(item) === index);
  }
  getItemText(value) {
    return value;
  }
  // Renders each suggestion item.
  renderSuggestion(value, el) {
    const item = value.item;
    const index = this.resultContainerEl.querySelectorAll(".suggestion-item").length;
    const itemIndex = index < 10 ? index + ". " : "    ";
    el.createEl("div", { text: itemIndex + item });
  }
  // Perform action on the selected suggestion.
  async onChooseItem(choosenValue, evt) {
    const queryMd = "I/Self Query.md";
    if (this.view.file.path === queryMd) {
      new import_obsidian25.Notice("Checking... may need some time");
      const tag2 = choosenValue.replace(/^@/, "#");
      const filePaths = filesWhereTagIsUsed(tag2);
      let result = "## Orphan notes for tag `" + tag2 + "`\n";
      for (const filePath of filePaths) {
        const tFile = this.app.vault.getAbstractFileByPath(filePath);
        const backlinks = this.app.metadataCache.getBacklinksForFile(tFile);
        if (!backlinks || !backlinks.data || Object.keys(backlinks.data).length === 0) {
          console.log(`No backlinks for ${tFile.path}`);
          result += "\n- [[" + tFile.basename + "]]";
        } else {
          delete backlinks.data[queryMd];
          if (Object.keys(backlinks.data).length === 0) {
            result += "\n- [[" + tFile.basename + "]]";
          } else {
          }
        }
      }
      this.editor.setValue(result);
      new import_obsidian25.Notice("Updated orphan");
    } else {
      new import_obsidian25.Notice("Please go to '" + queryMd + "' to run this action");
    }
  }
};

// navigateToForwardAndBacklinkModal.ts
var import_obsidian26 = require("obsidian");
var NavigateToForwardAndBacklinkTagModal = class extends import_obsidian26.SuggestModal {
  constructor(app2, view, editor) {
    super(app2);
    this.view = view;
    this.editor = editor;
    const thisFileName = this.view.file.path;
    const displayThisFileType = getNoteType(thisFileName);
    const displayThisFile = displayThisFileType ? displayThisFileType.prefix + " " + thisFileName : thisFileName;
    this.setPlaceholder(`${displayThisFile} - Which link do you want to navigate to?`);
    this.setInstructions([
      {
        command: "",
        purpose: `${displayThisFile} - Which link do you want to navigate to?`
      }
    ]);
    this.keydownHandler = (event) => {
      if (event.ctrlKey && event.altKey && event.shiftKey && event.key === "O") {
        this.close();
      } else if (event.ctrlKey && event.metaKey && event.shiftKey && event.key === "O") {
        this.close();
      } else if (event.metaKey || event.ctrlKey) {
        const key = parseInt(event.key, 10);
        if (key >= 1 && key <= 9) {
          event.preventDefault();
          this.selectElement(key - 1);
        }
      }
    };
    document.addEventListener("keydown", this.keydownHandler);
  }
  selectElement(index) {
    const elements = this.resultContainerEl.querySelectorAll(".suggestion-item");
    if (elements.length > index) {
      const element = elements[index];
      element.click();
    }
  }
  onClose() {
    super.onClose();
    document.removeEventListener("keydown", this.keydownHandler);
  }
  getTFileByPath(path) {
    const file = this.app.vault.getAbstractFileByPath(path);
    if (file instanceof import_obsidian26.TFile) {
      return file;
    }
    return null;
  }
  getHeadingForLine(path, lineNumber) {
    const file = this.getTFileByPath(path);
    if (!file) {
      return "";
    }
    const fileCache = this.app.metadataCache.getFileCache(file);
    if (!fileCache || !fileCache.headings) {
      return "";
    }
    const headings = fileCache.headings;
    let currentHeading = "";
    for (const heading2 of headings) {
      if (heading2.position.start.line <= lineNumber) {
        currentHeading = "#" + heading2.heading;
      } else {
        break;
      }
    }
    return currentHeading;
  }
  async getLinkItems() {
    const forwardLinkItems = await this.getForwardlinkItems();
    let backLinkItems = [];
    let childLinkItems = [];
    let parentLinkItems = [];
    const backlinks = this.app.metadataCache.getBacklinksForFile(this.view.file);
    const backlinksData = backlinks == null ? void 0 : backlinks.data;
    if (backlinksData) {
      for (let [i, v] of backlinksData.entries()) {
        for (let j = 0; j < v.length; j++) {
          const index = v.length > 1 ? "[" + j + "]" : "";
          if (i != this.view.file.path) {
            const key = v[j]["key"];
            if (key) {
              childLinkItems.push({ path: i, type: "v ", index, heading: "", line: 0, ch: 0 });
            } else {
              const position = v[j]["position"];
              const line = position["start"]["line"];
              const heading2 = this.getHeadingForLine(i, line);
              const backlinkLineFile = this.app.vault.getAbstractFileByPath(i);
              const backlinkLineFiles = backlinkLineFile ? await this.app.vault.read(backlinkLineFile) : "";
              const backlinkLineFiles2 = backlinkLineFiles.split("\n");
              const backlinkLine = backlinkLineFiles2[line].trim();
              const backlinkLine2 = backlinkLine.replace(/^- /, "").replace(/^\d+\. /, "");
              let zkContent = "";
              const backlinkNoteType = getNoteType(i);
              if (line - 3 >= 0) {
                zkContent += backlinkLineFiles2[line - 3] + "\n";
              }
              if (line - 2 >= 0) {
                zkContent += backlinkLineFiles2[line - 2] + "\n";
              }
              if (line - 1 >= 0) {
                zkContent += backlinkLineFiles2[line - 1] + "\n";
              }
              zkContent += backlinkLineFiles2[line] + "\n";
              if (line + 1 < backlinkLineFiles2.length) {
                zkContent += backlinkLineFiles2[line + 1] + "\n";
              }
              if (line + 2 < backlinkLineFiles2.length) {
                zkContent += backlinkLineFiles2[line + 2] + "\n";
              }
              if (line + 3 < backlinkLineFiles2.length) {
                zkContent += backlinkLineFiles2[line + 3] + "\n";
              }
              zkContent = zkContent.replace(/\n$/, "");
              const aaa = this.getBacklinkHeading(heading2, "", zkContent);
              backLinkItems.push({ path: i, type: "< ", index, heading: aaa, line: v[j]["position"]["start"]["line"], ch: v[j]["position"]["start"]["col"] });
            }
          }
        }
      }
    }
    const fileCache = this.app.metadataCache.getFileCache(this.view.file);
    if (fileCache) {
      const frontmatter = fileCache.frontmatter;
      if (frontmatter) {
        for (const key in frontmatter) {
          if (frontmatter.hasOwnProperty(key)) {
            const value = frontmatter[key];
            if (value.startsWith("[[") && value.endsWith("]]")) {
              const noteLink = value.slice(2, -2);
              const linkedFile = this.app.metadataCache.getFirstLinkpathDest(noteLink, this.view.file.path);
              const tf = linkedFile ? this.app.vault.getAbstractFileByPath(linkedFile.path) : null;
              if (tf) {
                parentLinkItems.push({ path: tf.path, type: "^ ", index: "", heading: "", line: 0, ch: 0 });
              }
            }
          }
        }
      }
    }
    return [...childLinkItems, ...parentLinkItems, ...backLinkItems, ...forwardLinkItems];
  }
  getBacklinkHeading(heading2, line, zkContent) {
    if (heading2 !== "" && line !== "" && zkContent !== "") {
      return heading2 + "\n" + line + "\n" + zkContent;
    } else if (heading2 !== "" && line !== "" && zkContent === "") {
      return heading2 + "\n" + line;
    } else if (heading2 !== "" && line === "" && zkContent !== "") {
      return heading2 + "\n" + zkContent;
    } else if (heading2 !== "" && line === "" && zkContent === "") {
      return heading2;
    } else if (heading2 === "" && line !== "" && zkContent !== "") {
      return line + "\n" + zkContent;
    } else if (heading2 === "" && line !== "" && zkContent === "") {
      return line;
    } else if (zkContent !== "") {
      return zkContent;
    } else {
      return "";
    }
  }
  async getForwardlinkItems() {
    var _a;
    const forwardlinks = (_a = this.app.metadataCache.getFileCache(this.view.file)) == null ? void 0 : _a.links;
    if (!forwardlinks) {
      return [];
    }
    const fileContent = this.view.file ? await this.app.vault.read(this.view.file) : "";
    const lineContents = fileContent === "" ? [] : fileContent.split("\n");
    const paths = forwardlinks.map((link) => {
      const linkedFile = this.app.metadataCache.getFirstLinkpathDest(link.link, this.view.file.path);
      const tf = linkedFile ? this.app.vault.getAbstractFileByPath(linkedFile.path) : null;
      const lineContent = lineContents.length != 0 ? lineContents[link.position.start.line].trim() : "";
      const content = lineContent.replace(/^- /, "").replace(/^\d+\. /, "") === link.original ? "" : lineContent;
      return { path: tf ? tf.path : "", content };
    });
    return paths.filter((pc) => pc.path !== "").map((pc) => {
      return { path: pc.path, type: "> ", index: "", heading: pc.content, line: 0, ch: 0 };
    });
  }
  getSameTagItems() {
    let items = [];
    let { frontmatter } = app.metadataCache.getFileCache(this.view.file) || {};
    const fmtags = (0, import_obsidian26.parseFrontMatterTags)(frontmatter) || [];
    var tag2 = "";
    for (let i = 0; i < fmtags.length; i++) {
      if (/#[a-z]\/[a-z]\/[a-z]/.test(fmtags[i])) {
        tag2 = fmtags[i];
        break;
      }
    }
    if (tag2 !== "") {
      const filePaths = filesWhereTagIsUsed(tag2);
      for (let i = 0; i < filePaths.length; i++) {
        items.push({ path: filePaths[i], type: "@ ", index: "", heading: "", line: 0, ch: 0 });
      }
    }
    return items;
  }
  getContentItems() {
    const value = this.editor.getValue();
    const lines = value.split("\n");
    let resultAsJiraLink = [];
    let resultAsHeader = [];
    let resultAsUnfinishedAction = [];
    let resultAsFinishedAction = [];
    let resultAsContent = [];
    let resultAsExternalLinks = [];
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line != "---" && line !== "" && !/^tags: [a-z]\/[a-z]\/[a-z]/.test(line)) {
        if (/^[#]{1,6} /.test(line)) {
          resultAsHeader.push({ path: line.replace(/^[#]{1,6}/, ""), type: line.replace(/^([#]{1,6} ).*/, "$1"), index: "", heading: "", line: i, ch: 0 });
        } else if (/#[wnt][nlwdatme] /.test(line) || / #[wnt][nlwdatme]/.test(line)) {
          if (/#[wn][da] /.test(line) || / #[wn][da]/.test(line)) {
            resultAsFinishedAction.push({ path: line, type: "x ", index: "", heading: "", line: i, ch: 0 });
          } else {
            resultAsUnfinishedAction.push({ path: line, type: "z ", index: "", heading: "", line: i, ch: 0 });
          }
        } else {
          resultAsContent.push({ path: line, type: "c ", index: "", heading: "", line: i, ch: 0 });
        }
      }
      const urlRegex = /(http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-/]))?/g;
      const matches = line.match(urlRegex);
      if (matches) {
        for (let j = 0; j < matches.length; j++) {
          resultAsExternalLinks.push({ path: matches[j], type: "w ", index: "", heading: "", line: i, ch: 0 });
        }
      } else {
        const jiraLinkRegex = /([A-Z]+-[0-9]+)/g;
        const jiraMatches = line.match(jiraLinkRegex);
        if (jiraMatches) {
          for (let j = 0; j < jiraMatches.length; j++) {
            resultAsJiraLink.push({ path: "https://jira.orcsoftware.com/browse/" + jiraMatches[j], type: "j ", index: "", heading: "", line: i, ch: 0 });
          }
        }
      }
    }
    return [
      ...resultAsHeader,
      ...resultAsUnfinishedAction,
      //...resultAsFinishedAction,
      ...resultAsJiraLink,
      ...resultAsExternalLinks,
      ...resultAsContent
    ];
  }
  /*
    getItems(): LinkType[] {
      return this.items
    }
  */
  async prepareItems() {
    const linkItems = await this.getLinkItems();
    const sameTagItems = await this.getSameTagItems();
    const contentItems = await this.getContentItems();
    return [
      ...linkItems,
      { path: "------------------", type: "", index: "", heading: "", line: 0, ch: 0 },
      ...sameTagItems,
      { path: "------------------", type: "", index: "", heading: "", line: 0, ch: 0 },
      ...contentItems
    ];
  }
  async getSuggestions(query) {
    const items = await this.prepareItems();
    return items.filter((i) => {
      const lowerQuery = query.toLowerCase();
      return new RegExp(lowerQuery).test((i.type + i.path).toLowerCase());
    });
  }
  getItemText(l) {
    return l.path;
  }
  // Renders each suggestion item.
  renderSuggestion(ll, el) {
    const index = this.resultContainerEl.querySelectorAll(".suggestion-item").length;
    const itemIndex = index < 10 ? index + ". " : "    ";
    el.createEl("div", { text: itemIndex + ll.type + this.getTaskTag(ll.type, ll.path) + ll.path + ll.index });
    if (ll.heading !== "") {
      el.createEl("small", { text: ll.heading, cls: "self-padding-left-55" });
    }
  }
  getTaskTag(type, path) {
    if (type === "> " || type === "< " || type === "v " || type === "^ " || type === "@ ") {
      const noteType = getNoteType(path);
      return noteType ? " " + noteType.prefix + " " : "";
    }
    return "";
  }
  // Perform action on the selected suggestion.
  onChooseSuggestion(l, evt) {
    if (l.type === "") {
      return;
    }
    if (l.type === "< " || l.type === "> " || l.type === "v " || l.type === "^ " || l.type === "@ ") {
      const { vault, workspace } = this.app;
      const leaf = workspace.getLeaf(false);
      const line2 = l.line;
      const ch2 = l.ch;
      Promise.resolve().then(() => {
        return leaf.openFile(vault.getAbstractFileByPath(l.path), { active: true });
      }).then(() => {
        const markdownView = app.workspace.getActiveViewOfType(import_obsidian26.MarkdownView);
        const editor = markdownView == null ? void 0 : markdownView.editor;
        const value = markdownView == null ? void 0 : markdownView.getViewData();
        if (markdownView == null || editor == null || value == null) {
          const errorReason = `editor not exist. Aborting...`;
          return Promise.reject(errorReason);
        }
        editor.setCursor({ line: line2, ch: ch2 });
        if (line2 > 0) {
          try {
            markdownView.setEphemeralState({ line: line2 });
          } catch (error) {
            console.error(error);
          }
        }
        return Promise.resolve();
      }).catch((reason) => {
        new import_obsidian26.Notice(reason);
      });
      return;
    }
    if (l.type === "w " || l.type === "j ") {
      window.open(l.path, "_blank");
      return;
    }
    const line = l.line;
    const ch = l.ch;
    this.editor.setCursor({ line, ch });
    this.editor.scrollIntoView({ from: { line, ch }, to: { line, ch } }, true);
    return;
  }
};

// selfutil/getChildLink.ts
function getChildlinkItems(app2, file) {
  const backlinks = app2.metadataCache.getBacklinksForFile(file);
  const backlinksData = backlinks == null ? void 0 : backlinks.data;
  if (!backlinksData) {
    return [];
  }
  let childLinkResult = [];
  for (let [i, v] of backlinksData.entries()) {
    for (let j = 0; j < v.length; j++) {
      const index = v.length > 1 ? "[" + j + "]" : "";
      if (i != file.path) {
        const key = v[j]["key"];
        if (key) {
          childLinkResult.push({ path: i, type: "v ", index, heading: "", line: 0, ch: 0 });
        }
      }
    }
  }
  return childLinkResult;
}

// navigateRewritableThreadsModal.ts
var import_obsidian27 = require("obsidian");
var import_moment = __toESM(require_moment());
var NavigateRewritableThreadsModal = class extends import_obsidian27.FuzzySuggestModal {
  constructor(app2) {
    super(app2);
    this.tagToFind = "#c/t/p";
    this.setPlaceholder(`Which published notes do you want to rewrite?`);
    this.setInstructions([
      {
        command: "",
        purpose: `Which published notes do you want to rewrite?`
      }
    ]);
  }
  getItems() {
    const filePaths = filesWhereTagIsUsed(this.tagToFind);
    return filePaths.filter((f) => {
      const time = f.replace(/.*(\d\d\d\d\d\d\d\d).*/, "$1");
      if (/\d\d\d\d\d\d\d\d/.test(time)) {
        const oldDate = (0, import_moment.default)(time, "YYYYMMDD");
        const today = (0, import_moment.default)();
        const diff = today.diff(oldDate, "days");
        return diff > 90;
      }
      return false;
    }).map((f) => {
      return { notePath: f, header: "", startLine: 0, noteType: getNoteType(f) };
    });
  }
  getItemText(path) {
    return path.notePath + path.header;
  }
  // Renders each suggestion item.
  renderSuggestion(path, el) {
    const item = path.item;
    const pathItem = item.notePath;
    let prefix = item.noteType ? item.noteType.prefix ? item.noteType.prefix + " " : "" : "";
    el.createEl("div", { text: prefix + pathItem });
    if (path.item.header.length > 0) {
      el.createEl("small", { text: item.header });
    }
  }
  // Perform action on the selected suggestion.
  onChooseItem(path, evt) {
    const { vault, workspace } = this.app;
    const leaf = workspace.getLeaf(false);
    Promise.resolve().then(() => {
      return leaf.openFile(vault.getAbstractFileByPath(path.notePath), { active: true });
    }).then(() => {
      const markdownView = app.workspace.getActiveViewOfType(import_obsidian27.MarkdownView);
      const editor = markdownView == null ? void 0 : markdownView.editor;
      if (markdownView == null || editor == null) {
        const errorReason = `editor or value ${path.notePath} not exist. Aborting...`;
        return Promise.reject(errorReason);
      }
      editor.setCursor({ line: path.startLine, ch: 0 });
      editor.scrollIntoView({ from: { line: path.startLine, ch: 0 }, to: { line: path.startLine, ch: 0 } }, true);
    });
  }
};

// rewriteThreads.ts
var import_obsidian28 = require("obsidian");
var import_moment2 = __toESM(require_moment());
var ALL_TYPES5 = [
  {
    type: "find",
    description: "Find Threads to rewrite"
  },
  {
    type: "rewrite",
    description: "Rewrite Threads"
  }
];
var RewriteThreadsModal = class extends import_obsidian28.FuzzySuggestModal {
  constructor(app2, editor, view) {
    super(app2);
    this.editor = editor;
    this.view = view;
    this.setPlaceholder(`Find or Rewrite?`);
  }
  getItems() {
    return ALL_TYPES5;
  }
  getItemText(noteType) {
    return noteType.type;
  }
  // Renders each suggestion item.
  renderSuggestion(choosenNoteTypeMatch, el) {
    const noteType = choosenNoteTypeMatch.item;
    el.createEl("div", { text: noteType.type });
    el.createEl("small", { text: noteType.description });
  }
  containsType(line) {
    return ALL_TYPES5.filter((noteType) => line.contains(noteType.type)).length > 0;
  }
  // Perform action on the selected suggestion.
  async onChooseItem(choosenOperation, evt) {
    if (choosenOperation.type === "find") {
      new NavigateRewritableThreadsModal(this.app).open();
      return;
    }
    if (choosenOperation.type === "rewrite") {
      const { vault } = this.app;
      let v = "---\ntags: c/t/d\n---\n\n\u{1F9F5} \n\n\n---\n\n## References\n\n- \n\n";
      const path = this.view.file.path;
      const file = this.view.file;
      const editor = this.editor;
      if (!path.match(/.\/Threads \d\d\d\d\d\d\d\d/)) {
        new import_obsidian28.Notice(`Will not proceed. It is not a threads post.`);
        return;
      }
      const todayYYYYMMDD = (0, import_moment2.default)().format("YYYYMMDD");
      const newPath = path.replace(/^(.\/Threads) \d\d\d\d\d\d\d\d (.*)/, "$1 " + todayYYYYMMDD + " $2");
      const newNoteName = newPath.replace(/^.\//, "").replace(/.md$/, "");
      const { workspace } = this.app;
      const leaf = workspace.getLeaf(false);
      Promise.resolve().then(() => {
        return vault.adapter.exists(newPath);
      }).then((fileExists) => {
        if (fileExists) {
          new import_obsidian28.Notice(`Will not proceed. Rewritten Thread post post already exist.`);
          return Promise.reject("Threads post already exist");
        }
      }).then(function() {
        const beforeTag = "c/t/p";
        const afterTag = "c/t/o";
        return renameTag(file, beforeTag, afterTag);
      }, function(error) {
        new import_obsidian28.Notice(`error when rename tag!`);
      }).then((renameSuccess) => {
        if (!renameSuccess) {
          new import_obsidian28.Notice(`Will not proceed. The old post not published (not c/t/p).`);
          return Promise.reject("Will not proceed. The old post not published (not c/t/p).");
        }
        const value = editor.getValue();
        let modifiedValue;
        if (/---\n\n## [Rr]eference[s]*[:]*\n\n/m.test(value)) {
          modifiedValue = value.replace(/(## [Rr]eference[s]*[:]*\n\n)/m, "$1- Rewrite: [[" + newNoteName + "]]\n");
        } else if (/---[\n\s]*$/.test(value)) {
          modifiedValue = value + "\n\n## References\n\n- Rewrite: [[" + newNoteName + "]]\n";
        } else {
          modifiedValue = value + "\n---\n\n## References\n\n- Rewrite: [[" + newNoteName + "]]\n";
        }
        editor.setValue(modifiedValue);
        return vault.create(newPath, v);
      }).then((tFile) => {
        return leaf.openFile(tFile, { active: true });
      }, (reason) => {
      }).then(() => {
        new import_obsidian28.Notice(`Created and opened Threads notes for rewrite!`);
      });
      return;
    }
  }
};

// notesTypeView.ts
var import_obsidian29 = require("obsidian");
var VIEW_TYPE_NOTE_LIST = "note-list-view";
var NotesTypeView = class extends import_obsidian29.ItemView {
  constructor(leaf, notesTypeTag) {
    super(leaf);
    this.redraw = async () => {
      let scrollPosition = 0;
      const contentContainer = this.containerEl.querySelector(".nav-folder.mod-root.scrollable");
      if (contentContainer) {
        scrollPosition = contentContainer.scrollTop;
      }
      this.containerEl.empty();
      if (this.notesTypeTag.length <= 0) {
        return;
      }
      this.containerEl.createDiv({ cls: "nav-header", text: "Tags: " + this.notesTypeTag });
      const rootEl = this.containerEl.createDiv({ cls: "nav-folder mod-root scrollable" });
      const childrenEl = rootEl.createDiv({ cls: "nav-folder-children" });
      const tagParts = this.notesTypeTag.split(" ");
      const tag1 = tagParts[0];
      const tag2 = tagParts.length > 1 ? tagParts[1] : "";
      const isActionTag = !/^#[a-z]\/[a-z]\/[a-z]$/.test(tag1) && !/^#[a-z]\/[a-z]$/.test(tag1) && !/^#[a-z]$/.test(tag1) || tag2.length > 0;
      const fragment = document.createDocumentFragment();
      const files = filesWhereTagIsUsed(tag1).map((filePath) => this.app.vault.getAbstractFileByPath(filePath));
      const batchSize = 10;
      for (let i = 0; i < files.length; i += batchSize) {
        const batch = files.slice(i, i + batchSize);
        const batchData = await Promise.all(batch.map(async (f) => {
          var _a;
          if (!f)
            return null;
          let noteType = getNoteType(f.path);
          let prefix = noteType ? noteType.prefix + " " : "";
          let lineInfo = [];
          if (isActionTag) {
            const actionTag = tag2.length > 0 ? tag2 : tag1;
            const fileCache = this.app.metadataCache.getFileCache(f);
            if (fileCache && fileCache.tags) {
              let fileLines = null;
              let headingsMap = null;
              const relevantTags = fileCache.tags.filter((tag3) => tag3.tag === actionTag);
              if (relevantTags.length > 0) {
                fileLines = (await this.app.vault.read(f)).split("\n");
                headingsMap = this.buildHeadingsMap(fileCache);
                const newLineChar = this.isWindows() ? "\r\n" : "\n";
                for (const tag3 of relevantTags) {
                  const heading2 = headingsMap.get(tag3.position.start.line) || "";
                  const lineContent = ((_a = fileLines[tag3.position.start.line]) == null ? void 0 : _a.trim()) || "";
                  const newLineIfNeeded = heading2.length !== 0 ? newLineChar : "";
                  lineInfo.push({
                    content: heading2 + newLineIfNeeded + lineContent,
                    line: tag3.position.start.line
                  });
                }
              }
            }
          }
          if (tag2.length > 0 && lineInfo.length === 0) {
            return {
              title: "invalid",
              lineInfo: [],
              file: null
            };
          }
          return {
            title: prefix + f.basename,
            lineInfo,
            file: f
          };
        }));
        for (const data of batchData) {
          if (!data || data.file === null)
            continue;
          this.renderNoteItem(data, rootEl, childrenEl, fragment);
        }
        await new Promise((resolve) => setTimeout(resolve, 0));
      }
      childrenEl.appendChild(fragment);
      if (scrollPosition > 0) {
        setTimeout(() => {
          const newContentContainer = this.containerEl.querySelector(".nav-folder.mod-root.scrollable");
          if (newContentContainer) {
            newContentContainer.scrollTop = scrollPosition;
          }
        }, 0);
      }
    };
    this.focusFileAtLine = (file, newLeaf, line) => {
      const targetFile = this.app.vault.getFiles().find((f) => f.path === file.path);
      if (targetFile) {
        const leaf = this.app.workspace.getLeaf(newLeaf);
        leaf.openFile(targetFile).then(() => {
          const view = this.app.workspace.getActiveViewOfType(import_obsidian29.MarkdownView);
          if (view) {
            view.editor.setCursor({ line, ch: 0 });
            view.editor.scrollIntoView({ from: { line, ch: 0 }, to: { line, ch: 0 } }, true);
            if (line != 0) {
              const ch = view.editor.getLine(line).length;
              view.editor.setSelection({ line, ch: 0 }, { line, ch });
              view.editor.scrollIntoView({ from: { line, ch: 0 }, to: { line, ch: 0 } }, true);
            }
          }
        });
      } else {
        new import_obsidian29.Notice("Cannot find a file with that name");
      }
    };
    this.notesTypeTag = notesTypeTag;
  }
  getViewType() {
    return VIEW_TYPE_NOTE_LIST;
  }
  getDisplayText() {
    return "Tagged Notes";
  }
  async onOpen() {
    this.redraw();
  }
  getIcon() {
    return "hash";
  }
  // Helper method to build a mapping of line numbers to headings
  buildHeadingsMap(fileCache) {
    const headingsMap = /* @__PURE__ */ new Map();
    if (!fileCache || !fileCache.headings) {
      return headingsMap;
    }
    let currentHeading = "";
    let lastHeadingLine = -1;
    const sortedHeadings = [...fileCache.headings].sort(
      (a, b) => a.position.start.line - b.position.start.line
    );
    for (const heading2 of sortedHeadings) {
      const line = heading2.position.start.line;
      currentHeading = "# " + heading2.heading;
      for (let i = lastHeadingLine + 1; i <= line; i++) {
        if (i !== line) {
          headingsMap.set(i, currentHeading);
        }
      }
      lastHeadingLine = line;
    }
    if (fileCache.sections) {
      const maxLine = Math.max(...fileCache.sections.map((s) => s.position.end.line));
      for (let i = lastHeadingLine + 1; i <= maxLine; i++) {
        headingsMap.set(i, currentHeading);
      }
    }
    return headingsMap;
  }
  // Helper method to render a note item
  renderNoteItem(data, rootEl, childrenEl, fragment) {
    const navFile = document.createElement("div");
    navFile.className = "tree-item nav-file recent-files-file";
    const navFileTitle = document.createElement("div");
    navFileTitle.className = "tree-item-self is-clickable nav-file-title recent-files-title";
    const navFileTitleContent = document.createElement("div");
    navFileTitleContent.className = "tree-item-inner nav-file-title-content recent-files-title-content internal-link self-wrap-content";
    navFileTitleContent.textContent = data.title;
    navFileTitle.appendChild(navFileTitleContent);
    navFile.appendChild(navFileTitle);
    this.setupEventListeners(navFileTitle, data.file, rootEl, navFile, 0);
    for (const lineInfo of data.lineInfo) {
      const navFileLine = document.createElement("div");
      navFileLine.className = "tree-item-self is-clickable nav-file-title recent-files-title";
      const navFileLineContent = document.createElement("div");
      navFileLineContent.className = "tree-item-inner nav-file-title-content recent-files-title-content internal-link self-wrap-content self-padding-left-10";
      navFileLineContent.innerText = lineInfo.content;
      navFileLine.appendChild(navFileLineContent);
      navFile.appendChild(navFileLine);
      this.setupEventListeners(navFileLine, data.file, rootEl, navFileLine, lineInfo.line);
    }
    fragment.appendChild(navFile);
  }
  // Setup common event listeners
  setupEventListeners(element, file, rootEl, targetEl, line) {
    element.addEventListener("mouseover", (event) => {
      if (!(file == null ? void 0 : file.path))
        return;
      this.app.workspace.trigger("hover-link", {
        event,
        source: VIEW_TYPE_NOTE_LIST,
        hoverParent: rootEl,
        targetEl,
        linktext: file.path
      });
    });
    element.addEventListener("contextmenu", (event) => {
      if (!(file == null ? void 0 : file.path))
        return;
      const menu = new import_obsidian29.Menu();
      menu.addItem(
        (item) => item.setSection("action").setTitle("Open in new tab").setIcon("file-plus").onClick(() => {
          this.focusFileAtLine(file, "tab", line);
        })
      );
      const abstractFile = this.app.vault.getAbstractFileByPath(file.path);
      this.app.workspace.trigger("file-menu", menu, abstractFile, "link-context-menu");
      menu.showAtPosition({ x: event.clientX, y: event.clientY });
    });
    element.addEventListener("click", (event) => {
      if (!file)
        return;
      const newLeaf = import_obsidian29.Keymap.isModEvent(event);
      this.focusFileAtLine(file, newLeaf, line);
    });
  }
  // Replace the original getHeadingForLine with a more efficient version that uses the headings map
  getHeadingForLine(fileCache, lineNumber) {
    if (!fileCache || !fileCache.headings) {
      return "";
    }
    let currentHeading = "";
    for (const heading2 of fileCache.headings) {
      if (heading2.position.start.line <= lineNumber) {
        currentHeading = "# " + heading2.heading;
      } else {
        break;
      }
    }
    return currentHeading;
  }
  isWindows() {
    return !import_obsidian29.Platform.isAndroidApp && !import_obsidian29.Platform.isIosApp && !import_obsidian29.Platform.isMacOS && !import_obsidian29.Platform.isSafari;
  }
  async onClose() {
  }
};

// currentNoteOutstandingActionView.ts
var import_obsidian30 = require("obsidian");
var VIEW_TYPE_CURRENT_OURSTANDING_TASK = "current-note-outstanding-action-view";
var CurrentNoteOutstandingActionView = class extends import_obsidian30.ItemView {
  constructor(leaf, notesTypeTag) {
    super(leaf);
    this.filterStr = "";
    this.tagsToMatch = ["#wn", "#nn", "#wl", "#nl", "#ww", "#nw", "tm"];
    this.redraw = async (forceRedraw) => {
      let scrollPosition = 0;
      const contentContainer = this.containerEl.querySelector(".nav-folder.mod-root.scrollable");
      if (contentContainer) {
        scrollPosition = contentContainer.scrollTop;
      }
      const activeFile = app.workspace.getActiveFile();
      if (!activeFile) {
        return;
      }
      if (!forceRedraw && activeFile.path === this.currentNotesPath) {
        return;
      }
      if (activeFile.path !== this.currentNotesPath) {
        this.clearFilter();
      }
      this.currentNotesPath = activeFile.path;
      const path = activeFile.path;
      const f = this.app.vault.getAbstractFileByPath(path);
      if (!f) {
        return;
      }
      const fragment = new DocumentFragment();
      const lineInfosByTag = await this.processFile(f);
      const filteredLineInfosByTag = this.filterLineInfos(lineInfosByTag);
      let allActionCount = 0;
      for (const [_, lineInfos] of filteredLineInfosByTag) {
        allActionCount += lineInfos.length;
      }
      this.containerEl.empty();
      const label = document.createElement("div");
      label.className = "nav-folder-children";
      label.textContent = "Outstanding Actions";
      fragment.appendChild(label);
      const searchContainer = document.createElement("div");
      searchContainer.className = "search-container";
      fragment.appendChild(searchContainer);
      const searchField = document.createElement("input");
      searchField.type = "text";
      searchField.placeholder = this.filterStr === "" ? "Filter..." : this.filterStr;
      searchField.className = "width50";
      searchContainer.appendChild(searchField);
      searchField.addEventListener("input", (event) => {
        this.filterStr = event.target.value.toLowerCase();
      });
      searchField.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
          this.redraw(true);
        }
      });
      const searchButton = document.createElement("button");
      searchButton.textContent = "Filter";
      searchButton.className = "width25";
      searchButton.addEventListener("click", () => {
        this.redraw(true);
      });
      searchContainer.appendChild(searchButton);
      const clearButton = document.createElement("button");
      clearButton.textContent = "Clear";
      clearButton.className = "width25";
      clearButton.addEventListener("click", () => {
        this.clearFilter();
        this.redraw(true);
      });
      searchContainer.appendChild(clearButton);
      let noteType = getNoteType(path);
      let prefix = noteType ? noteType.prefix ? noteType.prefix + " " : "" : "";
      const header = document.createElement("div");
      header.className = "nav-header";
      header.textContent = "Path: " + prefix + path + " ( " + allActionCount + " )";
      fragment.appendChild(header);
      const rootEl = document.createElement("div");
      rootEl.className = "nav-folder mod-root scrollable";
      fragment.appendChild(rootEl);
      const childrenEl = document.createElement("div");
      childrenEl.className = "nav-folder-children";
      rootEl.appendChild(childrenEl);
      this.renderTaskItems(childrenEl, filteredLineInfosByTag, f);
      this.containerEl.appendChild(fragment);
      if (scrollPosition > 0) {
        setTimeout(() => {
          const newContentContainer = this.containerEl.querySelector(".nav-folder.mod-root.scrollable");
          if (newContentContainer) {
            newContentContainer.scrollTop = scrollPosition;
          }
        }, 0);
      }
    };
    this.focusFileAtLine = (file, newLeaf, line) => {
      const targetFile = this.app.vault.getFiles().find((f) => f.path === file.path);
      if (targetFile) {
        const leaf = this.app.workspace.getLeaf(newLeaf);
        leaf.openFile(targetFile).then(() => {
          const view = this.app.workspace.getActiveViewOfType(import_obsidian30.MarkdownView);
          if (view) {
            view.editor.setCursor({ line, ch: 0 });
            if (line > 0) {
              try {
                view.setEphemeralState({ line });
              } catch (error) {
                console.error(error);
              }
            }
          }
        });
      } else {
        new import_obsidian30.Notice("Cannot find a file with that name");
      }
    };
    this.currentNotesPath = notesTypeTag;
    this.debouncedRedraw = (0, import_obsidian30.debounce)(
      () => this.redraw(false),
      300,
      // 300ms debounce time
      true
    );
  }
  getViewType() {
    return VIEW_TYPE_CURRENT_OURSTANDING_TASK;
  }
  getDisplayText() {
    return "Outstanding Task of Current View";
  }
  async onOpen() {
    this.redraw(true);
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", () => {
        this.debouncedRedraw();
      })
    );
    this.registerEvent(
      this.app.vault.on("modify", (file) => {
        if (file instanceof import_obsidian30.TFile && file.path === this.currentNotesPath) {
          this.debouncedRedraw();
        }
      })
    );
    this.registerEvent(
      this.app.metadataCache.on("changed", (file) => {
        if (file && file.path === this.currentNotesPath) {
          this.debouncedRedraw();
        }
      })
    );
  }
  getIcon() {
    return "list-checks";
  }
  clearFilter() {
    this.filterStr = "";
  }
  // Process file content and extract LineInfos grouped by tag
  async processFile(file) {
    const fileCache = this.app.metadataCache.getFileCache(file);
    const lineInfosByTag = /* @__PURE__ */ new Map();
    if (fileCache && fileCache.tags) {
      const content = await this.app.vault.read(file);
      const fileLines = content.split("\n");
      this.tagsToMatch.forEach((tag2) => {
        lineInfosByTag.set(tag2, []);
      });
      for (const tagMetadata of fileCache.tags) {
        const tag2 = tagMetadata.tag;
        if (this.tagsToMatch.includes(tag2)) {
          const line = tagMetadata.position.start.line;
          const heading2 = this.getHeadingForLine(fileCache, line);
          const lineContent = fileLines[line].trim();
          const newLineIfNeeded = heading2.length != 0 ? this.isWindows() ? "\r\n" : "\n" : "";
          const contentToDisplay = heading2 + newLineIfNeeded + lineContent;
          const lineInfoArray = lineInfosByTag.get(tag2) || [];
          lineInfoArray.push({
            content: contentToDisplay,
            line,
            tag: tag2
          });
          lineInfosByTag.set(tag2, lineInfoArray);
        }
      }
    }
    return lineInfosByTag;
  }
  // Filter LineInfos based on the current filter string
  filterLineInfos(lineInfosByTag) {
    if (this.filterStr === "") {
      return lineInfosByTag;
    }
    const filteredMap = /* @__PURE__ */ new Map();
    const filterStrLower = this.filterStr.toLowerCase();
    for (const [tag2, lineInfos] of lineInfosByTag) {
      const filteredLineInfos = lineInfos.filter((info) => {
        const contentToDisplayLower = info.content.toLowerCase();
        return contentToDisplayLower.includes(filterStrLower) || contentToDisplayLower.match(new RegExp(filterStrLower));
      });
      if (filteredLineInfos.length > 0) {
        filteredMap.set(tag2, filteredLineInfos);
      }
    }
    return filteredMap;
  }
  // Render task items efficiently
  renderTaskItems(container, lineInfosByTag, file) {
    const fragment = new DocumentFragment();
    for (const [tag2, lineInfos] of lineInfosByTag) {
      if (lineInfos.length === 0)
        continue;
      const tagHeader = document.createElement("div");
      tagHeader.className = "tree-item nav-file recent-files-file";
      tagHeader.textContent = tag2 + " ( " + lineInfos.length + " )";
      fragment.appendChild(tagHeader);
      for (const lineInfo of lineInfos) {
        const navFile = document.createElement("div");
        navFile.className = "tree-item nav-file recent-files-file";
        const navFileTitle = document.createElement("div");
        navFileTitle.className = "tree-item-self is-clickable nav-file-title recent-files-title";
        const navFileTitleContent = document.createElement("div");
        navFileTitleContent.className = "tree-item-inner nav-file-title-content recent-files-title-content internal-link self-wrap-content";
        navFileTitleContent.textContent = lineInfo.content;
        navFileTitle.appendChild(navFileTitleContent);
        navFile.appendChild(navFileTitle);
        this.addTaskEventListeners(navFileTitle, file, lineInfo.line);
        fragment.appendChild(navFile);
      }
    }
    container.appendChild(fragment);
  }
  // Add event listeners to task items
  addTaskEventListeners(element, file, line) {
    element.addEventListener("contextmenu", (event) => {
      const menu = new import_obsidian30.Menu();
      menu.addItem(
        (item) => item.setSection("action").setTitle("Open in new tab").setIcon("file-plus").onClick(() => {
          if (file === null) {
            return;
          }
          this.focusFileAtLine(file, "tab", line);
        })
      );
      const abstractFile = this.app.vault.getAbstractFileByPath(file == null ? void 0 : file.path);
      this.app.workspace.trigger(
        "file-menu",
        menu,
        abstractFile,
        "link-context-menu"
      );
      menu.showAtPosition({ x: event.clientX, y: event.clientY });
    });
    element.addEventListener("click", (event) => {
      const newLeaf = import_obsidian30.Keymap.isModEvent(event);
      this.focusFileAtLine(file, newLeaf, line);
    });
  }
  isWindows() {
    return !import_obsidian30.Platform.isAndroidApp && !import_obsidian30.Platform.isIosApp && !import_obsidian30.Platform.isMacOS && !import_obsidian30.Platform.isSafari;
  }
  async onClose() {
  }
  getHeadingForLine(fileCache, lineNumber) {
    if (!fileCache || !fileCache.headings) {
      return "";
    }
    const headings = fileCache.headings;
    let currentHeading = "";
    for (const heading2 of headings) {
      if (heading2.position.start.line <= lineNumber) {
        currentHeading = "# " + heading2.heading;
      } else {
        break;
      }
    }
    return currentHeading;
  }
};

// echoModal.ts
var import_obsidian31 = require("obsidian");
var EchoModal = class extends import_obsidian31.SuggestModal {
  constructor(app2, fileToEcho) {
    super(app2);
    this.fileToEcho = fileToEcho;
    this.fileNameToEcho = fileToEcho.basename;
    this.fileNameLinkToEcho = "[[" + this.fileNameToEcho + "]]";
    this.setPlaceholder(`File to echo: ${this.fileNameToEcho} : Which zk notes you want to put to?`);
    this.setInstructions([
      {
        command: "",
        purpose: `File to echo: ${this.fileNameToEcho} : Which zk notes you want to put to?`
      }
    ]);
    this.keydownHandler = (event) => {
      if (event.ctrlKey && event.altKey && event.shiftKey && event.key === "q") {
        this.close();
      } else if (event.ctrlKey && event.metaKey && event.shiftKey && event.key === "q") {
        this.close();
      } else if (event.metaKey || event.ctrlKey) {
        const key = parseInt(event.key, 10);
        if (key >= 1 && key <= 9) {
          event.preventDefault();
          this.selectElement(key - 1);
        }
      }
    };
    document.addEventListener("keydown", this.keydownHandler);
  }
  selectElement(index) {
    const elements = this.resultContainerEl.querySelectorAll(".suggestion-item");
    if (elements.length > index) {
      const element = elements[index];
      element.click();
    }
  }
  onClose() {
    super.onClose();
    document.removeEventListener("keydown", this.keydownHandler);
  }
  getChildlinkItems(app2, file) {
    const backlinks = app2.metadataCache.getBacklinksForFile(file);
    const backlinksData = backlinks == null ? void 0 : backlinks.data;
    if (!backlinksData) {
      return [];
    }
    let childLinkResult = [];
    for (let [i, v] of backlinksData.entries()) {
      for (let j = 0; j < v.length; j++) {
        const index = v.length > 1 ? "[" + j + "]" : "";
        if (i != file.path) {
          const position = v[j]["position"];
          if (position) {
            const positionLine = position["start"]["line"];
            childLinkResult.push({ path: i, type: "v ", index, heading: "", line: positionLine, ch: 0 });
          }
        }
      }
    }
    return childLinkResult;
  }
  async getSuggestions(query) {
    const lts = this.getChildlinkItems(app, this.fileToEcho);
    const items = [];
    items.push({
      notePath: "",
      lineNumber: 0,
      lineContent: ""
    });
    const readPromises = lts.map(async (lt) => {
      const file = this.app.vault.getAbstractFileByPath(lt.path);
      const content = await this.app.vault.read(file);
      const fileLines = content.split("\n");
      const lineContent = fileLines[lt.line];
      items.push({
        notePath: lt.path,
        lineNumber: lt.line,
        lineContent
      });
    });
    await Promise.all(readPromises);
    return items;
  }
  fuzzyMatch(str, pattern) {
    if (!pattern)
      return true;
    pattern = pattern.split("").reduce((a, b) => `${a}.*${b}`);
    return new RegExp(pattern).test(str);
  }
  getItemText(path) {
    return path.notePath + path.lineContent;
  }
  renderSuggestion(item, el) {
    const pathItem = item.notePath;
    let noteType = getNoteType(item.notePath);
    let prefix = noteType ? noteType.prefix ? noteType.prefix + " " : "" : "";
    const index = this.resultContainerEl.querySelectorAll(".suggestion-item").length;
    const itemIndex = index < 10 ? index + ". " : "    ";
    el.createEl("div", { text: itemIndex + prefix + (pathItem === "" ? "NOT ADD TO ANY ZK" : pathItem) });
    if (item.lineContent.length > 0) {
      el.createEl("small", { text: "     " + item.lineContent });
    }
  }
  async onChooseSuggestion(echoItem, evt) {
    let text = "";
    text += "---\ntags: b/k/s\n---\n\n";
    text += "#e/\u{1F4AB} ";
    text += "[[" + this.fileToEcho.basename + "]]\n\n";
    const { vault } = this.app;
    const path = this.fileToEcho.path;
    const newPath = path.replace(/^([A-Z]\/)/, "$1Echo ");
    const { workspace } = this.app;
    const leaf = workspace.getLeaf(false);
    const fileExists = await vault.adapter.exists(newPath);
    if (fileExists) {
      new import_obsidian31.Notice(`Will not proceed. Echo file "${newPath}" already exist.`);
      return;
    }
    const newFile = await vault.create(newPath, text);
    if (echoItem.notePath === "") {
    } else if (echoItem.lineContent === "") {
      const { vault: vault2 } = this.app;
      const path2 = echoItem.notePath;
      const zkFile = vault2.getAbstractFileByPath(path2);
      const content = await vault2.read(zkFile);
      const text2 = content + "\n- [[" + newFile.basename + "]]";
      await vault2.modify(zkFile, text2);
    } else {
      const zkFile = vault.getAbstractFileByPath(echoItem.notePath);
      await leaf.openFile(zkFile, { active: true });
      const markdownView = app.workspace.getActiveViewOfType(import_obsidian31.MarkdownView);
      const editor = markdownView == null ? void 0 : markdownView.editor;
      if (markdownView == null || editor == null) {
        new import_obsidian31.Notice(`editor or value ${path} not exist. Aborting...`);
        return;
      }
      let result = "";
      for (let i = 0; i < editor.lineCount(); i++) {
        if (i === echoItem.lineNumber) {
          result += editor.getLine(i) + "\n";
          const lineContent = editor.getLine(i);
          const prefix = lineContent.replace(/(\t*- ).*/, "$1");
          result += "	" + prefix + "[[" + newFile.basename + "]]\n";
        } else {
          result += editor.getLine(i) + "\n";
        }
      }
      result = result.replace(/\n$/, "");
      editor.setValue(result);
    }
    await leaf.openFile(newFile, { active: true });
  }
};

// currentNoteSearchFilterView.ts
var import_obsidian32 = require("obsidian");
var VIEW_TYPE_CURRENT_NOTE_ALL_LINE = "current-note-all-line-view";
var CurrentNoteAllLineView = class extends import_obsidian32.ItemView {
  // ms
  constructor(leaf, notesTypeTag) {
    super(leaf);
    this.filterStr = "";
    this.compiledRegex = null;
    this.isUsingRegex = false;
    this.lastFilterTime = 0;
    this.throttleTime = 100;
    this.redraw = async (forceRedraw) => {
      const now = Date.now();
      if (!forceRedraw && now - this.lastFilterTime < this.throttleTime) {
        setTimeout(() => this.redraw(true), this.throttleTime);
        return;
      }
      this.lastFilterTime = now;
      let scrollPosition = 0;
      const contentContainer = this.containerEl.querySelector(".nav-folder.mod-root.scrollable");
      if (contentContainer) {
        scrollPosition = contentContainer.scrollTop;
      }
      const activeFile = app.workspace.getActiveFile();
      if (!activeFile) {
        return;
      }
      if (!forceRedraw && activeFile.path === this.currentNotesPath) {
        return;
      }
      if (activeFile.path !== this.currentNotesPath) {
        this.clearFilter();
      }
      this.currentNotesPath = activeFile.path;
      const f = this.app.vault.getAbstractFileByPath(activeFile.path);
      if (!f) {
        return;
      }
      this.containerEl.empty();
      const searchContainer = this.createSearchUI();
      let noteType = getNoteType(activeFile.path);
      let prefix = noteType ? noteType.prefix ? noteType.prefix + " " : "" : "";
      this.containerEl.createDiv({ cls: "nav-header", text: "Path: " + prefix + activeFile.path });
      const rootEl = this.containerEl.createDiv({ cls: "nav-folder mod-root scrollable" });
      const childrenEl = rootEl.createDiv({ cls: "nav-folder-children" });
      const loadingIndicator = childrenEl.createDiv({
        cls: "nav-file-title",
        text: "Loading content..."
      });
      setTimeout(async () => {
        this.prepareFilter(this.filterStr.toLowerCase());
        const content = await this.app.vault.read(f);
        const fileLines = content.split("\n");
        const fragment = document.createDocumentFragment();
        const batchSize = 100;
        let processedLines = 0;
        const totalLines = fileLines.length;
        const processNextBatch = async () => {
          if (processedLines >= totalLines) {
            loadingIndicator.remove();
            childrenEl.appendChild(fragment);
            if (scrollPosition > 0) {
              setTimeout(() => {
                const newContentContainer = this.containerEl.querySelector(".nav-folder.mod-root.scrollable");
                if (newContentContainer) {
                  newContentContainer.scrollTop = scrollPosition;
                }
              }, 0);
            }
            return;
          }
          loadingIndicator.setText(`Loading... ${Math.round(processedLines / totalLines * 100)}%`);
          const endIndex = Math.min(processedLines + batchSize, totalLines);
          for (let i = processedLines; i < endIndex; i++) {
            const lineContent = fileLines[i];
            const lineContentLower = lineContent.toLowerCase();
            let matchesFilter = false;
            if (!this.filterStr) {
              matchesFilter = true;
            } else if (this.isUsingRegex && this.compiledRegex) {
              matchesFilter = this.compiledRegex.test(lineContent);
            } else {
              matchesFilter = lineContentLower.includes(this.filterStr.toLowerCase());
            }
            if (matchesFilter) {
              this.createLineElement(fragment, f, i, lineContent);
            }
          }
          processedLines = endIndex;
          setTimeout(processNextBatch, 0);
        };
        processNextBatch();
      }, 50);
    };
    this.focusFileAtLine = (file, newLeaf, line) => {
      if (file) {
        const leaf = this.app.workspace.getLeaf(newLeaf);
        leaf.openFile(file).then(() => {
          const view = this.app.workspace.getActiveViewOfType(import_obsidian32.MarkdownView);
          if (view) {
            view.editor.setCursor({ line, ch: 0 });
            if (line > 0) {
              try {
                view.setEphemeralState({ line });
              } catch (error) {
                console.error(error);
              }
            }
          }
        });
      } else {
        new import_obsidian32.Notice("Cannot find a file with that name");
      }
    };
    this.currentNotesPath = notesTypeTag;
  }
  getViewType() {
    return VIEW_TYPE_CURRENT_NOTE_ALL_LINE;
  }
  getDisplayText() {
    return "Current File All Line View";
  }
  async onOpen() {
    this.redraw(true);
  }
  getIcon() {
    return "bullet-list";
  }
  clearFilter() {
    this.filterStr = "";
    this.compiledRegex = null;
    this.isUsingRegex = false;
  }
  prepareFilter(filterStr) {
    if (!filterStr) {
      this.compiledRegex = null;
      this.isUsingRegex = false;
      return;
    }
    this.isUsingRegex = /[.*+?^${}()|[\]\\]/.test(filterStr);
    if (this.isUsingRegex) {
      try {
        this.compiledRegex = new RegExp(filterStr, "i");
      } catch (e) {
        this.compiledRegex = null;
        this.isUsingRegex = false;
      }
    } else {
      this.compiledRegex = null;
    }
  }
  createSearchUI() {
    const searchContainer = this.containerEl.createDiv({ cls: "search-container" });
    const searchField = searchContainer.createEl("input", {
      type: "text",
      placeholder: this.filterStr === "" ? "Filter..." : this.filterStr,
      cls: "width50",
      value: this.filterStr
    });
    let debounceTimeout;
    searchField.addEventListener("input", (event) => {
      const value = event.target.value;
      clearTimeout(debounceTimeout);
      debounceTimeout = setTimeout(() => {
        this.filterStr = value.toLowerCase();
        if (this.filterStr === "" || this.filterStr.length > 2) {
          this.redraw(true);
        }
      }, 300);
    });
    searchField.addEventListener("keydown", (event) => {
      if (event.key === "Enter") {
        clearTimeout(debounceTimeout);
        this.redraw(true);
      }
    });
    const searchButton = searchContainer.createEl("button", {
      text: "Filter",
      cls: "width25"
    });
    searchButton.addEventListener("click", () => {
      this.redraw(true);
    });
    const clearButton = searchContainer.createEl("button", {
      text: "Clear",
      cls: "width25"
    });
    clearButton.addEventListener("click", () => {
      this.clearFilter();
      searchField.value = "";
      this.redraw(true);
    });
    return searchContainer;
  }
  createLineElement(container, file, lineNumber, content) {
    const navFile = document.createElement("div");
    navFile.className = "tree-item nav-file recent-files-file";
    const navFileTitle = document.createElement("div");
    navFileTitle.className = "tree-item-self is-clickable nav-file-title recent-files-title";
    const navFileTitleContent = document.createElement("div");
    navFileTitleContent.className = "tree-item-inner nav-file-title-content recent-files-title-content internal-link self-wrap-content";
    navFileTitleContent.textContent = lineNumber + " : " + content;
    navFileTitle.appendChild(navFileTitleContent);
    navFile.appendChild(navFileTitle);
    navFileTitle.addEventListener("contextmenu", this.createContextMenuHandler(file, lineNumber));
    navFileTitle.addEventListener("click", this.createClickHandler(file, lineNumber));
    container.appendChild(navFile);
  }
  createContextMenuHandler(file, lineNumber) {
    return (event) => {
      const menu = new import_obsidian32.Menu();
      menu.addItem(
        (item) => item.setSection("action").setTitle("Open in new tab").setIcon("file-plus").onClick(() => {
          this.focusFileAtLine(file, "tab", lineNumber);
        })
      );
      const abstractFile = this.app.vault.getAbstractFileByPath(file == null ? void 0 : file.path);
      this.app.workspace.trigger(
        "file-menu",
        menu,
        abstractFile,
        "link-context-menu"
      );
      menu.showAtPosition({ x: event.clientX, y: event.clientY });
    };
  }
  createClickHandler(file, lineNumber) {
    return (event) => {
      const newLeaf = import_obsidian32.Keymap.isModEvent(event);
      this.focusFileAtLine(file, newLeaf, lineNumber);
    };
  }
  isWindows() {
    return !import_obsidian32.Platform.isAndroidApp && !import_obsidian32.Platform.isIosApp && !import_obsidian32.Platform.isMacOS && !import_obsidian32.Platform.isSafari;
  }
  async onClose() {
  }
  getHeadingForLine(fileCache, lineNumber) {
    if (!fileCache || !fileCache.headings || fileCache.headings.length === 0) {
      return "";
    }
    let left = 0;
    let right = fileCache.headings.length - 1;
    let lastValidHeading = null;
    while (left <= right) {
      const mid = Math.floor((left + right) / 2);
      const heading2 = fileCache.headings[mid];
      if (heading2.position.start.line <= lineNumber) {
        lastValidHeading = heading2;
        left = mid + 1;
      } else {
        right = mid - 1;
      }
    }
    return lastValidHeading ? "# " + lastValidHeading.heading : "";
  }
};

// addSpecialCharacterModal.ts
var import_obsidian33 = require("obsidian");
var ALL_SPECIAL_CHARACTER_TYPE = [
  {
    character: " -> ",
    description: " arrow 1",
    additionalInfo: "",
    chinese: ""
  },
  {
    character: "\u3010\u3011",
    description: "New Title",
    additionalInfo: "",
    chinese: ""
  },
  {
    character: "\u2500\u2500 ",
    description: "Sub Title",
    additionalInfo: "",
    chinese: ""
  },
  {
    character: "\u258B",
    description: "Heading 1",
    additionalInfo: "",
    chinese: ""
  },
  {
    character: "\u258D",
    description: "Heading 2",
    additionalInfo: "",
    chinese: ""
  },
  {
    character: "\u2192",
    description: "Arrow 1",
    additionalInfo: "",
    chinese: ""
  },
  {
    character: "\u2937 ",
    description: "Arrow 2",
    additionalInfo: "",
    chinese: ""
  },
  {
    character: "\u25B8 ",
    description: "Arrow 3",
    additionalInfo: "",
    chinese: ""
  },
  {
    character: "\u27A4",
    description: "Arrow 4",
    additionalInfo: "",
    chinese: ""
  },
  {
    character: "\u2022 ",
    description: "Bullet 1",
    additionalInfo: "",
    chinese: ""
  },
  {
    character: "\u2022 \u2022 \u2022\n```\n\u6A19\u984C\u4F7F\u7528\u65B9\u5F62\u62EC\u865F\uFF1A\u3010\u65B0\u7684\u6A19\u984C\u3011\n\u526F\u6A19\u984C\u7528\u6A6B\u7DDA\uFF1A\u2500\u2500 \u65B0\u7684\u526F\u6A19\u984C\n\u5927\u6BB5\u843D\u6A19\u984C\u7528\u65B9\u6846\uFF1A\u258B\n\u5C0F\u6BB5\u843D\u6A19\u984C\u7528\u7D30\u6846\uFF1A\u258D\n\u5E38\u7528\u7B26\u865F\uFF1A\u2937 \u25B8 \u27A4 \u2192 \u2022\n\u2022 \u2022 \u2022\n",
    description: "All Characters",
    additionalInfo: "",
    chinese: ""
  }
];
var AddSpecialCharacterModal = class extends import_obsidian33.FuzzySuggestModal {
  constructor(app2, editor) {
    super(app2);
    this.editor = editor;
  }
  selectElement(index) {
    const elements = this.resultContainerEl.querySelectorAll(".suggestion-item");
    if (elements.length > index) {
      const element = elements[index];
      element.click();
    }
  }
  onClose() {
    super.onClose();
  }
  getItems() {
    return ALL_SPECIAL_CHARACTER_TYPE;
  }
  getItemText(noteType) {
    return noteType.character + " " + noteType.description;
  }
  // Renders each suggestion item.
  renderSuggestion(choosenNoteTypeMatch, el) {
    const noteType = choosenNoteTypeMatch.item;
    const index = this.resultContainerEl.querySelectorAll(".suggestion-item").length;
    const itemIndex = index < 10 ? index + ". " : "    ";
    el.createEl("div", { text: itemIndex + noteType.character });
    if (noteType.description.length > 0) {
      el.createEl("small", { text: "     " + noteType.description });
    }
  }
  containsType(line) {
    return ALL_SPECIAL_CHARACTER_TYPE.filter((noteType) => line.contains(noteType.character)).length > 0;
  }
  // Perform action on the selected suggestion.
  onChooseItem(choosenCharacterType, evt) {
    const selection = this.editor.getSelection();
    const replacedStr = choosenCharacterType.character;
    if (selection.length != 0) {
      this.editor.replaceSelection(replacedStr);
    } else {
      const cursor = this.editor.getCursor();
      this.editor.replaceRange(replacedStr, cursor);
      cursor.ch = cursor.ch + replacedStr.length;
      this.editor.setCursor(cursor);
    }
  }
};

// recentFilesView.ts
var import_obsidian34 = require("obsidian");
var VIEW_TYPE_RECENT_FILE = "recent-file-view";
var RecentFilesView = class extends import_obsidian34.ItemView {
  constructor(leaf, notesTypeTag) {
    super(leaf);
    this.filterStr = "";
    this.redraw = async (forceRedraw) => {
      this.containerEl.empty();
      const fileInfos = [];
      const now = Date.now();
      app.vault.getMarkdownFiles().forEach((f) => {
        if (f.stat.mtime - now > -7 * 24 * 60 * 60 * 1e3) {
          fileInfos.push({
            file: f,
            modifiedTime: f.stat.mtime
          });
        }
      });
      fileInfos.sort((a, b) => b.modifiedTime - a.modifiedTime);
      const rootEl = this.containerEl.createDiv({ cls: "nav-folder mod-root scrollable" });
      const childrenEl = rootEl.createDiv({ cls: "nav-folder-children" });
      for (let fileInfo of fileInfos) {
        const navFile = childrenEl.createDiv({
          cls: "tree-item nav-file recent-files-file"
        });
        const navFileTitle = navFile.createDiv({
          cls: "tree-item-self is-clickable nav-file-title recent-files-title"
        });
        const navFileTitleContent = navFileTitle.createDiv({
          cls: "tree-item-inner nav-file-title-content recent-files-title-content internal-link self-wrap-content"
        });
        const noteType = getNoteType(fileInfo.file.path);
        const prefix = noteType ? noteType.prefix ? noteType.prefix + " " : "" : "";
        navFileTitleContent.setText(prefix + fileInfo.file.path);
        navFileTitle.addEventListener("contextmenu", (event) => {
          const menu = new import_obsidian34.Menu();
          menu.addItem(
            (item) => item.setSection("action").setTitle("Open in new tab").setIcon("file-plus").onClick(() => {
              this.focusFileAtLine(fileInfo.file, "tab", 0);
            })
          );
          this.app.workspace.trigger(
            "file-menu",
            menu,
            fileInfo.file,
            "link-context-menu"
          );
          menu.showAtPosition({ x: event.clientX, y: event.clientY });
        });
        navFileTitle.addEventListener("click", (event) => {
          const newLeaf = import_obsidian34.Keymap.isModEvent(event);
          this.focusFileAtLine(fileInfo.file, newLeaf, 0);
        });
      }
    };
    this.focusFileAtLine = (file, newLeaf, line) => {
      const targetFile = this.app.vault.getFiles().find((f) => f.path === file.path);
      if (targetFile) {
        const leaf = this.app.workspace.getLeaf(newLeaf);
        leaf.openFile(targetFile).then(() => {
          const view = this.app.workspace.getActiveViewOfType(import_obsidian34.MarkdownView);
          if (view) {
            view.editor.setCursor({ line, ch: 0 });
            view.editor.scrollIntoView({ from: { line, ch: 0 }, to: { line, ch: 0 } }, true);
            if (line != 0) {
              const ch = view.editor.getLine(line).length;
              view.editor.setSelection({ line, ch: 0 }, { line, ch });
              view.editor.scrollIntoView({ from: { line, ch: 0 }, to: { line, ch: 0 } }, true);
            }
          }
        });
      } else {
        new import_obsidian34.Notice("Cannot find a file with that name");
      }
    };
    this.currentNotesPath = notesTypeTag;
  }
  getViewType() {
    return VIEW_TYPE_RECENT_FILE;
  }
  getDisplayText() {
    return "Recent File View";
  }
  async onOpen() {
    this.redraw(true);
  }
  getIcon() {
    return "lucide-pencil";
  }
  clearFilter() {
    this.filterStr = "";
  }
  async onClose() {
  }
};

// recentViewedNotesView.ts
var import_obsidian35 = require("obsidian");
var VIEW_TYPE_RECENT_VIEWED_NOTES = "recent-viewed-notes-view";
var RecentViewedNotesView = class extends import_obsidian35.ItemView {
  // Number of items to render at once
  constructor(leaf, notesTypeTag) {
    super(leaf);
    this.filterText = "";
    this.pendingFilterText = "";
    this.batchSize = 20;
    this.redraw = async (forceRedraw) => {
      let scrollPosition = 0;
      const contentContainer = this.containerEl.querySelector(".nav-folder.mod-root.scrollable");
      if (contentContainer) {
        scrollPosition = contentContainer.scrollTop;
      }
      const fragment = document.createDocumentFragment();
      const filterContainerEl = document.createElement("div");
      filterContainerEl.className = "recent-viewed-notes-filter-container";
      fragment.appendChild(filterContainerEl);
      const searchInputWrapperEl = document.createElement("div");
      searchInputWrapperEl.className = "recent-viewed-notes-search-wrapper";
      filterContainerEl.appendChild(searchInputWrapperEl);
      const filterInputEl = document.createElement("input");
      filterInputEl.type = "text";
      filterInputEl.placeholder = "Filter notes...";
      filterInputEl.className = "recent-viewed-notes-filter-input";
      filterInputEl.value = this.pendingFilterText || this.filterText;
      searchInputWrapperEl.appendChild(filterInputEl);
      const searchButtonEl = document.createElement("button");
      searchButtonEl.className = "recent-viewed-notes-search-button";
      (0, import_obsidian35.setIcon)(searchButtonEl, "search");
      searchInputWrapperEl.appendChild(searchButtonEl);
      filterInputEl.addEventListener("input", (e) => {
        const target = e.target;
        this.pendingFilterText = target.value;
        this.debouncedFilter();
      });
      filterInputEl.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
          e.preventDefault();
          this.filterText = this.pendingFilterText;
          this.redraw(false);
        }
      });
      searchButtonEl.addEventListener("click", () => {
        this.filterText = this.pendingFilterText;
        this.redraw(false);
      });
      const recentlyViewedNotes = getRecentNotesWithInfo(this.app, 100);
      const rootEl = document.createElement("div");
      rootEl.className = "nav-folder mod-root scrollable";
      fragment.appendChild(rootEl);
      const childrenEl = document.createElement("div");
      childrenEl.className = "nav-folder-children";
      rootEl.appendChild(childrenEl);
      const filteredNotes = recentlyViewedNotes.filter((noteInfo) => {
        const file = this.app.vault.getAbstractFileByPath(noteInfo.path);
        if (!file || !(file instanceof import_obsidian35.TFile))
          return false;
        if (this.filterText && !file.path.toLowerCase().includes(this.filterText.toLowerCase())) {
          return false;
        }
        return true;
      });
      this.renderBatchedNotes(childrenEl, filteredNotes);
      if (filteredNotes.length === 0) {
        const emptyState = document.createElement("div");
        emptyState.className = "nav-folder-empty-state";
        if (this.filterText) {
          emptyState.textContent = `No notes matching "${this.filterText}"`;
        } else {
          emptyState.textContent = "No recently viewed notes found";
        }
        childrenEl.appendChild(emptyState);
      }
      this.containerEl.empty();
      this.containerEl.appendChild(fragment);
      if (scrollPosition > 0) {
        window.requestAnimationFrame(() => {
          const newContentContainer = this.containerEl.querySelector(".nav-folder.mod-root.scrollable");
          if (newContentContainer) {
            newContentContainer.scrollTop = scrollPosition;
          }
        });
      }
      if (document.activeElement === filterInputEl) {
        filterInputEl.focus();
      }
    };
    this.focusFile = (file, newLeaf) => {
      if (file) {
        const leaf = this.app.workspace.getLeaf(newLeaf);
        leaf.openFile(file).then(() => {
          const view = this.app.workspace.getActiveViewOfType(import_obsidian35.MarkdownView);
          if (view) {
            view.editor.setCursor({ line: 0, ch: 0 });
            view.editor.scrollIntoView({ from: { line: 0, ch: 0 }, to: { line: 0, ch: 0 } }, true);
          }
        });
      } else {
        new import_obsidian35.Notice("Cannot find a file with that name");
      }
    };
    this.currentNotesPath = notesTypeTag;
    this.debouncedFilter = (0, import_obsidian35.debounce)(() => {
      this.filterText = this.pendingFilterText;
      this.redraw(false);
    }, 300, true);
  }
  getViewType() {
    return VIEW_TYPE_RECENT_VIEWED_NOTES;
  }
  getDisplayText() {
    return "Recent Viewed Notes";
  }
  async onOpen() {
    this.redraw(true);
  }
  getIcon() {
    return "history";
  }
  // Render notes in batches to avoid UI freezing
  renderBatchedNotes(container, notes) {
    const fragment = document.createDocumentFragment();
    for (let i = 0; i < notes.length; i++) {
      const noteInfo = notes[i];
      const file = this.app.vault.getAbstractFileByPath(noteInfo.path);
      if (!file || !(file instanceof import_obsidian35.TFile))
        continue;
      const noteEl = this.createNoteElement(file, noteInfo);
      fragment.appendChild(noteEl);
      if ((i + 1) % this.batchSize === 0 && i + 1 < notes.length) {
        window.requestAnimationFrame(() => {
        });
      }
    }
    container.appendChild(fragment);
  }
  // Create a single note element
  createNoteElement(file, noteInfo) {
    const navFile = document.createElement("div");
    navFile.className = "tree-item nav-file recent-viewed-notes-file";
    const navFileTitle = document.createElement("div");
    navFileTitle.className = "tree-item-self is-clickable nav-file-title recent-viewed-notes-title";
    navFile.appendChild(navFileTitle);
    const navFileTitleContent = document.createElement("div");
    navFileTitleContent.className = "tree-item-inner nav-file-title-content recent-viewed-notes-title-content internal-link self-wrap-content";
    const noteType = getNoteType(file.path);
    const prefix = noteType ? noteType.prefix ? noteType.prefix + " " : "" : "";
    navFileTitleContent.textContent = prefix + file.path;
    navFileTitle.appendChild(navFileTitleContent);
    const navFileSubtitle = document.createElement("div");
    navFileSubtitle.className = "tree-item-flair recent-viewed-notes-subtitle";
    const formattedDate = this.getRelativeTimeString(noteInfo);
    navFileSubtitle.textContent = ` \u2022 ${formattedDate}`;
    navFileTitle.appendChild(navFileSubtitle);
    this.addNoteEventListeners(navFileTitle, file);
    return navFile;
  }
  // Add event listeners to note elements
  addNoteEventListeners(element, file) {
    element.addEventListener("contextmenu", (event) => {
      const menu = new import_obsidian35.Menu();
      menu.addItem(
        (item) => item.setSection("action").setTitle("Open in new tab").setIcon("file-plus").onClick(() => {
          this.focusFile(file, "tab");
        })
      );
      this.app.workspace.trigger(
        "file-menu",
        menu,
        file,
        "link-context-menu"
      );
      menu.showAtPosition({ x: event.clientX, y: event.clientY });
    });
    element.addEventListener("click", (event) => {
      const newLeaf = import_obsidian35.Keymap.isModEvent(event);
      this.focusFile(file, newLeaf);
    });
  }
  // Helper method to format the time display based on recency
  getRelativeTimeString(noteInfo) {
    const now = Date.now();
    const mostRecentTime = Math.max(noteInfo.lastViewed, noteInfo.mtime);
    const diffMinutes = Math.floor((now - mostRecentTime) / 6e4);
    if (diffMinutes < 1)
      return "just now";
    if (diffMinutes < 60)
      return `${diffMinutes}m ago`;
    const diffHours = Math.floor(diffMinutes / 60);
    if (diffHours < 24)
      return `${diffHours}h ago`;
    const diffDays = Math.floor(diffHours / 24);
    if (diffDays < 7)
      return `${diffDays}d ago`;
    return new Date(mostRecentTime).toLocaleDateString();
  }
  async onClose() {
  }
};

// calendarView.ts
var import_obsidian36 = require("obsidian");
var VIEW_TYPE_CALENDAR = "calendar-view";
var CalendarView = class extends import_obsidian36.ItemView {
  // 2 seconds
  constructor(leaf) {
    super(leaf);
    this.selectedDateTag = null;
    this.datesWithNotes = /* @__PURE__ */ new Set();
    this.updateDebounceInterval = 2e3;
    this.currentDate = window.moment();
    this.debouncedUpdateDatesWithNotes = (0, import_obsidian36.debounce)(
      this.updateDatesWithNotes.bind(this),
      this.updateDebounceInterval,
      true
    );
  }
  getViewType() {
    return VIEW_TYPE_CALENDAR;
  }
  getDisplayText() {
    return "Calendar View";
  }
  async onOpen() {
    this.containerEl.addClass("obsidian-calendar-container");
    this.registerVaultEvents();
    await this.updateDatesWithNotes();
    await this.render();
    const today = window.moment().format("YYYYMMDD");
    this.displayDateNotes(today);
  }
  /**
   * Register event listeners for vault and metadata changes
   */
  registerVaultEvents() {
    this.vaultChangeRef = this.app.vault.on("modify", async (file) => {
      if (file instanceof import_obsidian36.TFile && file.extension === "md") {
        this.debouncedUpdateDatesWithNotes();
      }
    });
    this.metadataChangeRef = this.app.metadataCache.on("changed", async (file) => {
      if (file && file.path) {
        this.debouncedUpdateDatesWithNotes();
      }
    });
    this.registerEvent(this.vaultChangeRef);
    this.registerEvent(this.metadataChangeRef);
  }
  getIcon() {
    return "calendar";
  }
  // Collect all dates that have notes in the current month view
  async updateDatesWithNotes() {
    this.datesWithNotes.clear();
    const firstDayOfMonth = this.currentDate.clone().startOf("month");
    let startDate = firstDayOfMonth.clone();
    if (firstDayOfMonth.day() === 0) {
      startDate.subtract(6, "days");
    } else {
      startDate.subtract(firstDayOfMonth.day() - 1, "days");
    }
    const lastDayOfMonth = this.currentDate.clone().endOf("month");
    const endDate = lastDayOfMonth.clone();
    if (endDate.day() !== 0) {
      endDate.add(7 - endDate.day(), "days");
    }
    const batchSize = 7;
    const totalDays = endDate.diff(startDate, "days") + 1;
    const batches = Math.ceil(totalDays / batchSize);
    for (let i = 0; i < batches; i++) {
      const batchStart = startDate.clone().add(i * batchSize, "days");
      const batchEnd = import_obsidian36.moment.min(batchStart.clone().add(batchSize - 1, "days"), endDate);
      const batchDate = batchStart.clone();
      while (batchDate.isSameOrBefore(batchEnd, "day")) {
        const dateString = batchDate.format("YYYYMMDD");
        const layerDateTag = `#d/${dateString.slice(0, 4)}/${dateString.slice(4, 6)}/${dateString.slice(6, 8)}`;
        const filesWithTag = filesWhereTagIsUsed(layerDateTag);
        if (filesWithTag.length > 0) {
          this.datesWithNotes.add(dateString);
        }
        batchDate.add(1, "day");
      }
      if (i < batches - 1) {
        await new Promise((resolve) => setTimeout(resolve, 0));
      }
    }
    if (this.containerEl.isShown()) {
      this.renderCalendarDays();
    }
  }
  // Separate render function into smaller parts for better performance
  renderCalendarDays() {
    if (!this.calendarEl)
      return;
    const dayElements = this.calendarEl.querySelectorAll(".calendar-day");
    dayElements.forEach((dayEl) => {
      const dateAttr = dayEl.getAttribute("data-date");
      if (dateAttr) {
        if (this.datesWithNotes.has(dateAttr)) {
          dayEl.classList.add("has-notes");
          dayEl.classList.remove("no-notes");
        } else {
          dayEl.classList.add("no-notes");
          dayEl.classList.remove("has-notes");
        }
      }
    });
  }
  async render() {
    let notesListScrollTop = 0;
    if (this.notesListEl) {
      notesListScrollTop = this.notesListEl.scrollTop;
    }
    const container = this.containerEl.children[1];
    container.empty();
    const fragment = document.createDocumentFragment();
    this.headerEl = document.createElement("div");
    this.headerEl.className = "calendar-header";
    fragment.appendChild(this.headerEl);
    const navigationEl = document.createElement("div");
    navigationEl.className = "calendar-navigation";
    this.headerEl.appendChild(navigationEl);
    const prevYearBtn = document.createElement("button");
    prevYearBtn.className = "calendar-nav-btn";
    prevYearBtn.innerHTML = "&lt;&lt;";
    prevYearBtn.addEventListener("click", async () => {
      this.currentDate.subtract(1, "year");
      await this.updateDatesWithNotes();
      this.render().then(() => {
        const newDate = this.currentDate.format("YYYYMMDD");
        this.displayDateNotes(newDate);
      });
    });
    navigationEl.appendChild(prevYearBtn);
    const prevMonthBtn = document.createElement("button");
    prevMonthBtn.className = "calendar-nav-btn";
    prevMonthBtn.innerHTML = "&lt;";
    prevMonthBtn.addEventListener("click", async () => {
      this.currentDate.subtract(1, "month");
      await this.updateDatesWithNotes();
      this.render().then(() => {
        const newDate = this.currentDate.format("YYYYMMDD");
        this.displayDateNotes(newDate);
      });
    });
    navigationEl.appendChild(prevMonthBtn);
    const monthYearEl = document.createElement("span");
    monthYearEl.className = "calendar-month-year";
    monthYearEl.textContent = this.currentDate.format("MMMM YYYY");
    navigationEl.appendChild(monthYearEl);
    const nextMonthBtn = document.createElement("button");
    nextMonthBtn.className = "calendar-nav-btn";
    nextMonthBtn.innerHTML = "&gt;";
    nextMonthBtn.addEventListener("click", async () => {
      this.currentDate.add(1, "month");
      await this.updateDatesWithNotes();
      this.render().then(() => {
        const newDate = this.currentDate.format("YYYYMMDD");
        this.displayDateNotes(newDate);
      });
    });
    navigationEl.appendChild(nextMonthBtn);
    const nextYearBtn = document.createElement("button");
    nextYearBtn.className = "calendar-nav-btn";
    nextYearBtn.innerHTML = "&gt;&gt;";
    nextYearBtn.addEventListener("click", async () => {
      this.currentDate.add(1, "year");
      await this.updateDatesWithNotes();
      this.render().then(() => {
        const newDate = this.currentDate.format("YYYYMMDD");
        this.displayDateNotes(newDate);
      });
    });
    navigationEl.appendChild(nextYearBtn);
    const todayBtn = document.createElement("button");
    todayBtn.className = "calendar-today-btn";
    todayBtn.textContent = "Today";
    todayBtn.addEventListener("click", async () => {
      this.currentDate = window.moment();
      await this.updateDatesWithNotes();
      this.render().then(() => {
        const today2 = window.moment().format("YYYYMMDD");
        this.displayDateNotes(today2);
      });
    });
    navigationEl.appendChild(todayBtn);
    this.calendarEl = document.createElement("div");
    this.calendarEl.className = "calendar-grid";
    fragment.appendChild(this.calendarEl);
    const weekdays = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
    weekdays.forEach((day) => {
      const dayHeaderEl = document.createElement("div");
      dayHeaderEl.className = "calendar-day-header";
      dayHeaderEl.textContent = day;
      this.calendarEl.appendChild(dayHeaderEl);
    });
    const firstDayOfMonth = this.currentDate.clone().startOf("month");
    let startDate = firstDayOfMonth.clone();
    if (firstDayOfMonth.day() === 0) {
      startDate.subtract(6, "days");
    } else {
      startDate.subtract(firstDayOfMonth.day() - 1, "days");
    }
    const today = window.moment();
    const calendarDaysFragment = document.createDocumentFragment();
    for (let i = 0; i < 42; i++) {
      const date = startDate.clone().add(i, "days");
      const isCurrentMonth = date.month() === this.currentDate.month();
      const isToday = date.isSame(today, "day");
      const dateTag = date.format("YYYYMMDD");
      const isSelected = this.selectedDateTag === dateTag;
      const hasNotes = this.datesWithNotes.has(dateTag);
      const classNames = [
        "calendar-day",
        isCurrentMonth ? "current-month" : "other-month",
        isToday ? "today" : "",
        isSelected ? "selected" : "",
        hasNotes ? "has-notes" : "no-notes"
      ].filter(Boolean).join(" ");
      const dayEl = document.createElement("div");
      dayEl.className = classNames;
      dayEl.setAttribute("data-date", dateTag);
      const dayTextSpan = document.createElement("span");
      dayTextSpan.textContent = date.format("D");
      dayEl.appendChild(dayTextSpan);
      dayEl.addEventListener("click", () => {
        this.displayDateNotes(dateTag);
        document.querySelectorAll(".calendar-day.selected").forEach((el) => {
          el.classList.remove("selected");
        });
        dayEl.classList.add("selected");
      });
      calendarDaysFragment.appendChild(dayEl);
      if (i > 28 && date.month() !== this.currentDate.month() && date.day() === 0) {
        break;
      }
    }
    this.calendarEl.appendChild(calendarDaysFragment);
    this.notesListEl = document.createElement("div");
    this.notesListEl.className = "calendar-notes-list";
    fragment.appendChild(this.notesListEl);
    container.appendChild(fragment);
    if (notesListScrollTop > 0) {
      setTimeout(() => {
        this.notesListEl.scrollTop = notesListScrollTop;
      }, 0);
    }
    if (this.selectedDateTag) {
      this.displayDateNotes(this.selectedDateTag, false);
    }
  }
  // Display notes with the date tag
  async displayDateNotes(dateString, updateSelected = true) {
    if (updateSelected) {
      this.selectedDateTag = dateString;
    }
    while (this.notesListEl.firstChild) {
      this.notesListEl.removeChild(this.notesListEl.firstChild);
    }
    const fragment = document.createDocumentFragment();
    const dateTag = `#d/${dateString}`;
    const journalPath = `J/${dateString}.md`;
    const journalExists = this.fileExists(journalPath);
    const journalContainer = document.createElement("div");
    journalContainer.className = "journal-link-container metadata-container";
    fragment.appendChild(journalContainer);
    const formattedDate = window.moment(dateString, "YYYYMMDD").format("MMMM D, YYYY");
    const linkEl = document.createElement("a");
    linkEl.className = `internal-link${!journalExists ? " is-unresolved" : ""}`;
    linkEl.textContent = `J/${dateString}.md`;
    linkEl.setAttribute("data-href", journalPath);
    journalContainer.appendChild(linkEl);
    linkEl.addEventListener("click", (event) => {
      event.preventDefault();
      const targetPath = journalPath;
      if (journalExists) {
        const targetFile = this.app.vault.getAbstractFileByPath(targetPath);
        if (targetFile instanceof import_obsidian36.TFile) {
          const newLeaf = import_obsidian36.Keymap.isModEvent(event);
          const leaf = this.app.workspace.getLeaf(newLeaf);
          leaf.openFile(targetFile);
        }
      } else {
        const folderPath = targetPath.substring(0, targetPath.lastIndexOf("/"));
        this.app.vault.adapter.exists(folderPath).then((exists) => {
          if (!exists) {
            this.app.vault.createFolder(folderPath).then(() => {
              this.createAndOpenJournalFile(targetPath, dateString);
            });
          } else {
            this.createAndOpenJournalFile(targetPath, dateString);
          }
        });
      }
    });
    const layerDateTag = `#d/${dateString.slice(0, 4)}/${dateString.slice(4, 6)}/${dateString.slice(6, 8)}`;
    const headerEl = document.createElement("div");
    headerEl.className = "note-header";
    headerEl.textContent = `Notes tagged with ${layerDateTag}`;
    fragment.appendChild(headerEl);
    const rootEl = document.createElement("div");
    rootEl.className = "nav-folder mod-root scrollable";
    fragment.appendChild(rootEl);
    const childrenEl = document.createElement("div");
    childrenEl.className = "nav-folder-children";
    rootEl.appendChild(childrenEl);
    const files = filesWhereTagIsUsed(layerDateTag).map((filePath) => this.app.vault.getAbstractFileByPath(filePath)).filter((file) => file !== null);
    this.notesListEl.appendChild(fragment);
    if (files.length === 0) {
      childrenEl.createDiv({ cls: "nav-empty", text: "No notes found with this tag" });
      return;
    }
    const noteDatas = await Promise.all(files.map(async (f) => {
      let noteType = getNoteType(f.path);
      let prefix = noteType ? noteType.prefix + " " : "";
      let lineInfo = [];
      const fileCache = this.app.metadataCache.getFileCache(f);
      if (fileCache && fileCache.tags) {
        const content = await this.app.vault.read(f);
        const fileLines = content.split("\n");
        for (const tag2 of fileCache.tags) {
          if (tag2.tag === layerDateTag) {
            const heading2 = this.getHeadingForLine(fileCache, tag2.position.start.line);
            const lineContent = fileLines[tag2.position.start.line].trim();
            const newLineIfNeeded = heading2.length != 0 ? this.isWindows() ? "\r\n" : "\n" : "";
            lineInfo.push({
              content: heading2 + newLineIfNeeded + lineContent,
              line: tag2.position.start.line
            });
          }
        }
      }
      return {
        title: prefix + f.basename,
        lineInfo,
        file: f
      };
    }));
    noteDatas.forEach((data) => {
      if (data.file === null) {
        return;
      }
      const navFile = childrenEl.createDiv({
        cls: "tree-item nav-file recent-files-file"
      });
      const navFileTitle = navFile.createDiv({
        cls: "tree-item-self is-clickable nav-file-title recent-files-title"
      });
      const navFileTitleContent = navFileTitle.createDiv({
        cls: "tree-item-inner nav-file-title-content recent-files-title-content internal-link self-wrap-content"
      });
      navFileTitleContent.setText(data.title);
      navFileTitle.addEventListener("mouseover", (event) => {
        var _a;
        if (!((_a = data.file) == null ? void 0 : _a.path))
          return;
        this.app.workspace.trigger("hover-link", {
          event,
          source: VIEW_TYPE_CALENDAR,
          hoverParent: rootEl,
          targetEl: navFile,
          linktext: data.file.path
        });
      });
      navFileTitle.addEventListener("contextmenu", (event) => {
        var _a, _b;
        if (data.file === null)
          return;
        if (!((_a = data.file) == null ? void 0 : _a.path))
          return;
        const menu = new import_obsidian36.Menu();
        menu.addItem(
          (item) => item.setSection("action").setTitle("Open in new tab").setIcon("file-plus").onClick(() => {
            if (data.file === null)
              return;
            this.focusFileAtLine(data.file, "tab", 0);
          })
        );
        const file = this.app.vault.getAbstractFileByPath((_b = data.file) == null ? void 0 : _b.path);
        this.app.workspace.trigger(
          "file-menu",
          menu,
          file,
          "link-context-menu"
        );
        menu.showAtPosition({ x: event.clientX, y: event.clientY });
      });
      navFileTitle.addEventListener("click", (event) => {
        if (!data || data.file === null)
          return;
        const newLeaf = import_obsidian36.Keymap.isModEvent(event);
        this.focusFileAtLine(data.file, newLeaf, 0);
      });
      for (const lineInfo of data.lineInfo) {
        const navFileLine = navFile.createDiv({
          cls: "tree-item-self is-clickable nav-file-title recent-files-title"
        });
        const navFileLineContent = navFileLine.createDiv({
          cls: "tree-item-inner nav-file-title-content recent-files-title-content internal-link self-wrap-content self-padding-left-10"
        });
        navFileLineContent.innerText = lineInfo.content;
        navFileLine.addEventListener("mouseover", (event) => {
          var _a;
          if (!((_a = data.file) == null ? void 0 : _a.path))
            return;
          this.app.workspace.trigger("hover-link", {
            event,
            source: VIEW_TYPE_CALENDAR,
            hoverParent: rootEl,
            targetEl: navFileLine,
            linktext: data.file.path
          });
        });
        navFileLine.addEventListener("contextmenu", (event) => {
          var _a, _b;
          if (!((_a = data.file) == null ? void 0 : _a.path))
            return;
          const menu = new import_obsidian36.Menu();
          menu.addItem(
            (item) => item.setSection("action").setTitle("Open in new tab").setIcon("file-plus").onClick(() => {
              if (data.file === null)
                return;
              this.focusFileAtLine(data.file, "tab", lineInfo.line);
            })
          );
          const file = this.app.vault.getAbstractFileByPath((_b = data.file) == null ? void 0 : _b.path);
          this.app.workspace.trigger(
            "file-menu",
            menu,
            file,
            "link-context-menu"
          );
          menu.showAtPosition({ x: event.clientX, y: event.clientY });
        });
        navFileLine.addEventListener("click", (event) => {
          if (!data || data.file === null)
            return;
          const newLeaf = import_obsidian36.Keymap.isModEvent(event);
          this.focusFileAtLine(data.file, newLeaf, lineInfo.line);
        });
      }
    });
  }
  // Helper method to check if a file exists in the vault
  fileExists(path) {
    const file = this.app.vault.getAbstractFileByPath(path);
    return file instanceof import_obsidian36.TFile;
  }
  // Helper method to create and open a journal file
  async createAndOpenJournalFile(path, dateString) {
    const formattedDate = window.moment(dateString, "YYYYMMDD").format("MMMM D, YYYY");
    const content = `---
tags: b/n/j
---

`;
    try {
      const file = await this.app.vault.create(path, content);
      const leaf = this.app.workspace.getLeaf(false);
      await leaf.openFile(file);
    } catch (error) {
      new import_obsidian36.Notice(`Failed to create journal file: ${error}`);
    }
  }
  // Helper method to determine if running on Windows
  isWindows() {
    return !import_obsidian36.Platform.isAndroidApp && !import_obsidian36.Platform.isIosApp && !import_obsidian36.Platform.isMacOS && !import_obsidian36.Platform.isSafari;
  }
  // Helper method to get heading for a line
  getHeadingForLine(fileCache, lineNumber) {
    if (!fileCache || !fileCache.headings) {
      return "";
    }
    const headings = fileCache.headings;
    let currentHeading = "";
    for (const heading2 of headings) {
      if (heading2.position.start.line <= lineNumber) {
        currentHeading = "# " + heading2.heading;
      } else {
        break;
      }
    }
    return currentHeading;
  }
  // Open file and set cursor to specific line
  focusFileAtLine(file, newLeaf, line) {
    const targetFile = this.app.vault.getFiles().find((f) => f.path === file.path);
    if (targetFile) {
      const leaf = this.app.workspace.getLeaf(newLeaf);
      leaf.openFile(targetFile).then(() => {
        const view = this.app.workspace.getActiveViewOfType(import_obsidian36.MarkdownView);
        if (view) {
          view.editor.setCursor({ line, ch: 0 });
          if (line > 0) {
            try {
              view.setEphemeralState({ line });
            } catch (error) {
              console.error(error);
            }
          }
        }
      });
    } else {
      new import_obsidian36.Notice("Cannot find a file with that name");
    }
  }
  async onClose() {
    this.containerEl.removeClass("obsidian-calendar-container");
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var clipboardHistory = [];
var MyPlugin = class extends import_obsidian37.Plugin {
  constructor() {
    super(...arguments);
    this.notesTypeTag = "";
    // Add the calendar view
    this.plugin = this;
    this.lastActiveLeaf = null;
  }
  async activateNoteListView() {
    let leaf;
    [leaf] = this.app.workspace.getLeavesOfType(
      VIEW_TYPE_NOTE_LIST
    );
    if (!leaf) {
      leaf = this.app.workspace.getLeftLeaf(false);
      await (leaf == null ? void 0 : leaf.setViewState({ type: VIEW_TYPE_NOTE_LIST }));
    }
    if (leaf) {
      this.app.workspace.revealLeaf(leaf);
    }
  }
  async activateCurrentNoteOutstandingActionView() {
    let leaf;
    [leaf] = this.app.workspace.getLeavesOfType(
      VIEW_TYPE_CURRENT_OURSTANDING_TASK
    );
    if (!leaf) {
      leaf = this.app.workspace.getLeftLeaf(false);
      await (leaf == null ? void 0 : leaf.setViewState({ type: VIEW_TYPE_CURRENT_OURSTANDING_TASK }));
    }
    if (leaf) {
      this.app.workspace.revealLeaf(leaf);
    }
  }
  async activateCurrentNoteAllLineView() {
    let leaf;
    [leaf] = this.app.workspace.getLeavesOfType(
      VIEW_TYPE_CURRENT_NOTE_ALL_LINE
    );
    if (!leaf) {
      leaf = this.app.workspace.getLeftLeaf(false);
      await (leaf == null ? void 0 : leaf.setViewState({ type: VIEW_TYPE_CURRENT_NOTE_ALL_LINE }));
    }
    if (leaf) {
      this.app.workspace.revealLeaf(leaf);
    }
  }
  async activateRecentFilesView() {
    let leaf;
    [leaf] = this.app.workspace.getLeavesOfType(
      VIEW_TYPE_RECENT_FILE
    );
    if (!leaf) {
      leaf = this.app.workspace.getLeftLeaf(false);
      await (leaf == null ? void 0 : leaf.setViewState({ type: VIEW_TYPE_RECENT_FILE }));
    }
    if (leaf) {
      this.app.workspace.revealLeaf(leaf);
    }
  }
  async activateRecentViewedNotesView() {
    let leaf;
    [leaf] = this.app.workspace.getLeavesOfType(
      VIEW_TYPE_RECENT_VIEWED_NOTES
    );
    if (!leaf) {
      leaf = this.app.workspace.getLeftLeaf(false);
      await (leaf == null ? void 0 : leaf.setViewState({ type: VIEW_TYPE_RECENT_VIEWED_NOTES }));
    }
    if (leaf) {
      this.app.workspace.revealLeaf(leaf);
    }
  }
  async activateCalendarView() {
    let leaf;
    [leaf] = this.app.workspace.getLeavesOfType(
      VIEW_TYPE_CALENDAR
    );
    if (!leaf) {
      leaf = this.app.workspace.getLeftLeaf(false);
      await (leaf == null ? void 0 : leaf.setViewState({ type: VIEW_TYPE_CALENDAR }));
    }
    if (leaf) {
      this.app.workspace.revealLeaf(leaf);
    }
  }
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_NOTE_LIST,
      (leaf) => this.notesTypeView = new NotesTypeView(leaf, this.notesTypeTag)
    );
    this.addRibbonIcon("hash", "Open Note List View", () => {
      this.activateNoteListView();
    });
    this.registerView(
      VIEW_TYPE_CURRENT_OURSTANDING_TASK,
      (leaf) => this.currentNoteOutstandingActionView = new CurrentNoteOutstandingActionView(leaf, this.notesTypeTag)
    );
    this.addRibbonIcon("list-checks", "Open Current Note Outstanding Action View", () => {
      this.activateCurrentNoteOutstandingActionView();
    });
    this.registerView(
      VIEW_TYPE_CURRENT_NOTE_ALL_LINE,
      (leaf) => this.currentNoteAllLineView = new CurrentNoteAllLineView(leaf, this.notesTypeTag)
    );
    this.addRibbonIcon("bullet-list", "Open Current File All Line View", () => {
      this.activateCurrentNoteAllLineView();
    });
    this.registerView(
      VIEW_TYPE_RECENT_FILE,
      (leaf) => this.recentFilesView = new RecentFilesView(leaf, this.notesTypeTag)
    );
    this.addRibbonIcon("lucide-pencil", "Open Recent Files View", () => {
      this.activateRecentFilesView();
    });
    this.registerView(
      VIEW_TYPE_RECENT_VIEWED_NOTES,
      (leaf) => this.recentViewedNotesView = new RecentViewedNotesView(leaf, this.notesTypeTag)
    );
    this.addRibbonIcon("history", "Open Recent Viewed Notes", () => {
      this.activateRecentViewedNotesView();
    });
    this.registerView(
      VIEW_TYPE_CALENDAR,
      (leaf) => this.calendarView = new CalendarView(leaf)
    );
    this.addRibbonIcon("calendar", "Open Calendar View", () => {
      this.activateCalendarView();
    });
    this.addCommand({
      id: "open-calendar-view",
      name: "Open Calendar View",
      icon: "calendar",
      callback: () => {
        this.activateCalendarView();
      }
    });
    this.addCommand({
      id: "open-recent-viewed-notes-view",
      name: "Open Recent Viewed Notes View",
      icon: "history",
      callback: () => {
        this.activateRecentViewedNotesView();
        this.recentViewedNotesView.redraw(true);
      }
    });
    this.app.workspace.onLayoutReady(() => {
      this.app.metadataCache.on("changed", async (file) => {
        if (this.notesTypeView) {
          this.notesTypeView.redraw();
        }
        if (this.currentNoteOutstandingActionView) {
          this.currentNoteOutstandingActionView.redraw(true);
        }
        if (this.currentNoteAllLineView) {
          this.currentNoteAllLineView.redraw(true);
        }
        if (this.recentViewedNotesView) {
          this.recentViewedNotesView.redraw(true);
        }
      });
      this.app.workspace.on("active-leaf-change", (leaf) => {
        if (!leaf) {
          return;
        }
        if (leaf.view instanceof import_obsidian37.MarkdownView) {
          if (this.currentNoteOutstandingActionView) {
            this.currentNoteOutstandingActionView.redraw(false);
          }
          if (this.currentNoteAllLineView) {
            this.currentNoteAllLineView.redraw(false);
          }
          if (this.recentFilesView) {
            this.recentFilesView.redraw(false);
          }
          if (this.recentViewedNotesView) {
            this.recentViewedNotesView.redraw(false);
          }
        }
      });
    });
    if (navigator.clipboard) {
      document.addEventListener("copy", (event) => {
        var _a;
        const copiedText = (_a = event.clipboardData) == null ? void 0 : _a.getData("text/plain");
        if (copiedText != null) {
          this.addToClipboardHistory(copiedText);
        }
      });
      document.addEventListener("cut", (event) => {
        var _a;
        const copiedText = (_a = event.clipboardData) == null ? void 0 : _a.getData("text/plain");
        if (copiedText != null) {
          this.addToClipboardHistory(copiedText);
        }
      });
    } else {
      console.log("Clipboard API is not supported in this browser.");
    }
    ["n", "l", "w", "d", "a", "1", "2", "3", "4", "5", "6", "7"].forEach((t) => {
      this.addActionIcon(t);
      this.addActionCommand(t);
    });
    ["n", "w"].forEach((t) => {
      this.addNewLaterActionIcon(t);
      this.addNewLaterAction(t);
    });
    this.addCommand({
      id: "obsidian-remove-clipboard-content",
      name: "RC Obsidian Remove Clipboard Content",
      icon: "obsidian-remove-clipboard-content",
      editorCallback: (editor, view) => {
        new ClipboardRemovalModal(this.app, editor, clipboardHistory).open();
      }
    });
    this.addObsidianIcon("auto-correct", "AC");
    this.addCommand({
      id: "auto-correct",
      name: "Auto Correct AC",
      icon: "auto-correct",
      editorCallback: (editor, view) => {
        const cursor = editor.getCursor();
        const value = editor.getValue();
        let modifiedValue = value.split("\n").map((line) => {
          var l2 = line.replace(/10分/g, "\u5341\u5206").replace(/裏/g, "\u88E1").replace(/大佬/g, "\u5927\u8166");
          if (/[[\u4E00-\u9FFF]]/.test(l2)) {
            l2 = l2.replace(/ *, */g, "\uFF0C").replace(/ *\? */g, "\uFF1F").replace(/ *: */g, "\uFF1A").replace(/ *; */g, "\uFF1B").replace(/ *! */g, "\uFF01");
          }
          return l2;
        }).join("\n");
        modifiedValue = modifiedValue.replace(/(\[\[[^\]]*\]\])|([a-zA-Z0-9])([\u4E00-\u9FFF])/g, function(match, wikilink, latin, chinese) {
          return wikilink || latin + " " + chinese;
        }).replace(/(\[\[[^\]]*\]\])|([\u4E00-\u9FFF])([a-zA-Z0-9])/g, function(match, wikilink, chinese, latin) {
          return wikilink || chinese + " " + latin;
        });
        editor.setValue(modifiedValue);
        editor.setCursor(cursor);
      }
    });
    this.addObsidianIcon("find-broken-link", "BL");
    this.addCommand({
      id: "find-broken-link",
      name: "Find Broken Link BL",
      icon: "find-broken-link",
      editorCallback: (editor, view) => {
        if (view.file.path !== "I/Broken Link.md") {
          const cursor = editor.getCursor();
          const line = cursor.line;
          const lineContent = editor.getLine(line);
          if (/\[\[.*[:?\/\\<>].*\]\]/.test(lineContent)) {
            new import_obsidian37.Notice("Trying to fix broken line in current line: " + lineContent);
            editor.setLine(
              line,
              lineContent.replace(/:/g, "_").replace(/\?/g, "_").replace(/\//g, "_").replace(/\\/g, "_").replace(/</g, "_").replace(/>/g, "_").replace(/^(parent\d+)_ /, "$1: ").replace(/^(title\d+)_ /, "$1: ")
            );
          } else {
            const unresolvedLinks2 = this.app.metadataCache.unresolvedLinks;
            const brokenLinkRecord = unresolvedLinks2[view.file.path];
            if (brokenLinkRecord == null) {
              new import_obsidian37.Notice("No broken link found in this file");
              return;
            }
            const brokenLinks = Object.keys(brokenLinkRecord);
            if (brokenLinks == null || brokenLinks.length == 0) {
              new import_obsidian37.Notice("No broken link found in this file");
              return;
            }
            for (let i = line + 1; i < editor.lineCount(); i++) {
              const lineContent2 = editor.getLine(i);
              for (let b = 0; b < brokenLinks.length; b++) {
                const brokenLink = brokenLinks[b];
                if (lineContent2.contains("[[" + brokenLink + "]]")) {
                  editor.setCursor({ line: i, ch: 0 });
                  editor.scrollIntoView({ from: { line: i, ch: 0 }, to: { line: i, ch: 0 } }, true);
                  new import_obsidian37.Notice("Navigated to next Broken link starting from cursor");
                  return;
                }
              }
            }
            new import_obsidian37.Notice("No broken link found after cursor line in this file");
          }
          return;
        }
        let count = 0;
        let result = "";
        const unresolvedLinks = this.app.metadataCache.unresolvedLinks;
        for (const [key, value] of Object.entries(unresolvedLinks)) {
          let v = "";
          for (const [k1, v1] of Object.entries(value)) {
            v += k1 + ":" + v1 + ", ";
          }
          v = v.replace(/, $/, "");
          if (v !== "") {
            result += "- [[" + key.replace(/\.md$/, "") + "]]";
            result += "\n";
            for (const [k2, v2] of Object.entries(value)) {
              result += "	- " + k2.replace(/\.md$/, "");
              result += "\n";
            }
            count++;
          }
        }
        editor.setValue(result);
        new import_obsidian37.Notice("Updated broken link. count=" + count);
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `5`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `5`
        }
      ]
    });
    this.addCommand({
      id: "previous-unfinished-action",
      name: "PA Previous unfinished action",
      icon: "chevrons-up",
      editorCallback: (editor, view) => {
        const cursor = editor.getCursor();
        const line = cursor.line;
        const lineContent = editor.getLine(line);
        for (let i = line - 1; i >= 0; i--) {
          const lineContent2 = editor.getLine(i);
          if (/ #[nw][nlw]/.test(lineContent2) || /#[nw][nlw] /.test(lineContent2) || / #t[tme]/.test(lineContent2) || /#t[tme] /.test(lineContent2)) {
            editor.setCursor({ line: i, ch: 0 });
            editor.scrollIntoView({ from: { line: i, ch: 0 }, to: { line: i, ch: 0 } }, true);
            new import_obsidian37.Notice("Navigated to previous unfinished action starting from cursor");
            return;
          }
        }
        new import_obsidian37.Notice("No unfinished action found after cursor line in this file");
      }
      /*,
      hotkeys: [
      	{
      		modifiers: [`Ctrl`, `Meta`, `Shift`],
      		key: `k`,
      	},
      	{
      		modifiers: [`Ctrl`, `Alt`, `Shift`],
      		key: `k`,
      	},
      ]
      	*/
    });
    this.addCommand({
      id: "next-unfinished-action",
      name: "NA Next unfinished action",
      icon: "chevrons-down",
      editorCallback: (editor, view) => {
        const cursor = editor.getCursor();
        const line = cursor.line;
        const lineContent = editor.getLine(line);
        for (let i = line + 1; i < editor.lineCount(); i++) {
          const lineContent2 = editor.getLine(i);
          if (/ #[nw][nlw]/.test(lineContent2) || /#[nw][nlw] /.test(lineContent2) || / #t[tme]/.test(lineContent2) || /#t[tme] /.test(lineContent2)) {
            editor.setCursor({ line: i, ch: 0 });
            editor.scrollIntoView({ from: { line: i, ch: 0 }, to: { line: i, ch: 0 } }, true);
            new import_obsidian37.Notice("Navigated to next unfinished action starting from cursor");
            return;
          }
        }
        new import_obsidian37.Notice("No unfinished action found after cursor line in this file");
      }
      /*,
      hotkeys: [
      	{
      		modifiers: [`Ctrl`, `Meta`, `Shift`],
      		key: `j`,
      	},
      	{
      		modifiers: [`Ctrl`, `Alt`, `Shift`],
      		key: `j`,
      	},
      ]*/
    });
    this.addCommand({
      id: "open-tag-search",
      name: "Open tag search",
      icon: "hash",
      callback: () => {
        const searchPlugin = this.app.internalPlugins.getPluginById("global-search");
        const search = searchPlugin && searchPlugin.instance;
        if (searchPlugin && searchPlugin.instance) {
          new TagSearchModal(this.app, search, this.plugin).open();
        } else {
          new import_obsidian37.Notice("Please enable the search core plugin!");
        }
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `s`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `s`
        }
      ]
    });
    this.addCommand({
      id: "open-tag-search",
      name: "Open tag search",
      icon: "hash",
      callback: () => {
        const searchPlugin = this.app.internalPlugins.getPluginById("global-search");
        const search = searchPlugin && searchPlugin.instance;
        if (searchPlugin && searchPlugin.instance) {
          new TagSearchModal(this.app, search, this.plugin).open();
        } else {
          new import_obsidian37.Notice("Please enable the search core plugin!");
        }
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `s`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `s`
        }
      ]
    });
    this.addCommand({
      id: "open-current-outstanding-action-view",
      name: "Open Current Outstanding Action View",
      icon: "list-checks",
      callback: () => {
        this.activateCurrentNoteOutstandingActionView();
        this.currentNoteOutstandingActionView.redraw(true);
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `t`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `t`
        }
      ]
    });
    this.addCommand({
      id: "open-current-file-all-line-view",
      name: "Open Current File All Line View",
      icon: "bullet-list",
      callback: () => {
        this.activateCurrentNoteAllLineView();
        this.currentNoteAllLineView.redraw(true);
      }
    });
    this.addCommand({
      id: "query-orphan-notes-by-tag",
      name: "Query orphan notes by tag",
      editorCallback: (editor, view) => {
        new QueryOrphanNotesByTagModal(this.app, editor, view).open();
      }
    });
    this.addObsidianIcon("obsidian-paste", "\u2318V");
    this.addCommand({
      id: "obsidian-paste",
      name: "Obsidian Paste",
      icon: "obsidian-paste",
      editorCallback: (editor, view) => {
        new ClipboardPasteModal(this.app, editor, clipboardHistory).open();
      },
      hotkeys: [
        {
          modifiers: [`Meta`, `Shift`],
          key: `v`
        }
      ]
    });
    this.addObsidianIcon("update-note-type-icon", "NT");
    this.addCommand({
      id: "update-note-type",
      name: "Update Note Type",
      icon: `update-note-type-icon`,
      editorCallback: (editor, view) => {
        new UpdateNoteTypeModal(this.app, editor, view.file).open();
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `c`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `c`
        }
      ]
    });
    this.addObsidianIcon("bake-aggregate-to-clipboard", "BS");
    this.addCommand({
      id: "bake-aggregate-to-clipboard",
      name: "Bake aggregate to clipboard",
      icon: `bake-aggregate-to-clipboard`,
      editorCallback: (editor, view) => {
        var _a;
        let text = "# " + view.file.basename + "\n\n" + editor.getValue();
        const forwardlinks = (_a = this.app.metadataCache.getFileCache(this.view.file)) == null ? void 0 : _a.links;
        if (forwardlinks != null) {
          forwardlinks.forEach((link) => {
            var _a2, _b;
            const file = this.app.metadataCache.getFirstLinkpathDest(link.link, this.view.file.path);
            if (file != null) {
              text += "\n\n# " + link.link + "\n\n" + ((_b = (_a2 = this.app.vault.getAbstractFileByPath(file.path)) == null ? void 0 : _a2.cachedData) == null ? void 0 : _b.text);
            }
          });
        }
        navigator.clipboard.writeText(text).then(() => {
          new import_obsidian37.Notice("copied to clipboard!");
        });
      }
      /*,
      hotkeys: [
      	{
      		modifiers: [`Ctrl`, `Meta`, `Shift`],
      		key: `c`,
      	},
      	{
      		modifiers: [`Ctrl`, `Alt`, `Shift`],
      		key: `c`,
      	},
      ]*/
    });
    this.addCommand({
      id: "open-recent-days-schedule-with-updated-schedule",
      name: "OR 3 Days Open Recent Days Updated Schedule",
      icon: "open-recent-day-schedule-icon",
      callback: async () => {
        const { vault } = this.app;
        const scheduleNoteWithoutMd = "D/Scheduling";
        const scheduleNote = `${scheduleNoteWithoutMd}.md`;
        if (vault.getAbstractFileByPath(scheduleNote) == null) {
          await vault.create(scheduleNote, "");
        }
        let noteContent = "";
        Array.from(Array(7).keys()).forEach((i) => noteContent += this.getQueryDateString(i, scheduleNoteWithoutMd));
        vault.modify(vault.getAbstractFileByPath(scheduleNote), noteContent);
        this.addActionNoteContent(vault, "D", "Query W now actions", "Weekly Schedule W", "w");
        this.addActionNoteContent(vault, "D", "Query N now actions", "Weekly Schedule N", "n");
        this.add3DaysActionNoteContent(vault);
        new import_obsidian37.Notice("Updated schedule");
        const { workspace } = this.app;
        const dashboardCanvas = "D/Query Schedule and Actions next 3 days.md";
        const mode = this.app.vault.getConfig("defaultViewMode");
        const leaf = workspace.getLeaf(false);
        await leaf.openFile(vault.getAbstractFileByPath(dashboardCanvas), {
          active: true
          /* mode */
        });
      }
    });
    this.addObsidianIcon("update-scheduling-icon", "US");
    this.addCommand({
      id: "update-scheduling",
      name: "Update Scheduling",
      icon: "update-scheduling-icon",
      callback: async () => {
        const { vault } = this.app;
        const scheduleNoteWithoutMd = "D/Scheduling";
        const scheduleNote = `${scheduleNoteWithoutMd}.md`;
        if (vault.getAbstractFileByPath(scheduleNote) == null) {
          await vault.create(scheduleNote, "");
        }
        let noteContent = "";
        Array.from(Array(7).keys()).forEach((i) => noteContent += this.getQueryDateString(i, scheduleNoteWithoutMd));
        vault.modify(vault.getAbstractFileByPath(scheduleNote), noteContent);
        this.addActionNoteContent(vault, "D", "Query W now actions", "Weekly Schedule W", "w");
        this.addActionNoteContent(vault, "D", "Query N now actions", "Weekly Schedule N", "n");
        this.add3DaysActionNoteContent(vault);
        new import_obsidian37.Notice("Updated schedule");
      }
      /*,
      hotkeys: [
      	{
      		modifiers: [`Ctrl`, `Meta`, `Shift`],
      		key: `u`,
      	},
      	{
      		modifiers: [`Ctrl`, `Alt`, `Shift`],
      		key: `u`,
      	},
      ]*/
    });
    this.addObsidianIcon("open-recent-day-schedule-icon", "OR");
    this.addCommand({
      id: "open-recent-days-schedule",
      name: "Open Recent Days Schedule",
      icon: "open-recent-day-schedule-icon",
      callback: async () => {
        const { vault, workspace } = this.app;
        const dashboardCanvas = "D/Query Schedule and Actions next 3 days.md";
        const leaf = workspace.getLeaf(false);
        await leaf.openFile(vault.getAbstractFileByPath(dashboardCanvas), { active: true });
      }
    });
    this.addObsidianIcon("open-inbox-icon", "OI");
    this.addCommand({
      id: "open-inbox",
      name: "OI Open Inbox",
      icon: "open-inbox-icon",
      callback: async () => {
        const { vault, workspace } = this.app;
        const inboxMd = "I/Inbox.md";
        const leaf = workspace.getLeaf(false);
        await leaf.openFile(vault.getAbstractFileByPath(inboxMd), { active: true });
        const view = this.app.workspace.getActiveViewOfType(import_obsidian37.MarkdownView);
        if (view) {
          const editor = view.editor;
          const line = editor.lastLine();
          const ch = editor.getLine(line).length;
          editor.setCursor({ line, ch });
          editor.scrollIntoView({ from: { line, ch: 0 }, to: { line, ch: 0 } }, true);
        }
      }
    });
    this.addObsidianIcon("open-playground-icon", "OP");
    this.addCommand({
      id: "open-playground",
      name: "OP Open Playground",
      icon: "open-playground-icon",
      callback: async () => {
        new OpenPlaygroundModal(this.app).open();
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `p`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `p`
        }
      ]
    });
    this.addObsidianIcon("open-as-myself-icon", "MY");
    this.addCommand({
      id: "open-as-myself",
      name: "MY Open As Myself",
      icon: "open-as-myself-icon",
      callback: async () => {
        const { vault, workspace } = this.app;
        const inboxMd = "C/As Myself.md";
        const leaf = workspace.getLeaf(false);
        await leaf.openFile(vault.getAbstractFileByPath(inboxMd), { active: true });
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `m`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `m`
        }
      ]
    });
    this.addObsidianIcon("open-braindump-icon", "OB");
    this.addCommand({
      id: "open-braindump",
      name: "OB Open BrainDump",
      icon: "open-braindump-icon",
      callback: async () => {
        const { vault, workspace } = this.app;
        const inboxMd = "I/Brain Dump.md";
        const leaf = workspace.getLeaf(false);
        await leaf.openFile(vault.getAbstractFileByPath(inboxMd), { active: true });
      }
    });
    this.addObsidianIcon("mark-action-complate", "MC");
    this.addCommand({
      id: "mark-action-complate",
      name: "MC Mark action complete",
      icon: "mark-action-complate",
      editorCallback: async (editor, view) => {
        const { vault, workspace } = this.app;
        const clipboardValue = await navigator.clipboard.readText();
        const a = clipboardValue.split(" -> ");
        let dateTag = "";
        let lineToSearch = "";
        if (a.length == 1) {
          new import_obsidian37.Notice("no -> " + clipboardValue);
          return;
        } else if (a.length == 2) {
          lineToSearch = a[0];
          dateTag = a[1];
        } else {
          new import_obsidian37.Notice("a.length > 2 " + clipboardValue);
          return;
        }
        for (let i = 0; i < editor.lineCount(); i++) {
          const lineContent = editor.getLine(i);
          if (lineContent.contains(lineToSearch)) {
            const replacedLine = lineContent + " " + dateTag;
            const replacedLine2 = replacedLine.replace("#nn ", "#nd ").replace("#nl ", "#nd ").replace("#nw ", "#nd ").replace("#na ", "#nd ").replace("#wn ", "#wd ").replace("#wl ", "#wd ").replace("#ww ", "#wd ").replace("#wa ", "#wd ");
            editor.setLine(i, replacedLine2);
            editor.setCursor({ line: i, ch: 0 });
            view.setEphemeralState({ line: i });
            new import_obsidian37.Notice("Marked action to finish");
            return;
          }
        }
        new import_obsidian37.Notice("Cannot find action in task notes :" + lineToSearch);
      }
    });
    this.addObsidianIcon("move-weekly-action", "WA");
    this.addCommand({
      id: "move-weekly-action",
      name: "WA Move weekly action",
      icon: "move-weekly-action",
      editorCallback: async (editor, view) => {
        const { vault, workspace } = this.app;
        const origFilePath = view.file.path;
        const cursor = editor.getCursor();
        let origLinec = cursor.line;
        let linec = cursor.line;
        let header = "";
        while (linec > 0) {
          const lineContentc = editor.getLine(linec);
          if (lineContentc.match(/^#+ /)) {
            header = lineContentc.replace(/^#+ /, "");
            header = header.replace(/^(\d{4})-(\d{2})-(\d{2}) .*/, " #d/$1/$2/$3");
            break;
          }
          linec--;
        }
        if (header === "") {
          new import_obsidian37.Notice("No header found");
          return;
        }
        console.log("header: " + header);
        let origLineContent = editor.getLine(editor.getCursor().line);
        let lineContent = editor.getLine(editor.getCursor().line);
        console.log(lineContent);
        lineContent = lineContent.replace(" /NPush", "");
        lineContent = lineContent.replace(" /WPush", "");
        lineContent = lineContent.replace(" /NWait", "");
        lineContent = lineContent.replace(" /WWait", "");
        lineContent = lineContent.replace(" /NPush", "");
        lineContent = lineContent.replace(" /Done", "");
        lineContent = lineContent.replace(" /Event", "");
        lineContent = lineContent.replace(" /One step at a time", "");
        lineContent = lineContent.replace(" /Daily", "");
        lineContent = lineContent.replace(" /NDone", "");
        lineContent = lineContent.replace(" /WDone", "");
        lineContent = lineContent.replace(" /NPush", "");
        lineContent = lineContent.replace(" /\u77C7\u77C7\u98EF\u98EF", "");
        lineContent = lineContent.replace(" /\u89AA\u670B\u597D\u53CB", "");
        lineContent = lineContent.replace(" /Body Status", "");
        lineContent = lineContent.replace("\u2705 ", "");
        lineContent = lineContent.replace("\u274E ", "");
        lineContent = lineContent.replace(/^\t*- /, "");
        const a = lineContent.split(" -> ");
        let noteFile = "";
        let lineToSearch = "";
        if (a.length == 1) {
          lineToSearch = a[0];
          new import_obsidian37.Notice("no link " + lineContent);
          return;
        } else if (a.length == 2) {
          noteFile = a[0];
          if (!noteFile.contains("[[")) {
            new import_obsidian37.Notice("no link " + lineContent);
            return;
          }
          noteFile = noteFile.replace("[[", "").replace("]]", "");
          console.log(noteFile);
          lineToSearch = a[1].replace("[WF] ", "");
        } else {
          new import_obsidian37.Notice("a.length > 2 " + lineContent);
          return;
        }
        const file = app.metadataCache.getFirstLinkpathDest(noteFile, noteFile);
        if (!file) {
          new import_obsidian37.Notice("File " + noteFile + " not found");
          return;
        }
        console.log("`" + file.path + "`");
        console.log("`" + lineToSearch + "`");
        const deLink = origLineContent.replace("[[" + noteFile + "]]", noteFile);
        console.log("delink=" + deLink);
        editor.setLine(origLinec, deLink);
        const leaf = workspace.getLeaf(false);
        navigator.clipboard.writeText(lineToSearch).then(() => {
          new import_obsidian37.Notice("Copied to clipboard: " + lineToSearch);
        }).then(() => {
          return leaf.openFile(vault.getAbstractFileByPath(file.path), { active: true });
        }).then(() => {
          const view2 = this.app.workspace.getActiveViewOfType(import_obsidian37.MarkdownView);
          if (!view2) {
            new import_obsidian37.Notice("No view found");
            return;
          }
          const editor2 = view2.editor;
          if (!editor2) {
            new import_obsidian37.Notice("No editor found");
            return;
          }
          const lineCount = editor2.lineCount();
          let found = false;
          for (let i = 0; i < lineCount; i++) {
            const lineContent2 = editor2.getLine(i);
            if (lineContent2.contains(lineToSearch)) {
              editor2.setCursor({ line: i, ch: 0 });
              if (editor2.getLine(i).contains(" #d/")) {
              } else {
                editor2.setLine(i, lineContent2 + " " + header);
              }
              try {
                view.setEphemeralState({ line: i });
              } catch (error) {
                console.error(error);
              }
              return true;
            }
          }
          return false;
        }).then((found) => {
          if (found) {
            new import_obsidian37.Notice("Found line: " + lineToSearch);
            return Promise.reject();
          } else {
            new import_obsidian37.Notice("Not found line: " + lineToSearch);
            new import_obsidian37.Notice("Trying to open back : " + origFilePath);
            return leaf.openFile(vault.getAbstractFileByPath(origFilePath), { active: true });
          }
        }).then(() => {
          console.log("aaa");
          const view3 = this.app.workspace.getActiveViewOfType(import_obsidian37.MarkdownView);
          if (!view3) {
            new import_obsidian37.Notice("No view3 found");
            return;
          }
          const editor2 = view3.editor;
          if (!editor2) {
            new import_obsidian37.Notice("No editor found");
            return;
          }
          editor2.setLine(origLinec, origLineContent);
          editor2.setCursor({ line: origLinec, ch: 0 });
          try {
            view.setEphemeralState({ line: origLinec });
          } catch (error) {
            console.error(error);
          }
          new import_obsidian37.Notice("Not found line: " + lineToSearch);
          return;
        }).catch((error) => {
          if (error) {
            console.error(error);
          }
        });
      }
      /*
      ,
      hotkeys: [
      	{
      		modifiers: [`Ctrl`, `Meta`, `Shift`],
      		key: `b`,
      	},
      	{
      		modifiers: [`Ctrl`, `Alt`, `Shift`],
      		key: `b`,
      	}
      ]
      	*/
    });
    this.addObsidianIcon("open-bored-icon", "IB");
    this.addCommand({
      id: "open-board",
      name: "IB Open When I am Bored",
      icon: "open-bored-icon",
      callback: async () => {
        const { vault, workspace } = this.app;
        const inboxMd = "I/When I am Bored.md";
        const leaf = workspace.getLeaf(false);
        await leaf.openFile(vault.getAbstractFileByPath(inboxMd), { active: true });
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `b`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `b`
        }
      ]
    });
    this.addCommand({
      id: "open-notice",
      name: "Open Notice",
      callback: () => {
        new import_obsidian37.Notice("Test Test", 0);
      }
    });
    this.addObsidianIcon("format-all-notes-custom", "FA");
    this.addCommand({
      id: "format-all-notes-custom",
      name: "FA Format All Notes (Custom usage)",
      icon: `format-all-notes-custom`,
      callback: async () => {
        const vault = this.app.vault;
        let startCount = 0;
        let finishedCount = 0;
        const files = vault.getMarkdownFiles();
        new import_obsidian37.Notice("all=" + files.length);
        console.log("all=" + files.length);
        for (const file of files) {
          console.log("s: " + startCount);
          vault.read(file).then((content) => {
            const modifiedValue = tidyUpFrontMatterOnValue(content);
            return vault.modify(file, modifiedValue);
          }).then(() => {
            console.log("f: " + finishedCount);
            finishedCount++;
            if (finishedCount == files.length) {
              console.log("finished");
              new import_obsidian37.Notice("finished");
            }
          });
          startCount++;
        }
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `1`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `1`
        }
      ]
    });
    this.addObsidianIcon("tw-fix-broken-link", ":_");
    this.addCommand({
      id: "tw-fix-broken-link",
      name: "BL Fix TW Broken Link",
      icon: `tw-fix-broken-link`,
      editorCallback: (editor, view) => {
        const cursor = editor.getCursor();
        const line = cursor.line;
        const lineContent = editor.getLine(line);
        editor.setLine(
          line,
          lineContent.replace(/:/g, "_").replace(/\?/g, "_").replace(/\//g, "_").replace(/</g, "_").replace(/>/g, "_").replace(/^(parent\d+)_ /, "$1: ").replace(/^(title\d+)_ /, "$1: ")
        );
      }
      /*,
      hotkeys: [
      	{
      		modifiers: [`Ctrl`, `Meta`, `Shift`],
      		key: `5`,
      	},
      	{
      		modifiers: [`Ctrl`, `Alt`, `Shift`],
      		key: `5`,
      	},
      ]*/
    });
    this.addObsidianIcon("format-notes-custom", "FN");
    this.addCommand({
      id: "format-notes-custom",
      name: "FN Format Notes (Custom usage)",
      icon: `format-notes-custom`,
      editorCallback: (editor, view) => {
        tidyUpFrontMatteronEditor(editor);
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `2`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `2`
        }
      ]
    });
    this.addObsidianIcon("tw-get-parent-link", "[]");
    this.addCommand({
      id: "tw-get-parent-link",
      name: "tw-get-parent-link",
      icon: `tw-get-parent-link`,
      editorCallback: (editor, view) => {
        const cursor = editor.getCursor();
        const line = cursor.line;
        const ch = cursor.ch;
        const lineContent = editor.getLine(line);
        if (/^parent\d+: /.test(lineContent) || /^\t+- parent\d+: /.test(lineContent)) {
          const parentLink = lineContent.replace(/^parent\d+: /, "").replace(/^\t+- parent\d+: /, "").replace(/"/g, "").replace(/\[\[/, "").replace(/\]\]/, "");
          navigator.clipboard.writeText(parentLink).then(() => {
            if (line == 0) {
              editor.setValue("");
            } else {
              const previousLine = editor.getLine(line - 1);
              editor.replaceRange("", { line: line - 1, ch: previousLine.length }, { line, ch: lineContent.length });
            }
            editor.setValue(editor.getValue().replace(/^---\n+---\n/, "---\ntags: b/n/s\n---\n").replace(/\n$/, ""));
            editor.setCursor({ line, ch: ch > editor.getLine(line).length ? editor.getLine(line).length : ch });
            new import_obsidian37.Notice("Copied to clipboard: " + parentLink);
          });
        }
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `y`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `y`
        }
      ]
    });
    this.addObsidianIcon("tw-tidy-list-note", "==");
    this.addCommand({
      id: "tw-tidy-list-note",
      name: "TL == TW Tidy List Note",
      icon: `tw-tidy-list-note`,
      editorCallback: (editor, view) => {
        editor.setValue(replaceTWUselessValue(editor.getValue()));
        const lineCount = editor.lineCount();
        let fm = "";
        let c = "";
        let text = "";
        let h3Count = 0;
        let content = "";
        let taskTag = "";
        for (let i = 0; i < lineCount; i++) {
          const line = editor.getLine(i);
          if (h3Count == 0) {
            if (line.length != 0 && !/^\t*- ```$/.test(line)) {
              const modifiedLine = line.contains("[[") && line.contains("]]") ? line : line.replace(view.file.basename + " _ ", "").replace(/(\t*- )#+ > /, "$1").replace(/(\t+- )#+ /, "$1");
              content += modifiedLine + "\n";
            }
          } else if (h3Count == 1) {
            if (line.startsWith("title: ") || line.startsWith("list: ")) {
              fm += line + "\n";
            } else if (line.length != 0 && !/^\t*- ```$/.test(line)) {
              const modifiedLine = line.contains("[[") && line.contains("]]") ? line : line.replace(view.file.basename + " _ ", "").replace(/(\t*- )#+ > /, "$1").replace(/(\t+- )#+ /, "$1");
              fm += modifiedLine + "\n";
            }
          }
          if (h3Count >= 2) {
            if (line.length != 0 && !/^\t*- ```$/.test(line)) {
              const modifiedLine = line.contains("[[") && line.contains("]]") ? line : line.replace(view.file.basename + " _ ", "").replace(/(\t*- )#+ > /, "$1").replace(/(\t+- )#+ /, "$1");
              c += modifiedLine + "\n";
            }
          }
          if (line === "---") {
            h3Count++;
            if (h3Count == 2) {
              fm += "\n";
            }
          }
        }
        text += content;
        if (fm.length > 0) {
          text += fm;
        }
        text += c;
        text = text.replace(/^---\n+---\n/m, "---\ntags: b/n/s\n---\n").replace(/\n$/, "");
        editor.setValue(text);
        new import_obsidian37.Notice("Formatted tidy list note");
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `6`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `6`
        }
      ]
    });
    this.addObsidianIcon("tw-task", "--");
    this.addCommand({
      id: "tw-task",
      name: "TT -- TW Task",
      icon: `tw-task`,
      editorCallback: (editor, view) => {
        if (getChildlinkItems(this.app, view.file).length > 0) {
          new import_obsidian37.Notice("Still have child link. Please check the child link first. Abort...");
          new NavigateToForwardAndBacklinkTagModal(this.app, view, editor).open();
          return;
        }
        editor.setValue(replaceTWUselessValue(editor.getValue()));
        const lineCount = editor.lineCount();
        let fm = "";
        let c = "";
        let text = "";
        let h3Count = 0;
        let content = "";
        let taskTag = "";
        for (let i = 0; i < lineCount; i++) {
          const line = editor.getLine(i);
          if (h3Count == 0) {
            content += line + "\n";
          } else if (h3Count == 1) {
            if (line.startsWith("title: ")) {
            } else if (line.startsWith("tagsss: ")) {
              taskTag = "a/";
              if (/ N /.test(line) || / N$/.test(line)) {
                taskTag += "n/";
              }
              if (/ W /.test(line) || / W$/.test(line)) {
                taskTag += "w/";
              }
              if (/ now /.test(line) || / now$/.test(line)) {
                taskTag += "n";
              }
              if (/ later /.test(line) || / later$/.test(line)) {
                taskTag += "l";
              }
              if (/ waiting /.test(line) || / waiting$/.test(line)) {
                taskTag += "w";
              }
              if (/ done /.test(line) || / done$/.test(line)) {
                taskTag += "d";
              }
              if (/ archive /.test(line) || / archine$/.test(line)) {
                taskTag += "a";
              }
              if (taskTag.length == 5) {
                fm += "tags: " + taskTag + "\n";
              } else {
                new import_obsidian37.Notice("error on setting action tag");
                fm += line + "\n";
              }
            } else {
              fm += line + "\n";
            }
          }
          if (h3Count >= 2) {
            let modifiedLine = line;
            c += modifiedLine + "\n";
          }
          if (line === "---") {
            h3Count++;
          }
        }
        text += content;
        if (fm.length > 0) {
          text += fm;
        }
        text += c;
        text = text.replace(/^---\n+---\n/m, "---\ntags: b/n/s\n---\n").replace(/\n$/, "");
        editor.setValue(text);
        editor.setCursor({ line: getParentLine(text), ch: 0 });
        app.vault.rename(view.file, "C/" + view.file.name);
        new import_obsidian37.Notice("Formatted for adding link to parent note");
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `7`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `7`
        }
      ]
    });
    this.addObsidianIcon("note-to-tree-list", "**");
    this.addCommand({
      id: "note-to-tree-list",
      name: "NT Note to Tree List",
      icon: `note-to-tree-list`,
      editorCallback: (editor, view) => {
        if (getChildlinkItems(this.app, view.file).length > 0) {
          new import_obsidian37.Notice("Still have child link. Please check the child link first. Abort...");
          new NavigateToForwardAndBacklinkTagModal(this.app, view, editor).open();
          return;
        }
        const checkboxMap = /* @__PURE__ */ new Map();
        const lineCount = editor.lineCount();
        if (editor.getValue().startsWith("- " + view.file.basename + "\n")) {
          const filename = view.file.basename;
          let text = "";
          for (let i = 0; i < lineCount; i++) {
            const line = editor.getLine(i);
            if (line.trim().length != 0) {
              if (!/^\t*- $/.test(line) && !/^\t*\d+\. $/.test(line)) {
                let modLine = line;
                if (!modLine.contains("[[") && !modLine.contains("]]")) {
                  modLine = line.replace(`${filename} _ `, "");
                }
                if (line !== `- ${view.file.basename}` && /^- /.test(line)) {
                  modLine = "	" + modLine;
                }
                text += modLine + "\n";
              }
            }
          }
          text = text.replace(/\n$/m, "");
          editor.setValue(text);
          editor.setCursor({ line: getParentLine(text), ch: 0 });
          new import_obsidian37.Notice("Formatted to remove empyt line and removed duplicated list name");
        } else {
          editor.setValue(replaceTWUselessValue(editor.getValue()));
          let text = "- ";
          let h3Count = 0;
          let actionTag = "";
          let content = "";
          for (let i = 0; i < lineCount; i++) {
            const line = editor.getLine(i);
            if (h3Count == 0) {
              if (line.trim().length != 0 && line != "---") {
                let modifiedLine = line;
                for (let i2 = 0; i2 < 9; i2++) {
                  modifiedLine = modifiedLine.replace(/^    /, "	");
                }
                modifiedLine = modifiedLine.replace(/^(\t*)\*\s/, "$1- ");
                modifiedLine = /^\t*- /.test(modifiedLine) || /^\t*\d+\. /.test(modifiedLine) ? "	" + modifiedLine : "	- " + modifiedLine;
                content += "\n" + modifiedLine;
              }
            } else if (h3Count == 1) {
              if (line === "---" || shouldSkipFrontMatter(line) || line.startsWith("title: ")) {
              } else if (line.startsWith("tagsss: ")) {
                if (/ N /.test(line) || / N$/.test(line)) {
                  actionTag = "n";
                }
                if (/ W /.test(line) || / W$/.test(line)) {
                  actionTag = "w";
                }
                if (/ now /.test(line) || / now$/.test(line)) {
                  actionTag += "n";
                }
                if (/ later /.test(line) || / later$/.test(line)) {
                  actionTag += "l";
                }
                if (/ waiting /.test(line) || / waiting$/.test(line)) {
                  actionTag += "w";
                }
                if (/ done /.test(line) || / done$/.test(line)) {
                  actionTag += "d";
                }
                if (/ archive /.test(line) || / archine$/.test(line)) {
                  actionTag += "a";
                }
                if (actionTag.length == 2) {
                  actionTag = "#" + actionTag + " ";
                } else if (actionTag.length == 1) {
                  new import_obsidian37.Notice("error on setting action tag");
                }
              } else if (line.startsWith("checkboxbytime_")) {
                const keyValueArray = line.split(":").map((item) => item.trim());
                if (keyValueArray.length === 2) {
                  const key = keyValueArray[0];
                  const value = keyValueArray[1];
                  const splitArray = key.split("_");
                  const modifiedKey = `<<checkboxByTime "${splitArray[1]}">>`;
                  checkboxMap.set(modifiedKey, value === "open" ? "[x]" : "[ ]");
                }
              } else {
                if (line.trim().length != 0) {
                  let modifiedLine = line;
                  for (let i2 = 0; i2 < 9; i2++) {
                    modifiedLine = modifiedLine.replace(/^    /, "	");
                  }
                  modifiedLine = modifiedLine.replace(/^(\t*)\*\s/, "$1- ");
                  modifiedLine = /^\t*- /.test(modifiedLine) || /^\t*\d+\. /.test(modifiedLine) ? "	" + modifiedLine : "	- " + modifiedLine;
                  content += "\n" + modifiedLine;
                }
              }
            }
            if (h3Count >= 2 && line.trim().length != 0) {
              let modifiedLine = line === "[ ] " ? "" : line;
              if (modifiedLine.trim().length != 0) {
                for (let i2 = 0; i2 < 9; i2++) {
                  modifiedLine = modifiedLine.replace(/^    /, "	");
                }
                modifiedLine = modifiedLine.replace(/^(\t*)\*\s/, "$1- ");
                modifiedLine = /^\t*- /.test(modifiedLine) || /^\t*\d+\. /.test(modifiedLine) ? "	" + modifiedLine : "	- " + modifiedLine;
                for (const [key, value] of checkboxMap) {
                  modifiedLine = modifiedLine.replace(new RegExp(key, "g"), value);
                }
                modifiedLine = modifiedLine.replace(/<<checkboxByTime "[A-Za-z0-9_]+">>/g, "[ ]");
                text += "\n" + modifiedLine;
              }
            }
            if (line === "---") {
              let beforeH3 = h3Count;
              h3Count++;
              if (beforeH3 == 1 && h3Count == 2) {
                text += actionTag + view.file.basename;
              }
            }
          }
          if (h3Count < 2) {
            text += view.file.basename;
          }
          text += content;
          editor.setValue(text);
          editor.setCursor({ line: getParentLine(text), ch: 0 });
          new import_obsidian37.Notice("Formatted for merging link to parent note");
        }
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `8`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `8`
        }
      ]
    });
    this.addCommand({
      id: "remove-content-from-cursor",
      name: "Remove content from cursor",
      icon: `axe`,
      editorCallback: (editor, view) => {
        new RemoveContentFromCursorModal(this.app, editor).open();
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `x`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `x`
        }
      ]
    });
    this.addCommand({
      id: "remove-content-left",
      name: "Remove content left same line",
      icon: `arrow-left-circle`,
      editorCallback: (editor, view) => {
        removeContentLeftSameLine(editor);
      }
    });
    this.addCommand({
      id: "remove-content-right",
      name: "Remove content right same line",
      icon: `arrow-right-circle`,
      editorCallback: (editor, view) => {
        removeContentLeftSameLine(editor);
      }
    });
    this.addCommand({
      id: "remove-content-top-left",
      name: "Remove content from start of note to cursor",
      icon: `arrow-up-circle`,
      editorCallback: (editor, view) => {
        removeContentFromStartOfNoteToCursor(editor);
      }
    });
    this.addCommand({
      id: "remove-content-bottom-right",
      name: "Remove content from cursor to end of note",
      icon: `arrow-down-circle`,
      editorCallback: (editor, view) => {
        removeContentFromCursorToEndOfNote(editor);
      }
    });
    this.addObsidianIcon("threads-to-blog-icon", "TB");
    this.addCommand({
      id: "threads-to-blog",
      name: "TB Threads as pre Blog format to Clipboard",
      icon: `threads-to-blog-icon`,
      editorCallback: (editor, view) => {
        new ThreadsToBlogModal(this.app, editor, view).open();
      }
    });
    this.addObsidianIcon("card-to-threads-icon", "CT");
    this.addCommand({
      id: "card-to-threads",
      name: "CT Card to Threads",
      icon: `card-to-threads-icon`,
      editorCallback: (editor, view) => {
        let text = "";
        text += "---\ntags: c/t/d\n---\n\n";
        text += "\u{1F9F5} " + view.file.basename + "\n\n---\n\n\n\n---\n\n";
        text += "## References\n\n- ";
        text += "[[" + view.file.basename + "]]\n";
        text += `
- \u4E00\u500B\u6A19\u984C\uFF08\u4E3B\u984C\u662F\u4EC0\u9EBC\u3001\u6587\u7AE0\u5BEB\u7D66\u8AB0\u770B\u3001\u770B\u5B8C\u5F8C\u53EF\u4EE5\u7372\u5F97\u4EC0\u9EBC\u597D\u8655\uFF09
	- 
- \u4E00\u500B\u60C5\u666F\uFF08\u4EBA\u6642\u5730\uFF09
	- 
- \u4E00\u500B\u554F\u984C
	- 
- \u4E00\u500B\u539F\u56E0 / \u6211\u6703\u5982\u4F55\u89E3\u6C7A
	- 
- \u4E8C\u500B\u9762\u5411\uFF08\u5C0D\u6BD4 / \u6BD4\u8F03\uFF09
	- 
	- 
- \u4E09\u500B\u6B65\u9A5F / \u505A\u6CD5
	1. 
	2. 
	3. 
- \u4E00\u500B\u884C\u52D5
	- 

`;
        const { vault } = this.app;
        const path = view.file.path;
        const newPath = path.replace(/^([A-Z]\/)/, "$1Threads ");
        console.log("newPath=" + newPath);
        const { workspace } = this.app;
        const leaf = workspace.getLeaf(false);
        Promise.resolve().then(() => {
          return vault.adapter.exists(newPath);
        }).then((fileExists) => {
          if (fileExists) {
            new import_obsidian37.Notice(`Will not proceed. Thread post "${newPath}" already exist.`);
            return Promise.reject("Thread post exist");
          }
          return vault.create(newPath, text);
        }).then(
          (tFile) => {
            return leaf.openFile(tFile, { active: true });
          },
          (rejectReason) => {
          }
        );
      }
    });
    this.addObsidianIcon("echo-notes-icon", "EN");
    this.addCommand({
      id: "echo-notes",
      name: "EN Echo notes",
      icon: `echo-notes-icon`,
      editorCallback: (editor, view) => {
        new EchoModal(this.app, view.file).open();
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `q`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `q`
        }
      ]
    });
    this.addObsidianIcon("export-header-to-clipboard", "HW");
    this.addCommand({
      id: "export-header-to-clipboard",
      name: "HW Export Header To Clipboard and TickTick",
      icon: `export-header-to-clipboard`,
      editorCallback: async (editor, view) => {
        const title = "\u3010" + view.file.basename + "\u3011\n";
        let text = title;
        for (let i = 0; i < editor.lineCount(); i++) {
          const line = editor.getLine(i);
          if (/^#+ /.test(line)) {
            let line2 = line;
            for (const footNoteType of ALL_FOOTNOTE_TYPES) {
              line2 = line2.replace(footNoteType.type.replace("## ", ""), footNoteType.chinese.replace("## ", ""));
            }
            const modifiedLine = line2.replace(/^#+ /, "- ");
            text += modifiedLine + "\n";
          }
        }
        try {
          this.addToClipboardHistory(text);
          await navigator.clipboard.writeText(text);
          new import_obsidian37.Notice(`Copied summary
\`\`\`
${text}
\`\`\`\\nas link to clipboard!`);
        } catch (error) {
          new import_obsidian37.Notice(`Error occurred when copying to clipboard: ${error}`);
        }
        if (text.length !== 0) {
          const textToWatch = encodeURI(text);
          window.open(`shortcuts://run-shortcut?name=Add%20To%20TickTick%20for%20TCP&input=text&text=${textToWatch}&x-success=obsidian://&x-cancel=obsidian://&x-error=obsidian://`);
        }
      }
    });
    this.addObsidianIcon("journal-line-processing", "PJ");
    this.addCommand({
      id: "journal-line-processing",
      name: "PJ Journal line processing",
      icon: `journal-line-processing`,
      editorCallback: async (editor, view) => {
        const cursor = editor.getCursor();
        const text = editor.getLine(cursor.line);
        navigator.clipboard.writeText(text).then(function() {
          new import_obsidian37.Notice(`Copied
\`\`\`
${text}
\`\`\`
to clipboard for generating prompt!`);
          window.open(`shortcuts://run-shortcut?name=Daily%20Journal%20line%20to%20knowledge%20or%20action&x-cancel=obsidian://&x-error=obsidian://`);
        }, function(error) {
          new import_obsidian37.Notice(`error when copy to clipboard!`);
        });
      }
    });
    this.addObsidianIcon("add-special-character-icon", ".*");
    this.addCommand({
      id: "add-special-character",
      name: ".* Add Special Character",
      icon: `add-special-character-icon`,
      editorCallback: (editor, view) => {
        new AddSpecialCharacterModal(this.app, editor).open();
      }
      /*
      hotkeys: [
      	{
      		modifiers: [`Ctrl`, `Meta`, `Shift`],
      		key: `z`,
      	},
      	{
      		modifiers: [`Ctrl`, `Alt`, `Shift`],
      		key: `z`,
      	},
      ]
      */
    });
    this.addObsidianIcon("add-comment-tag-icon", "DT");
    this.addCommand({
      id: "add-comment-tag",
      name: "DT Add Comment Tag",
      icon: `add-comment-tag-icon`,
      editorCallback: (editor, view) => {
        new AddFootnoteTagModal(this.app, editor).open();
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `z`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `z`
        }
      ]
    });
    this.addObsidianIcon("action-tag-count-icon", "CA");
    this.addCommand({
      id: "action-tag-count-icon",
      name: "CA Count Action Tag",
      icon: `action-tag-count-icon`,
      editorCallback: (editor, view) => {
        const tags = ["nn", "nl", "nw", "n1", "n2", "n3", "n4", "n5", "n6", "n7", "wn", "wl", "ww", "w1", "w2", "w3", "w4", "w5", "w6", "w7"];
        const matches = [];
        const lineNum = editor.lineCount();
        for (let i = 0; i < lineNum; i++) {
          const line = editor.getLine(i);
          const match = tags.some((tag2) => new RegExp(`#${tag2} `, "g").test(line) || new RegExp(` #${tag2}`, "g").test(line));
          if (match) {
            matches.push(`Line ${i}:
${line.trim()}`);
          }
        }
        const trimmedAndJoinedString = matches.join("\n\n");
        const tasks = matches.length > 0 ? `
Tasks:

${trimmedAndJoinedString}` : ``;
        new import_obsidian37.Notice(`There are ${matches.length} outstanding actions in this notes${tasks}`);
      }
    });
    this.addCommand({
      id: "append-date-tag",
      name: "Append Date Tag",
      icon: "calendar",
      editorCallback: (editor, view) => {
        const cursor = editor.getCursor();
        const line = editor.getLine(cursor.line);
        const currentDate = (0, import_moment3.default)().format("YYYYMMDD");
        const layerDateTag = `#d/${currentDate.slice(0, 4)}/${currentDate.slice(4, 6)}/${currentDate.slice(6, 8)}`;
        if (line.length > 0) {
          editor.setLine(cursor.line, `${line} ${layerDateTag}`);
          cursor.ch = line.length + 1 + layerDateTag.length;
        } else {
          editor.setLine(cursor.line, layerDateTag);
          cursor.ch = layerDateTag.length;
        }
        editor.setCursor(cursor);
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `j`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `j`
        }
      ]
    });
    this.addObsidianIcon("toggle-n-w-task", "#=");
    this.addCommand({
      id: `toggle-n-w-task`,
      name: `Toggle N W Task`,
      icon: `toggle-n-w-task`,
      editorCallback: (editor, view) => {
        const cursor = editor.getCursor();
        const lineNumber = editor.getCursor().line;
        const line = editor.getLine(lineNumber);
        if (line.match(/ a\/w\/./)) {
          const replacedLine = line.replace(/ a\/w\/(.)/, ` a/n/$1`);
          editor.setLine(lineNumber, replacedLine);
          editor.setCursor(cursor);
        } else if (line.match(/ a\/n\/./)) {
          const replacedLine = line.replace(/ a\/n\/(.)/, ` a/w/$1`);
          editor.setLine(lineNumber, replacedLine);
          editor.setCursor(cursor);
        } else if (line.match(/#w. /)) {
          const replacedLine = line.replace(/#w(.) /, `#n$1 `);
          editor.setLine(lineNumber, replacedLine);
          editor.setCursor(cursor);
        } else if (line.match(/#n. /)) {
          const replacedLine = line.replace(/#n(.) /, `#w$1 `);
          editor.setLine(lineNumber, replacedLine);
          editor.setCursor(cursor);
        } else if (line.match(/ #w./)) {
          const replacedLine = line.replace(/ #w(.)/, ` #n$1`);
          editor.setLine(lineNumber, replacedLine);
          editor.setCursor(cursor);
        } else if (line.match(/ #n./)) {
          const replacedLine = line.replace(/ #n(.)/, ` #w$1`);
          editor.setLine(lineNumber, replacedLine);
          editor.setCursor(cursor);
        }
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `=`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `=`
        }
      ]
    });
    this.addCommand({
      id: "cursor-go-to-start-of-line",
      name: "Cursor go to start of line",
      icon: `arrow-big-left`,
      editorCallback: (editor, view) => {
        const cursor = editor.getCursor();
        cursor.ch = 0;
        editor.setCursor(cursor);
      }
    });
    this.addCommand({
      id: "cursor-go-to-end-of-line",
      name: "Cursor go to end of line",
      icon: `arrow-big-right`,
      editorCallback: (editor, view) => {
        const cursor = editor.getCursor();
        const lineNum = cursor.line;
        const line = editor.getLine(lineNum);
        const length = line.length;
        cursor.ch = length;
        editor.setCursor(cursor);
      }
    });
    this.addCommand({
      id: "duplicate-line-below",
      name: "Duplicate line below",
      icon: `align-vertical-space-between`,
      editorCallback: (editor, view) => {
        const cursor = editor.getCursor();
        const lineNum = cursor.line;
        let text = "";
        for (let i = 0; i < editor.lineCount(); i++) {
          const line = editor.getLine(i);
          text += line + "\n";
          if (i === lineNum) {
            text += line + "\n";
          }
        }
        text = text.replace(/\n$/, "");
        editor.setValue(text);
        cursor.line = lineNum + 1;
        editor.setCursor(cursor);
      }
    });
    this.addObsidianIcon("event-to-fantastical-icon", "FE");
    this.addCommand({
      id: "add-fantastical-event",
      name: "FE Add Fantastical Event",
      icon: `event-to-fantastical-icon`,
      editorCallback: (editor, view) => {
        let text = "";
        const vault = this.app.vault;
        const listSelections = editor.listSelections();
        const processLine = async (line, i) => {
          if (/^- \d\d\d\d-\d\d-\d\d \d\d:\d\d /.test(line)) {
            const modifiedLine = line.replace(/^- /, `- #tm `);
            editor.setLine(i, modifiedLine);
            text += line + "\n";
            const lineToAdd = "-" + line.replace(/-/g, "");
            const path = line.replace(/^- (\d\d\d\d)-(\d\d)-.*/, "J/$1-M$2.md");
            let tFile = vault.getAbstractFileByPath(path);
            if (tFile == null) {
              tFile = await vault.create(path, "---\ntags: b/n/j\n---\n\n" + lineToAdd);
            } else {
              const tFileOriginalValue = await vault.read(tFile);
              await vault.modify(tFile, tFileOriginalValue + "\n" + lineToAdd);
            }
          }
        };
        const processSelections = async () => {
          for (const listSelection of listSelections) {
            const a = listSelection.head.line;
            const b = listSelection.anchor.line;
            const fromLineNum = b > a ? a : b;
            const toLineNum = b > a ? b : a;
            for (let i = fromLineNum; i <= toLineNum; i++) {
              const line = editor.getLine(i);
              await processLine(line, i);
            }
          }
        };
        processSelections().then(() => {
          if (text.length !== 0) {
            text = encodeURI(text);
            window.open(`shortcuts://run-shortcut?name=Add%20Obsidian%20Inbox%20Event%20via%20Fantastical&input=text&text=${text}&x-success=obsidian://&x-cancel=obsidian://&x-error=obsidian://`);
          }
        });
      }
    });
    this.addObsidianIcon("action-to-fantastical-event-icon", "AF");
    this.addCommand({
      id: "action-to-fantastical-event",
      name: "AF Action to Fantastical Event",
      icon: `action-to-fantastical-event-icon`,
      editorCallback: (editor, view) => {
        let text = "";
        const vault = this.app.vault;
        const listSelections = editor.listSelections();
        for (const listSelection of listSelections) {
          const a = listSelection.head.line;
          const b = listSelection.anchor.line;
          const fromLineNum = b > a ? a : b;
          const toLineNum = b > a ? b : a;
          for (let i = fromLineNum; i <= toLineNum; i++) {
            const line = editor.getLine(i);
            text += line.trim() + "@@@";
          }
          text = text.replace(/@@@$/, "");
        }
        const vaultName = app.vault.getName();
        const filePath = view.file.path;
        const url = `obsidian://open?vault=${encodeURIComponent(vaultName)}&file=${encodeURIComponent(filePath)}`;
        const encodedUrl = encodeURIComponent(url);
        const input = `{"tasks":"${text}","obsidianURL":"${encodedUrl}"}`;
        const shortcutUrl = `shortcuts://run-shortcut?name=${encodeURIComponent("Obsidian Action To Fantastical Push event")}&input=text&text=${encodeURIComponent(input)}&x-success=obsidian://&x-cancel=obsidian://&x-error=obsidian://`;
        window.open(shortcutUrl);
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `F`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `F`
        }
      ]
    });
    this.addObsidianIcon("task-to-fantastical-event-icon", "TF");
    this.addCommand({
      id: "task-to-fantastical-event",
      name: "TF Task to Fantastical Event",
      icon: `task-to-fantastical-event-icon`,
      editorCallback: (editor, view) => {
        const cursor = editor.getCursor();
        const line = cursor.line;
        const lineContent = editor.getLine(line);
        let text = view.file.basename;
        if (lineContent.match(/^#+ /)) {
          text += "#";
          text += lineContent.replace(/^#+ /, "");
        }
        const vaultName = app.vault.getName();
        const filePath = view.file.path;
        const url = `obsidian://open?vault=${encodeURIComponent(vaultName)}&file=${encodeURIComponent(filePath)}`;
        const encodedUrl = encodeURIComponent(url);
        const input = `{"tasks":"${text}","obsidianURL":"${encodedUrl}"}`;
        const shortcutUrl = `shortcuts://run-shortcut?name=${encodeURIComponent("Obsidian Task To Fantastical Push event")}&input=text&text=${encodeURIComponent(input)}&x-success=obsidian://&x-cancel=obsidian://&x-error=obsidian://`;
        window.open(shortcutUrl);
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `k`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `k`
        }
      ]
    });
    this.addCommand({
      id: "grep-title-as-link-to-clipboard",
      name: "Grep Title as link to clipboard",
      icon: `clipboard-list`,
      editorCallback: async (editor, view) => {
        const title = view.file.basename;
        const titleAsLink = `[[${title}]]`;
        try {
          this.addToClipboardHistory(titleAsLink);
          await navigator.clipboard.writeText(titleAsLink);
          new import_obsidian37.Notice(`Copied title "${title}" as link to clipboard!`);
        } catch (error) {
          new import_obsidian37.Notice(`Error occurred when copying to clipboard: ${error}`);
        }
      },
      hotkeys: [
        {
          modifiers: [`Meta`, `Shift`],
          key: `l`
        },
        {
          modifiers: [`Ctrl`, `Shift`],
          key: `l`
        }
      ]
    });
    this.addObsidianIcon("move-current-selection-to-beginning-of-notes", "<<");
    this.addCommand({
      id: "move-current-selection-to-beginning-of-notes",
      name: "MB << Move current selection to beginning of notes",
      icon: `move-current-selection-to-beginning-of-notes`,
      editorCallback: async (editor, view) => {
        const oldContent = editor.getValue();
        let selection = exportCurrentSelection(editor);
        if (/^    +- /m.test(selection) || /^- /m.test(selection) || /^# /m.test(selection) || /^` /m.test(selection) || /^> /m.test(selection) || /^\d+\. /m.test(selection)) {
        } else {
          selection = "- " + selection;
        }
        let newContent = "";
        const selectionRange = getCurrentSelectionLineNumber(editor);
        for (let i = 0; i < editor.lineCount(); i++) {
          if (i < selectionRange.fromLineNum || i > selectionRange.toLineNum) {
            newContent = newContent + editor.getLine(i) + "\n";
          }
        }
        await this.app.vault.modify(view.file, newContent);
        this.app.metadataCache.trigger("changed", view.file);
        await new Promise((resolve) => setTimeout(resolve, 100));
        const updatedContent = await this.app.vault.read(view.file);
        new AddTextToNotesModal(this.app, selection, "move the selected text", true, () => editor.setValue(oldContent)).open();
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `,`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `,`
        }
      ]
    });
    this.addObsidianIcon("move-current-selection-to-end-of-notes", ">>");
    this.addCommand({
      id: "move-current-selection-to-end-of-notes",
      name: "ME >> Move current selection to beginning of notes",
      icon: `move-current-selection-to-end-of-notes`,
      editorCallback: async (editor, view) => {
        let selection = exportCurrentSelection(editor);
        if (/^    +- /m.test(selection) || /^- /m.test(selection) || /^# /m.test(selection) || /^` /m.test(selection) || /^> /m.test(selection) || /^\d+\. /m.test(selection)) {
        } else {
          selection = "- " + selection;
        }
        let newContent = "";
        const selectionRange = getCurrentSelectionLineNumber(editor);
        for (let i = 0; i < editor.lineCount(); i++) {
          if (i < selectionRange.fromLineNum || i > selectionRange.toLineNum) {
            newContent = newContent + editor.getLine(i) + "\n";
          }
        }
        await this.app.vault.modify(view.file, newContent);
        this.app.metadataCache.trigger("changed", view.file);
        await new Promise((resolve) => setTimeout(resolve, 100));
        const updatedContent = await this.app.vault.read(view.file);
        new AddTextToNotesModal(this.app, selection, "move the selected text", false, () => editor.setValue(newContent.replace(/\n$/m, ""))).open();
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `.`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `.`
        }
      ]
    });
    this.addObsidianIcon("add-current-selection-to-beginning-of-notes", "((");
    this.addCommand({
      id: "add-current-selection-to-beginning-of-notes",
      name: "SB (( Add current selection to beginning of notes",
      icon: `add-current-selection-to-beginning-of-notes`,
      editorCallback: (editor, view) => {
        let selection = exportCurrentSelection(editor);
        if (/^    +- /m.test(selection) || /^- /m.test(selection) || /^# /m.test(selection) || /^` /m.test(selection) || /^> /m.test(selection) || /^\d+\. /m.test(selection)) {
        } else {
          selection = "- " + selection;
        }
        new AddTextToNotesModal(this.app, selection, "add the selected text", true, () => {
        }).open();
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `9`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `9`
        }
      ]
    });
    this.addObsidianIcon("add-current-selection-to-end-of-notes", "))");
    this.addCommand({
      id: "add-current-selection-to-end-of-notes",
      name: "SE )) Add current selection to end of notes",
      icon: `add-current-selection-to-end-of-notes`,
      editorCallback: (editor, view) => {
        let selection = exportCurrentSelection(editor);
        if (/^    +- /m.test(selection) || /^- /m.test(selection) || /^# /m.test(selection) || /^` /m.test(selection) || /^> /m.test(selection) || /^\d+\. /m.test(selection)) {
        } else {
          selection = "- " + selection;
        }
        new AddTextToNotesModal(this.app, selection, "add the selected text", false, () => {
        }).open();
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `0`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `0`
        }
      ]
    });
    this.addObsidianIcon("add-current-link-to-beginning-of-notes", "[[");
    this.addCommand({
      id: "add-current-link-to-beginning-of-notes",
      name: "LB [[ Add current link to beginning of notes",
      icon: `add-current-link-to-beginning-of-notes`,
      editorCallback: (editor, view) => {
        const link = "- [[" + view.file.basename + "]]";
        new AddTextToNotesModal(this.app, link, "add the current note link", true, () => {
        }).open();
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `[`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `[`
        }
      ]
    });
    this.addObsidianIcon("add-current-link-to-end-of-notes", "]]");
    this.addCommand({
      id: "add-current-link-to-end-of-notes",
      name: "LE ]] Add current link to end-of-notes",
      icon: `add-current-link-to-end-of-notes`,
      editorCallback: (editor, view) => {
        const link = "- [[" + view.file.basename + "]]";
        new AddTextToNotesModal(this.app, link, "add the current note link", false, () => {
        }).open();
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `]`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `]`
        }
      ]
    });
    this.addCommand({
      id: "navigate-to-forwardlinks-backlinks",
      name: "BL Navigate to Forwardlinks/Backlinks",
      icon: `link-2`,
      editorCallback: (editor, view) => {
        new NavigateToForwardAndBacklinkTagModal(this.app, view, editor).open();
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `O`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `O`
        }
      ]
    });
    this.addCommand({
      id: "quick-navigate-to-notes",
      name: "NN Quick Navigate to Notes",
      icon: `aperture`,
      callback: async () => {
        new NavigateToNoteFromTagModal(this.app).open();
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `;`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `;`
        }
      ]
    });
    this.addCommand({
      id: "query-notes-without-or-invalid-metadata",
      name: "Query Notes without or invalid metadata",
      editorCallback: async (editor, view) => {
        console.log(view.file.path);
        let resultValue = "## Notes without metadata\n\nHighlight meaning invalid metadata\n";
        const queryMd = "I/Self Query.md";
        if (view.file.path === queryMd) {
          new import_obsidian37.Notice("Need some time to generate result");
          const result = getAllNotesWithoutMetadata(this.app);
          let resultWithoutMetadata = [];
          let resultInvalidMetadata = [];
          for (const filePath of result) {
            const tFile = this.app.vault.getAbstractFileByPath(filePath);
            const content = await this.app.vault.read(tFile);
            if (content.startsWith("---")) {
              resultInvalidMetadata.push(tFile);
            } else {
              resultWithoutMetadata.push(tFile);
            }
          }
          for (const tFile of resultInvalidMetadata) {
            resultValue += "\n- ==[[" + tFile.basename + "]]==";
          }
          for (const tFile of resultWithoutMetadata) {
            resultValue += "\n- [[" + tFile.basename + "]]";
          }
          editor.setValue(resultValue);
          new import_obsidian37.Notice("Updated notes without metadata. Size=" + result.length);
        } else {
          new import_obsidian37.Notice("Please go to '" + queryMd + "' to run this action");
        }
      }
    });
    this.addObsidianIcon("threads-to-twitter", "TX");
    this.addCommand({
      id: "threads-to-twitter",
      name: "TT TX Threads to Twitter",
      icon: `threads-to-twitter`,
      editorCallback: (editor, view) => {
        const { vault } = this.app;
        let v = editor.getValue();
        v = v.replace(/---\n+## [Rr]eferences?\:([\n]*.*)*$/, "");
        v = v.replace(/---\n+## [Rr]eferences?([\n]*.*)*$/, "");
        const path = view.file.path;
        if (!path.match(/.\/Threads \d\d\d\d\d\d\d\d/)) {
          new import_obsidian37.Notice(`Will not proceed. It is not a threads post.`);
          return;
        }
        const newPath = path.replace(/(.\/)Threads /, "$1Twitter ");
        const { workspace } = this.app;
        const leaf = workspace.getLeaf(false);
        Promise.resolve().then(() => {
          return vault.adapter.exists(newPath);
        }).then((fileExists) => {
          if (fileExists) {
            new import_obsidian37.Notice(`Will not proceed. Twitter post already exist.`);
            return Promise.reject("Twitter post already exist");
          }
          const value = editor.getValue();
          let modifiedValue;
          if (/---\n\n## [Rr]eference[s]*[:]*\n\n/m.test(value)) {
            modifiedValue = value.replace(/(## [Rr]eference[s]*[:]*\n\n)/m, "$1- [[" + view.file.basename.replace(/Threads /, "Twitter ") + "]]\n");
          } else if (/---[\n\s]*$/.test(value)) {
            modifiedValue = value + "\n\n## References\n\n- [[" + view.file.basename.replace(/Threads /, "Twitter ") + "]]\n";
          } else {
            modifiedValue = value + "\n---\n\n## References\n\n- [[" + view.file.basename.replace(/Threads /, "Twitter ") + "]]\n";
          }
          editor.setValue(modifiedValue);
          return vault.create(newPath, v);
        }).then((tFile) => {
          return leaf.openFile(tFile, { active: true });
        }, (reason) => {
        }).then(() => {
          new import_obsidian37.Notice(`Created and opened Twitter notes!`);
        });
      }
    });
    this.addObsidianIcon("threads-rewrite-modal", "TR");
    this.addCommand({
      id: "threads-rewrite-modal",
      name: "TR Threads Rewrite Modal",
      icon: "threads-rewrite-modal",
      editorCallback: (editor, view) => {
        new RewriteThreadsModal(app, editor, view).open();
      }
    });
    this.addObsidianIcon("find-threads-to-rewrite", "FR");
    this.addCommand({
      id: "find-threads-to-rewrite",
      name: "FR Find Threads To Rewrite",
      icon: "hafind-threads-to-rewritesh",
      callback: () => {
        new NavigateRewritableThreadsModal(app).open();
      }
    });
    this.addObsidianIcon("rewrite-current-threads", "TR");
    this.addCommand({
      id: "rewrite-current-threads",
      name: "TR Rewrite Current Threads",
      icon: `rewrite-current-threads`,
      editorCallback: (editor, view) => {
        const { vault } = this.app;
        let v = "---\ntags: c/t/d\n---\n\n\u{1F9F5} \n\n\n---\n\n## References\n\n- \n\n";
        const path = view.file.path;
        if (!path.match(/.\/Threads \d\d\d\d\d\d\d\d/)) {
          new import_obsidian37.Notice(`Will not proceed. It is not a threads post.`);
          return;
        }
        const todayYYYYMMDD = (0, import_moment3.default)().format("YYYYMMDD");
        const newPath = path.replace(/^(.\/Threads) \d\d\d\d\d\d\d\d (.*)/, "$1 " + todayYYYYMMDD + " $2");
        const newNoteName = newPath.replace(/^.\//, "").replace(/.md$/, "");
        const { workspace } = this.app;
        const leaf = workspace.getLeaf(false);
        Promise.resolve().then(() => {
          return vault.adapter.exists(newPath);
        }).then((fileExists) => {
          if (fileExists) {
            new import_obsidian37.Notice(`Will not proceed. Rewritten Thread post post already exist.`);
            return Promise.reject("Threads post already exist");
          }
        }).then(function() {
          const beforeTag = "c/t/p";
          const afterTag = "c/t/o";
          return renameTag(view.file, beforeTag, afterTag);
        }, function(error) {
          new import_obsidian37.Notice(`error when rename tag!`);
        }).then((renameSuccess) => {
          if (!renameSuccess) {
            new import_obsidian37.Notice(`Will not proceed. The old post not published (not c/t/p).`);
            return Promise.reject("Will not proceed. The old post not published (not c/t/p).");
          }
          const value = editor.getValue();
          let modifiedValue;
          if (/---\n\n## [Rr]eference[s]*[:]*\n\n/m.test(value)) {
            modifiedValue = value.replace(/(## [Rr]eference[s]*[:]*\n\n)/m, "$1- Rewrite: [[" + newNoteName + "]]\n");
          } else if (/---[\n\s]*$/.test(value)) {
            modifiedValue = value + "\n\n## References\n\n- Rewrite: [[" + newNoteName + "]]\n";
          } else {
            modifiedValue = value + "\n---\n\n## References\n\n- Rewrite: [[" + newNoteName + "]]\n";
          }
          editor.setValue(modifiedValue);
          return vault.create(newPath, v);
        }).then((tFile) => {
          return leaf.openFile(tFile, { active: true });
        }, (reason) => {
        }).then(() => {
          new import_obsidian37.Notice(`Created and opened Threads notes for rewrite!`);
        });
      }
    });
    this.addObsidianIcon("blog-to-clipboard-icon", "BJ");
    this.addCommand({
      id: "blog-to-clipboard",
      name: "BJ Blog content to clipboard",
      icon: `blog-to-clipboard-icon`,
      editorCallback: async (editor, view) => {
        const v = editor.getValue();
        if (v.includes("#nn") || v.includes("#nl") || v.includes("#nw") || v.includes("#wn") || v.includes("#wl") || v.includes("#ww")) {
          new import_obsidian37.Notice(`Will not proceed. As there are unfinished action tag.`);
          return;
        }
        if (!v.includes("<!--more-->")) {
          try {
            await navigator.clipboard.writeText("<!--more-->");
            new import_obsidian37.Notice(`Require "<!--more-->" as excerpt separator before posting.
"<!--more-->" already in clipboard`);
          } catch (error) {
            new import_obsidian37.Notice(`Require "<!--more-->" as excerpt separator before posting.
"<!--more-->" cannot be copied to clipboard`);
          }
          return;
        }
        const path = view.file.path;
        let line = editor.lineCount();
        let text = "";
        let numLineFirstContent = 0;
        let frontMatterLineCount = 0;
        for (let i = 0; i < line; i++) {
          if (frontMatterLineCount == 2) {
            numLineFirstContent = i;
            break;
          }
          if (editor.getLine(i) == "---") {
            frontMatterLineCount++;
          }
        }
        for (let i = 0; i < line; i++) {
          if (editor.getLine(numLineFirstContent).trim() == "") {
            numLineFirstContent++;
          } else {
            break;
          }
        }
        Array.from(Array(line - numLineFirstContent).keys()).forEach((i) => {
          const line2 = editor.getLine(i + numLineFirstContent);
          text = text + line2 + "\n";
        });
        text = text.replace(/\n---\n\n#nd generate summary for meta description below:\n[^\n]*\n([^\n]*)\n[^\n]*\n---\n/, "\n<!-- Meta Summary -->\n<!--\n$1\n-->\n");
        text = text.replace(/## References?[\:]?([\n]*.*)*$/, "");
        const app2 = this.app;
        const beforeTagCBR = "c/b/r";
        const beforeTagCBD = "c/b/d";
        const beforeTagCBI = "c/b/i";
        const afterTag = "c/b/p";
        try {
          await navigator.clipboard.writeText(text);
          new import_obsidian37.Notice(`Copied blog content to clipboard!`);
          const foundTagFromCBR = await renameTag(view.file, beforeTagCBR, afterTag);
          if (foundTagFromCBR) {
            new import_obsidian37.Notice(`Update notes type from tag="${beforeTagCBR}" to tag="${afterTag}!`);
          }
          const foundTagFromCBI = await renameTag(view.file, beforeTagCBI, afterTag);
          if (foundTagFromCBI) {
            new import_obsidian37.Notice(`Update notes type from tag="${foundTagFromCBI}" to tag="${afterTag}!`);
          }
          const foundTagFromCBD = await renameTag(view.file, beforeTagCBD, afterTag);
          if (foundTagFromCBD) {
            new import_obsidian37.Notice(`Update notes type from tag="${beforeTagCBD}" to tag="${afterTag}!`);
          }
          await renameBlogTitle(app2, path, view);
          window.open(`shortcuts://run-shortcut?name=Jekyll%20blog&x-cancel=obsidian://&x-error=obsidian://`);
        } catch (error) {
          new import_obsidian37.Notice(`Error occurred during the operation: ${error}`);
        }
      }
    });
    this.addObsidianIcon("generate-chatgpt-prompt", "GP");
    this.addCommand({
      id: "generate-chatgpt-prompt",
      name: "GP Generate ChatGPT Prompt",
      icon: `generate-chatgpt-prompt`,
      editorCallback: async (editor, view) => {
        let text = "";
        const selection = editor.getSelection();
        if (selection.length == 0) {
          let line = editor.lineCount();
          text = "\u3010" + view.file.basename + "\u3011\n\n";
          let numLineFirstContent = 0;
          let frontMatterLineCount = 0;
          for (let i = 0; i < line; i++) {
            if (frontMatterLineCount == 2) {
              numLineFirstContent = i;
              break;
            }
            if (editor.getLine(i) == "---") {
              frontMatterLineCount++;
            }
          }
          for (let i = 0; i < line; i++) {
            if (editor.getLine(numLineFirstContent).trim() == "") {
              numLineFirstContent++;
            } else {
              break;
            }
          }
          Array.from(Array(line - numLineFirstContent).keys()).forEach((i) => {
            const line2 = editor.getLine(i + numLineFirstContent);
            if (!line2.startsWith("%%") && !line2.endsWith("%%")) {
              text = text + line2 + "\n";
            }
          });
          text = text.replace(/## References?[\:]?([\n]*.*)*$/, "");
        } else {
          text = selection;
        }
        navigator.clipboard.writeText(text).then(function() {
          new import_obsidian37.Notice(`Copied content to clipboard for generating prompt!`);
          window.open(`shortcuts://run-shortcut?name=Generate%20ChatGPT%20Prompt%20then%20open%20AI%20Tools&x-cancel=obsidian://&x-error=obsidian://`);
        }, function(error) {
          new import_obsidian37.Notice(`error when copy to clipboard!`);
        });
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `g`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `g`
        }
      ]
    });
    this.addObsidianIcon("threads-to-gpt", "TC");
    this.addCommand({
      id: "threads-to-gpt",
      name: "TC Threads to ChatGPT Prompt",
      icon: `threads-to-gpt`,
      editorCallback: async (editor, view) => {
        let line = editor.lineCount();
        let text = "\u3010" + view.file.basename + "\u3011\n\n";
        let numLineFirstContent = 0;
        let frontMatterLineCount = 0;
        for (let i = 0; i < line; i++) {
          if (frontMatterLineCount == 2) {
            numLineFirstContent = i;
            break;
          }
          if (editor.getLine(i) == "---") {
            frontMatterLineCount++;
          }
        }
        for (let i = 0; i < line; i++) {
          if (editor.getLine(numLineFirstContent).trim() == "") {
            numLineFirstContent++;
          } else {
            break;
          }
        }
        Array.from(Array(line - numLineFirstContent).keys()).forEach((i) => {
          const line2 = editor.getLine(i + numLineFirstContent);
          if (!line2.startsWith("%%") && !line2.endsWith("%%")) {
            text = text + line2 + "\n";
          }
        });
        text = text.replace(/## References?[\:]?([\n]*.*)*$/, "");
        const beforeTag = "c/t/r";
        const afterTag = "c/t/t";
        navigator.clipboard.writeText(text).then(function() {
          return renameTag(view.file, beforeTag, afterTag);
        }, function(error) {
          new import_obsidian37.Notice(`error when copy to clipboard!`);
        }).then(function(a) {
          new import_obsidian37.Notice(`Copied content to clipboard for generating prompt!`);
          window.open(`shortcuts://run-shortcut?name=Generate%20ChatGPT%20Prompt&x-success=Poe-app://&x-cancel=obsidian://&x-error=obsidian://`);
        }, function(error) {
          new import_obsidian37.Notice(`error when copy to clipboard!`);
        });
      }
    });
    this.addObsidianIcon("threads-to-clipboard-icon", "TC");
    this.addCommand({
      id: "threads-to-clipboard",
      name: "TC Threads content to clipboard",
      icon: `threads-to-clipboard-icon`,
      editorCallback: (editor, view) => {
        const value = editor.getValue();
        const text = this.getThreadsSegment(editor);
        const beforeTag = "c/t/r";
        const afterTag = "c/t/t";
        navigator.clipboard.writeText(text).then(function() {
          return renameTag(view.file, beforeTag, afterTag);
        }, function(error) {
          new import_obsidian37.Notice(`error when copy to clipboard!`);
        }).then((foundTag) => {
          if (foundTag) {
            new import_obsidian37.Notice(`Update notes type from tag="${beforeTag}" to tag="${afterTag}!
Copied thread content
\`\`\`
${text}
\`\`\`
to clipboard!`);
          } else {
            new import_obsidian37.Notice(`Tag "${beforeTag}" not found
Copied thread content
\`\`\`
${text}
\`\`\`
to clipboard!`);
          }
        });
      }
    });
    this.addObsidianIcon("twitter-to-chatgpt", "XG");
    this.addCommand({
      id: "twitter-to-chatgpt",
      name: "XG Twitter to ChatGPT",
      icon: `twitter-to-chatgpt`,
      editorCallback: (editor, view) => {
        const value = editor.getValue();
        if (!view.file.basename.contains("Twitter")) {
          new import_obsidian37.Notice("Note name not contains 'Twitter', did not copy from thread note?");
          return;
        }
        const noteType = getNoteType(view.file.path);
        if (noteType != null && noteType.type.startsWith("c/x/")) {
          new import_obsidian37.Notice("Note type starts with c/x, will not proceed");
          return;
        }
        let content = this.convertThreadsContentToPOE(editor);
        let numTweet = Math.ceil(content.length / 110);
        let prompt = `\u60A8\u662F\u793E\u4EA4\u5A92\u9AD4\u5167\u5BB9\u64B0\u5BEB\u5E2B\u3002\u5C07\u4E0B\u5217\u5167\u5BB9\u8F49\u70BA\u4E0D\u8D85\u904E${numTweet}\u689D\u7684\u63A8\u7279\u4E32\uFF0C\u4EE5\u7E41\u9AD4\u4E2D\u6587\u5448\u73FE\u3002\u4FDD\u7559\u6A19\u984C\uFF0C\u4E26\u5C07\u6A19\u984C\u5408\u4F75\u5230\u7B2C\u4E00\u689D\u63A8\u6587\u4E2D\uFF0C\u6A19\u984C\u548C\u7B2C\u4E00\u689D\u63A8\u6587\u4E4B\u9593\u52A0\u5169\u500B\u63DB\u884C\u3002\u6BCF\u689D\u63A8\u6587\u8981\u8D85\u904E100\u5B57\u4F46\u4E0D\u8D85\u904E140\u5B57\u3002\u5167\u5BB9\u4E0D\u7C21\u5316\uFF0C\u4E0D\u65B0\u589E\u672A\u63D0\u53CA\u8CC7\u8A0A\u3002\u4FDD\u7559\u539F\u6587\u4F8B\u5B50\uFF0C\u4E0D\u52A0\u6A19\u7C64\u3002\u63A8\u6587\u4E2D\u4E0D\u52A0\u6578\u5B57\u3002\u6BCF\u689D\u63A8\u6587\u5F8C\u52A0\u5169\u500B\u63DB\u884C\u53CA\u4E09\u500B\u77ED\u5283\u7DDA\u548C\u53E6\u4E00\u500B\u63DB\u884C\u3002\u82F1\u6587\u548C\u4E2D\u6587\u4E4B\u9593\u52A0\u7A7A\u683C\u3002\u82E5\u539F\u6587\u6709\u7DB2\u5740\uFF0C\u4FDD\u7559\u7DB2\u5740\uFF0C\u4E0D\u7528Markdown\u683C\u5F0F\uFF0C\u4E26\u5728\u7DB2\u5740\u524D\u52A0\u5169\u500B\u63DB\u884C\u3002`;
        prompt = prompt + "\n\n" + content;
        prompt = prompt.replace(/▍/g, "");
        prompt = prompt.replace(/】\n+https\:\/\/github.com[^\n]+\n/m, "\u3011\n");
        prompt = prompt.replace(/\*\*/gm, "");
        navigator.clipboard.writeText(prompt).then(function() {
          let line = editor.lineCount();
          let numLineFirstContent = 0;
          let frontMatterLineCount = 0;
          for (let i = 0; i < line; i++) {
            if (frontMatterLineCount == 2) {
              numLineFirstContent = i;
              break;
            }
            if (editor.getLine(i) == "---") {
              frontMatterLineCount++;
            }
          }
          for (let i = 0; i < line; i++) {
            if (editor.getLine(numLineFirstContent).trim() == "") {
              numLineFirstContent++;
            } else {
              break;
            }
          }
          let text = "";
          Array.from(Array(numLineFirstContent).keys()).forEach((i) => {
            const line2 = editor.getLine(i);
            text = text + line2 + "\n";
          });
          text = text.replace(/## References?[\:]?([\n]*.*)*$/, "");
          editor.setValue(text);
          const cursor = editor.getCursor();
          cursor.line = editor.lineCount() - 1;
          cursor.ch = 0;
          editor.setCursor(cursor);
          new import_obsidian37.Notice("copied to clipboard, please open chatgpt to paste");
          return renameTag(view.file, "c/t/d", "c/x/d");
        }, function(error) {
          new import_obsidian37.Notice(`error when copy to clipboard!`);
        }).then((a) => {
          renameTag(view.file, "c/t/r", "c/x/d");
        }).then((a) => {
          renameTag(view.file, "c/t/t", "c/x/d");
        }).then((a) => {
          renameTag(view.file, "c/t/p", "c/x/d");
        }).then((a) => {
          window.open(`Poe-app://`);
        });
      }
    });
    this.addObsidianIcon("chatgpt-to-twitter", "GX");
    this.addCommand({
      id: "chatgpt-to-twitter",
      name: "GX ChatGPT to Twitter",
      icon: `chatgpt-to-twitter`,
      editorCallback: (editor, view) => {
        if (!editor.getValue().contains("c/x/d")) {
          new import_obsidian37.Notice("Note type not c/x/d, do the action in wrong note?");
          return;
        }
        const isSuccess = this.convertChatGPTToTwitterFormat(editor);
        if (isSuccess) {
          renameTag(view.file, "c/x/d", "c/x/r");
        }
      }
    });
    this.addObsidianIcon("reverse-twitter-number-icon", "RT");
    this.addCommand({
      id: "reverse-twitter-numbering",
      name: "RT Reverse Twitter Numbering",
      icon: `reverse-twitter-number-icon`,
      editorCallback: (editor, view) => {
        if (!editor.getValue().contains("c/x/r") && !editor.getValue().contains("c/x/p")) {
          new import_obsidian37.Notice("Note type not c/x/r nor c/x/p, do the action in wrong note?");
          return;
        }
        this.reverseTwitterNumbering(editor);
        renameTag(view.file, "c/x/p", "c/x/d");
        renameTag(view.file, "c/x/r", "c/x/d");
      }
    });
    this.addObsidianIcon("threads-as-facebook-post-to-clipboard-icon", "FC");
    this.addCommand({
      id: "threads-as-facebook-post-to-clipboard",
      name: "FC Threads as Facebook post format to Clipboard",
      icon: `threads-as-facebook-post-to-clipboard-icon`,
      editorCallback: (editor, view) => {
        const value = editor.getValue();
        let text = this.convertThreadsContentToFormatForFacebookApp(editor);
        text = text.replace(/ᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳ\n+## [Rr]eferences?\:([\n]*.*)*$/, "");
        text = text.replace(/ᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳ\n+## [Rr]eferences?([\n]*.*)*$/, "");
        text = text.replace(/\n#+ /mg, "\n");
        const beforeTag = "c/t/t";
        const afterTag = "c/t/p";
        navigator.clipboard.writeText(text).then(function() {
          return renameTag(view.file, beforeTag, afterTag);
        }, function(error) {
          new import_obsidian37.Notice(`error when copy to clipboard!`);
        }).then((foundTag) => {
          if (foundTag) {
            new import_obsidian37.Notice(`Update notes type from tag="${beforeTag}" to tag="${afterTag}!
Copied fb content to clipboard!`);
          } else {
            new import_obsidian37.Notice(`Tag "${beforeTag}" not found
Copied fb content to clipboard!`);
          }
        });
      }
    });
    this.addObsidianIcon("threads-block-to-image", "TI");
    this.addCommand({
      id: "threads-block-to-image",
      name: "TI Threads segment to image",
      icon: `threads-block-to-image`,
      editorCallback: async (editor, view) => {
        const threadSegment = this.getThreadSegment(editor);
        const beforeTag = "c/t/d";
        const afterTag = "c/t/r";
        const result = await renameTag(view.file, beforeTag, afterTag);
        await renameThreadsTitle(app, view.file.path, view);
        console.log(result);
        new ThreadsToImagesModal(this.app, threadSegment).open();
      }
    });
    this.addObsidianIcon("chatgpt-generate-image", "GI");
    this.addCommand({
      id: "chatgpt-generate-image",
      name: "GI ChatGPT image",
      icon: `chatgpt-generate-image`,
      editorCallback: (editor, view) => {
        window.open("shortcuts://run-shortcut?name=ChatGPT%20Generate%20Image&x-success=obsidian://&x-cancel=obsidian://&x-error=obsidian://");
      }
    });
    this.addObsidianIcon("twitter-segment-to-clipboard", "XC");
    this.addCommand({
      id: "twitter-segment-to-clipboard",
      name: "XC Twitter segment to clipboard",
      icon: `twitter-segment-to-clipboard`,
      editorCallback: (editor, view) => {
        const threadSegment = this.getTwitterSegment(editor);
        const beforeTag = "c/x/r";
        const afterTag = "c/x/p";
        navigator.clipboard.writeText(threadSegment).then(function() {
          return renameTag(view.file, beforeTag, afterTag);
        }, function(error) {
          new import_obsidian37.Notice(`error when copy to clipboard!`);
        }).then((foundTag) => {
          if (foundTag) {
            new import_obsidian37.Notice(`Update notes type from tag="${beforeTag}" to tag="${afterTag}!
Copied
\`\`\`
${threadSegment}\`\`\`
to clipboard!`);
          } else {
            new import_obsidian37.Notice(`Tag "${beforeTag}" not found
Copied
\`\`\`
${threadSegment}\`\`\`
to clipboard!`);
          }
        });
      }
    });
    this.addObsidianIcon("segment-to-clipboard", "SC");
    this.addCommand({
      id: "segment-to-clipboard",
      name: "SC Segment to clipboard",
      icon: `segment-to-clipboard`,
      editorCallback: (editor, view) => {
        const threadSegment = this.getSegment(editor);
        this.addToClipboardHistory(threadSegment);
        navigator.clipboard.writeText(threadSegment).then(function() {
          new import_obsidian37.Notice(`Copied
\`\`\`
${threadSegment}\`\`\`
to clipboard!`);
        }, function(error) {
          new import_obsidian37.Notice(`error when copy to clipboard!`);
        });
      }
    });
    this.addCommand({
      id: "n-find-replace",
      name: "Find or Replace",
      icon: `file-search`,
      editorCallback: (editor, view) => {
        new FindReplaceModal(this.app).open();
      }
    });
    this.addCommand({
      id: "toggle-bullet-number-list",
      name: "Toggle Bullet Number List",
      icon: `bullet-list`,
      editorCallback: (editor, view) => {
        if (editor.getSelection().length > 0) {
          const listSelections = editor.listSelections();
          for (const listSelection of listSelections) {
            const a = listSelection.head.line;
            const b = listSelection.anchor.line;
            const fromLineNum = b > a ? a : b;
            const toLineNum = b > a ? b : a;
            for (let i = fromLineNum; i <= toLineNum; i++) {
              const line = editor.getLine(i);
              const lineContent = editor.getLine(i);
              const previousLineContent = i == 0 ? "" : editor.getLine(i - 1);
              if (/^(> )*\s*- /.test(lineContent)) {
                let n = "1.";
                const a2 = previousLineContent.match(/^\t*(\d+)\. /);
                if (a2) {
                  const nextN = parseInt(a2[0]) + 1;
                  n = nextN.toString() + ".";
                }
                const replacedLineContent = lineContent.replace(/^((> )*)(\s*)- /, "$1$3" + n + " ");
                editor.setLine(i, replacedLineContent);
              } else if (/^(> )*\s*[\d]+\. /.test(lineContent)) {
                const n = lineContent.replace(/^((> )*)(\s*)([\d]+\. ).*/, "$4");
                const replacedLineContent = lineContent.replace(/^((> )*)(\s*)[\d]+\. /, "$1$3");
                editor.setLine(i, replacedLineContent);
              } else {
                const replacedLineContent = lineContent.replace(/^((> )*)(\s*)/, "$1$3- ");
                editor.setLine(i, replacedLineContent);
              }
            }
          }
        } else {
          const cursor = editor.getCursor();
          const ch = cursor.ch;
          const line = cursor.line;
          const lineContent = editor.getLine(line);
          const previousLineContent = line == 0 ? "" : editor.getLine(line - 1);
          if (/^(> )*\s*- /.test(lineContent)) {
            let n = "1.";
            const a = previousLineContent.match(/^\t*(\d+)\. /);
            if (a) {
              const nextN = parseInt(a[0]) + 1;
              n = nextN.toString() + ".";
            }
            const replacedLineContent = lineContent.replace(/^((> )*)(\s*)- /, "$1$3" + n + " ");
            editor.setLine(line, replacedLineContent);
            cursor.ch = cursor.ch + n.length - 1;
            editor.setCursor(cursor);
          } else if (/^(> )*\s*[\d]+\. /.test(lineContent)) {
            const n = lineContent.replace(/^((> )*)(\s*)([\d]+\. ).*/, "$4");
            const replacedLineContent = lineContent.replace(/^((> )*)(\s*)[\d]+\. /, "$1$3");
            editor.setLine(line, replacedLineContent);
            cursor.ch = cursor.ch - n.length > 0 ? cursor.ch - n.length : 0;
            editor.setCursor(cursor);
          } else {
            const replacedLineContent = lineContent.replace(/^((> )*)(\s*)/, "$1$3- ");
            editor.setLine(line, replacedLineContent);
            cursor.ch = cursor.ch + 2;
            editor.setCursor(cursor);
          }
        }
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `-`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `-`
        }
      ]
    });
    this.addCommand({
      id: "copy-or-move-to-new-note",
      name: "Copy or Move to new note CMN",
      icon: `airplay`,
      editorCallback: async (editor, view) => {
        new CopyOrMoveToNewNoteModal(this.app, editor).open();
      }
    });
    this.addCommand({
      id: "editor-copy-line-to-clipboard",
      name: "Editor Copy Line to Clipboard",
      icon: `align-vertical-space-around`,
      editorCallback: (editor, view) => {
        const selection = exportCurrentSelection(editor);
        const copyContent = selection.contains("\n") ? selection : selection.replace(/^\t*- /, "").replace(/^\t*\d+\. /, "");
        this.addToClipboardHistory(copyContent);
        navigator.clipboard.writeText(copyContent).then(function() {
          new import_obsidian37.Notice(`Copied content
\`\`\`
${copyContent}
\`\`\`
to clipboard!`);
        }, function(error) {
          new import_obsidian37.Notice(`error when copy to clipboard!`);
        });
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: "/"
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: "/"
        }
      ]
    });
    this.addCommand({
      id: "editor-cut-line-to-clipboard",
      name: "Editor Cut Line to Clipboard",
      icon: `align-vertical-justify-center`,
      editorCallback: (editor, view) => {
        const selection = exportCurrentSelection(editor);
        const cursor = editor.getCursor();
        const copyContent = selection.contains("\n") ? selection : selection.replace(/^\t*- /, "").replace(/^\t*\d+\. /, "");
        let newContent = "";
        const selectionRange = getCurrentSelectionLineNumber(editor);
        for (let i = 0; i < editor.lineCount(); i++) {
          if (i < selectionRange.fromLineNum || i > selectionRange.toLineNum) {
            newContent = newContent + editor.getLine(i) + "\n";
          }
        }
        this.addToClipboardHistory(copyContent);
        navigator.clipboard.writeText(copyContent).then(function() {
          new import_obsidian37.Notice(`Copied content
\`\`\`
${copyContent}
\`\`\`
to clipboard!`);
        }, function(error) {
          new import_obsidian37.Notice(`error when copy to clipboard!`);
        });
        editor.setValue(newContent);
        cursor.line = selectionRange.fromLineNum;
        if (editor.getLine(selectionRange.fromLineNum).length < selectionRange.fromCh) {
          cursor.ch = editor.getLine(selectionRange.fromLineNum).length;
        }
        editor.setCursor(cursor);
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: "\\"
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: "\\"
        }
      ]
    });
    this.addCommand({
      id: "editor-indent-line",
      name: "Editor Indent Selection",
      icon: `right-arrow-with-tail`,
      editorCallback: (editor, view) => {
        const listSelections = editor.listSelections();
        listSelections.forEach((listSelection) => {
          const a = listSelection.head.line;
          const b = listSelection.anchor.line;
          const fromLineNum = b > a ? a : b;
          const toLineNum = b > a ? b : a;
          for (let i = fromLineNum; i <= toLineNum; i++) {
            const line = editor.getLine(i);
            editor.setLine(i, line.replace(/^/, "	"));
          }
        });
        let lss = [];
        listSelections.forEach((ls) => {
          const head = ls.head;
          head.ch = head.ch + 1;
          const anchor = ls.anchor;
          anchor.ch = anchor.ch + 1;
          const newLs = { anchor, head };
          lss.push(newLs);
        });
        editor.setSelections(lss);
      }
    });
    this.addCommand({
      id: "editor-outdent-line",
      name: "Editor Outdent Selection",
      icon: `left-arrow-with-tail`,
      editorCallback: (editor, view) => {
        const listSelections = editor.listSelections();
        listSelections.forEach((listSelection) => {
          const a = listSelection.head.line;
          const b = listSelection.anchor.line;
          const fromLineNum = b > a ? a : b;
          const toLineNum = b > a ? b : a;
          for (let i = fromLineNum; i <= toLineNum; i++) {
            const line = editor.getLine(i);
            editor.setLine(i, line.replace(/^\t/, ""));
          }
        });
        let lss = [];
        listSelections.forEach((ls) => {
          const head = ls.head;
          head.ch = head.ch + 1;
          const anchor = ls.anchor;
          anchor.ch = anchor.ch + 1;
          const newLs = { anchor, head };
          lss.push(newLs);
        });
        editor.setSelections(lss);
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  convertChatGPTToTwitterFormat(editor) {
    let line = editor.lineCount();
    let numLineFirstContent = 0;
    let frontMatterLineCount = 0;
    for (let i = 0; i < line; i++) {
      if (frontMatterLineCount == 2) {
        numLineFirstContent = i;
        break;
      }
      if (editor.getLine(i) == "---") {
        frontMatterLineCount++;
      }
    }
    for (let i = 0; i < line; i++) {
      if (editor.getLine(numLineFirstContent).trim() == "") {
        numLineFirstContent++;
      } else {
        break;
      }
    }
    let totalTweetCount = 1;
    Array.from(Array(line - numLineFirstContent).keys()).forEach((i) => {
      const line2 = editor.getLine(i + numLineFirstContent);
      let modifiedLine = line2.replace(/^____+/, "---").replace(/^----+/, "---");
      editor.setLine(i + numLineFirstContent, modifiedLine);
      if (modifiedLine == "---") {
        totalTweetCount = totalTweetCount + 1;
      }
    });
    let numTweet = 1;
    let readyToAddTweetCount = true;
    let text = "";
    Array.from(Array(numLineFirstContent).keys()).forEach((i) => {
      const line2 = editor.getLine(i);
      text = text + line2 + "\n";
    });
    Array.from(Array(line - numLineFirstContent).keys()).forEach((i) => {
      const line2 = editor.getLine(i + numLineFirstContent);
      let modifiedLine = line2;
      if (line2 == "---") {
        readyToAddTweetCount = true;
        numTweet = numTweet + 1;
      } else if (line2 != "" && readyToAddTweetCount) {
        if (!/^\d+\/\d+.*/.test(line2)) {
          modifiedLine = `${numTweet}/${totalTweetCount} ${line2}`;
        }
        readyToAddTweetCount = false;
      }
      text = text + modifiedLine + "\n";
    });
    text = text.replace("\u258D", "");
    const tweets = text.split("---");
    for (let i = 0; i < tweets.length; i++) {
      const tweet = tweets[i].replace(/(https:|http:|www\.)\S*/gm, "").replace(/^\n+/m, "").replace(/\n+$/m, "");
      if (tweet.length > 140) {
        new import_obsidian37.Notice("```\n" + tweet + "\n```\n\nexceed 140 characters (currently " + tweet.length + " characters). Probably cannot post in twitter. Please refine the tweet. Aborting");
        return false;
      }
    }
    editor.setValue(text);
    const cursor = editor.getCursor();
    cursor.line = editor.lineCount() - 1;
    editor.setCursor(cursor);
    return true;
  }
  reverseTwitterNumbering(editor) {
    let line = editor.lineCount();
    let numLineFirstContent = 0;
    let frontMatterLineCount = 0;
    for (let i = 0; i < line; i++) {
      if (frontMatterLineCount == 2) {
        numLineFirstContent = i;
        break;
      }
      if (editor.getLine(i) == "---") {
        frontMatterLineCount++;
      }
    }
    for (let i = 0; i < line; i++) {
      if (editor.getLine(numLineFirstContent).trim() == "") {
        numLineFirstContent++;
      } else {
        break;
      }
    }
    let text = "";
    Array.from(Array(numLineFirstContent).keys()).forEach((i) => {
      const line2 = editor.getLine(i);
      text = text + line2 + "\n";
    });
    Array.from(Array(line - numLineFirstContent).keys()).forEach((i) => {
      const line2 = editor.getLine(i + numLineFirstContent);
      const modifiedLine = line2.replace(/^\d+\/\d+ /, "");
      text = text + modifiedLine + "\n";
    });
    editor.setValue(text);
    const cursor = editor.getCursor();
    cursor.line = editor.lineCount() - 1;
    editor.setCursor(cursor);
  }
  convertThreadsContentToFormatForThreadsApp(editor) {
    let result = this.convertThreadsContentToLightPostFormat(editor, "\u{1F9F5}", "\n\n\n");
    result = result.replace(/https\:\/\/github.com[^\n]+\n\n\n/m, "");
    return result;
  }
  convertThreadsContentToFormatForFacebookApp(editor) {
    let result = this.convertThreadsContentToLightPostFormat(editor, "", "\n\n\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\n\n", (a) => a.replace("\u{1F447}", ""));
    result = result.replace(/https\:\/\/github.com[^\n]+\n\nᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳᅳ\n\n/m, "");
    return result;
  }
  convertThreadsContentToPOE(editor) {
    return this.convertThreadsContentToLightPostFormat(editor, "", "\n\n---\n\n", (a) => a.replace("\u{1F447}", ""));
  }
  /*
  	addTaskToPutIntoCardInThreadsContent(editor: Editor) {
  		let line = editor.lineCount();
  
  		let frontMatterLineCount = 0
  		let text = "";
  		for (let i = 0; i < line; i++) {
  			if (editor.getLine(i) == "---") {
  				frontMatterLineCount++
  			}
  			const line = editor.getLine(i);
  			
  			//if (frontMatterLineCount > 2 && line == "---") {
  			//	text = text + "%% #nm to zk %%\n\n"
  			//}
  			text = text + line + "\n"
  		}
  
  		editor.setValue(text);
  	}
  */
  convertThreadsContentToLightPostFormat(editor, headerIcon, paragraphSeparator, additionReplaceFn = (a) => a) {
    let line = editor.lineCount();
    let numLineFirstContent = 0;
    let frontMatterLineCount = 0;
    for (let i = 0; i < line; i++) {
      if (frontMatterLineCount == 2) {
        numLineFirstContent = i;
        break;
      }
      if (editor.getLine(i) == "---") {
        frontMatterLineCount++;
      }
    }
    for (let i = 0; i < line; i++) {
      if (editor.getLine(numLineFirstContent).trim() == "") {
        numLineFirstContent++;
      } else {
        break;
      }
    }
    let text = "";
    let newConsecutiveLineCount = 0;
    Array.from(Array(line - numLineFirstContent).keys()).forEach((i) => {
      const line2 = editor.getLine(i + numLineFirstContent);
      if (!line2.trim().startsWith("%%") || !line2.trim().endsWith("%%")) {
        if (line2 == "---") {
          newConsecutiveLineCount = 0;
        }
        if (line2 == "") {
          newConsecutiveLineCount++;
        } else {
          newConsecutiveLineCount = 0;
        }
        if (line2 == "" && newConsecutiveLineCount > 1) {
        } else {
          let modifiedLine = line2 == "---" ? "" : line2;
          modifiedLine = modifiedLine.replace(/^		- /g, "\u3000\u3000\u3000\u3000\u2022 ").replace(/^	- /g, "\u3000\u3000\u2022 ").replace(/^- /, "\u2022 ");
          modifiedLine = modifiedLine.replace(/^\[([^\[\]\(\)]+)\]\([^\[\]\(\)]+\)/g, "$1").replace(/[^!]\[([^\[\]\(\)]+)\]\([^\[\]\(\)]+\)/g, "$1");
          modifiedLine = modifiedLine.replace(/!\[([^\[\]\(\)]+)\]\(([^\[\]\(\)]+)\)/g, "$2");
          modifiedLine = modifiedLine.replace(/\*\*/gm, "");
          text = text + modifiedLine + "\n";
        }
      }
    });
    text = text.replace(/🧵[ ]+(.*)/g, headerIcon + "\u3010$1\u3011");
    text = additionReplaceFn(text);
    text = text.replace(/[\n\r]{3,}/gm, `${paragraphSeparator}\u258D`);
    text = text.replace("\n\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\n\n\u258D\n", "");
    let text2 = "";
    text.split("\n").forEach((line2) => {
      var l = "";
      if (line2.endsWith("\u3002") || line2.endsWith("\uFF1A") || line2.endsWith("\uFF5E") || line2.endsWith("\uFF01") || line2.startsWith("\u258Dhttp") || line2.startsWith("\u258D#") || line2 == "\u258D") {
        l = line2.replace(/^▍/gm, "");
      } else {
        l = line2;
      }
      text2 = text2 + l + "\n";
    });
    text2 = text2.replace("\n\n\n\n", "");
    text2 = text2.replace("\n\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\u1173\n\n\n", "");
    text2 = text2.replace(/\n\n## Opinion from ChatGPT\:([\n]*.*)*$/, "");
    text2 = text2.replace(/\n+$/, "");
    return text2;
  }
  getThreadSegment(editor) {
    let cursor = editor.getCursor();
    let line = cursor.line;
    let above = line;
    let below = line;
    while (above >= 0) {
      let l = editor.getLine(above);
      if (l == "---") {
        break;
      }
      above--;
    }
    if (editor.getLine(above) == "---") {
      above++;
    }
    while (true) {
      if (editor.getLine(above) == "") {
        above++;
      } else {
        break;
      }
    }
    while (below < editor.lineCount()) {
      let l = editor.getLine(below);
      if (l == "---") {
        break;
      }
      below++;
    }
    if (editor.getLine(below) == "---") {
      below--;
    }
    while (true) {
      if (editor.getLine(below) == "") {
        below--;
      } else {
        break;
      }
    }
    let text = "";
    Array.from(Array(below - above + 1).keys()).forEach((i) => {
      const line2 = editor.getLine(i + above);
      if (!line2.trim().startsWith("%%") || !line2.trim().endsWith("%%")) {
        let modifiedLine = editor.getLine(i + above);
        modifiedLine = modifiedLine.replace(/^\[([^\[\]\(\)]+)\]\([^\[\]\(\)]+\)/g, "$1").replace(/[^!]\[([^\[\]\(\)]+)\]\([^\[\]\(\)]+\)/g, "$1");
        text = text + modifiedLine + "\n";
      }
    });
    text = text.replace(/\n+$/, "");
    return text;
  }
  getSegment(editor) {
    let cursor = editor.getCursor();
    let line = cursor.line;
    let above = line;
    let below = line;
    while (above >= 0) {
      let l = editor.getLine(above);
      if (l == "---") {
        break;
      }
      above--;
    }
    if (editor.getLine(above) == "---") {
      above++;
    }
    while (true) {
      if (editor.getLine(above) == "") {
        above++;
      } else {
        break;
      }
    }
    while (below < editor.lineCount()) {
      let l = editor.getLine(below);
      if (l == "---") {
        break;
      }
      below++;
    }
    if (editor.getLine(below) == "---") {
      below--;
    }
    while (true) {
      if (editor.getLine(below) == "") {
        below--;
      } else {
        break;
      }
    }
    let text = "";
    Array.from(Array(below - above + 1).keys()).forEach((i) => {
      const line2 = editor.getLine(i + above);
      text = text + line2 + "\n";
    });
    text = text.replace(/\n+$/, "");
    return text;
  }
  getTwitterSegment(editor) {
    let cursor = editor.getCursor();
    let line = cursor.line;
    let above = line;
    let below = line;
    while (above >= 0) {
      let l = editor.getLine(above);
      if (l == "---") {
        break;
      }
      above--;
    }
    if (editor.getLine(above) == "---") {
      above++;
    }
    while (true) {
      if (editor.getLine(above) == "") {
        above++;
      } else {
        break;
      }
    }
    while (below < editor.lineCount()) {
      let l = editor.getLine(below);
      if (l == "---") {
        break;
      }
      below++;
    }
    if (editor.getLine(below) == "---") {
      below--;
    }
    while (true) {
      if (editor.getLine(below) == "") {
        below--;
      } else {
        break;
      }
    }
    let text = "";
    Array.from(Array(below - above + 1).keys()).forEach((i) => {
      const line2 = editor.getLine(i + above);
      if (!line2.trim().startsWith("%%") || !line2.trim().endsWith("%%")) {
        let modifiedLine = editor.getLine(i + above);
        if (!/\d+\/\d+ *【.*】/.test(modifiedLine)) {
          modifiedLine = modifiedLine.replace(/^\[([^\[\]\(\)]+)\]\([^\[\]\(\)]+\)/g, "$1").replace(/[^!]\[([^\[\]\(\)]+)\]\([^\[\]\(\)]+\)/g, "$1").replace(/https[^\n]+\.jpeg/g, "").replace(/^\s+$/g, "").replace(/^- /, "\u2022 ");
          if (!/^\d+\. /.test(modifiedLine) && !/^• /.test(modifiedLine)) {
            modifiedLine = modifiedLine.replace(/？([^】」\n])/g, "\uFF1F\n\n$1").replace(/。([^】」\n])/g, "\u3002\n\n$1").replace(/！([^】」\n])/g, "\uFF01\n\n$1").replace(/～([^】」\n])/g, "\uFF5E\n\n$1");
          }
        }
        text = text + modifiedLine + "\n";
      }
    });
    text = text.replace(/\n+$/, "");
    return text;
  }
  getThreadsSegment(editor) {
    let cursor = editor.getCursor();
    let line = cursor.line;
    let above = line;
    let below = line;
    while (above >= 0) {
      let l = editor.getLine(above);
      if (l == "---") {
        break;
      }
      above--;
    }
    if (editor.getLine(above) == "---") {
      above++;
    }
    while (true) {
      if (editor.getLine(above) == "") {
        above++;
      } else {
        break;
      }
    }
    while (below < editor.lineCount()) {
      let l = editor.getLine(below);
      if (l == "---") {
        break;
      }
      below++;
    }
    if (editor.getLine(below) == "---") {
      below--;
    }
    while (true) {
      if (editor.getLine(below) == "") {
        below--;
      } else {
        break;
      }
    }
    let text = "";
    Array.from(Array(below - above + 1).keys()).forEach((i) => {
      const line2 = editor.getLine(i + above);
      if (!line2.trim().startsWith("%%") || !line2.trim().endsWith("%%")) {
        let modifiedLine = editor.getLine(i + above);
        if (!/\d+\/\d+ *【.*】/.test(modifiedLine)) {
          modifiedLine = modifiedLine.replace(/🧵[ ]+(.*)/g, "\u3010$1\u3011").replace(/^\[([^\[\]\(\)]+)\]\([^\[\]\(\)]+\)/g, "$1").replace(/[^!]\[([^\[\]\(\)]+)\]\([^\[\]\(\)]+\)/g, "$1").replace(/!\[.*\]\(https[^\n]+\.jpeg\)/g, "").replace(/https[^\n]+\.jpeg/g, "").replace(/^\s+$/g, "").replace(/^- /, "\u2022 ").replace(/^#+ /, "");
          if (!/^\d+\. /.test(modifiedLine) && !/^• /.test(modifiedLine)) {
            modifiedLine = modifiedLine.replace(/？([^】」\n])/g, "\uFF1F\n\n$1").replace(/。([^】」\n])/g, "\u3002\n\n$1").replace(/！([^】」\n])/g, "\uFF01\n\n$1").replace(/～([^】」\n])/g, "\uFF5E\n\n$1");
          }
        }
        text = text + modifiedLine + "\n";
      }
    });
    text = text.replace(/\n+$/, "");
    return text;
  }
  async add3DaysActionNoteContent(vault) {
    const scheduleNoteWithoutMd = "D/Query Schedule and Actions next 3 days";
    const scheduleNote = `${scheduleNoteWithoutMd}.md`;
    if (vault.getAbstractFileByPath(scheduleNote) == null) {
      await vault.create(scheduleNote, "");
    }
    let noteContent = "[[Query Schedule and Actions next 3 days]]\n";
    const excludeNotes = [scheduleNoteWithoutMd, "D/Scheduling"];
    Array.from(Array(3).keys()).forEach((i) => noteContent += this.getQueryDateAndActionString(i, excludeNotes));
    const otherDays = this.getQueryActionsThisWeek(3);
    noteContent = noteContent + `## nn / wn
\`\`\`query
tag:#nn OR tag:#wn${otherDays}
\`\`\`

## tt
\`\`\`query
tag:#tt
\`\`\`

`;
    noteContent = noteContent + this.getQueryFutureDaysThisWeek("Future Dates", 3, 6, excludeNotes);
    noteContent = noteContent + this.getQueryNext2MonthString(excludeNotes);
    noteContent = noteContent + this.getQueryFutureDaysThisWeek("Past Dates", -7, -1, excludeNotes);
    vault.modify(vault.getAbstractFileByPath(scheduleNote), noteContent);
  }
  async addActionNoteContent(vault, folderName, noteTitleWithoutMd, scheduleNoteTitleWithoutMd, nOrW) {
    const nowActionNoteWithoutMd = `${folderName}/${noteTitleWithoutMd}`;
    const nowActionNote = `${nowActionNoteWithoutMd}.md`;
    if (vault.getAbstractFileByPath(nowActionNote) == null) {
      await vault.create(nowActionNote, "");
    }
    let nowActionNoteContent = "";
    Array.from(Array(2).keys()).forEach((i) => nowActionNoteContent += this.getQueryActionString(i, nOrW));
    nowActionNoteContent += `\`\`\`query
tag:#${nOrW}t
\`\`\`
`;
    nowActionNoteContent += `\`\`\`query
`;
    Array.from(Array(5).keys()).forEach((i) => nowActionNoteContent += this.getQueryWeekDay(i + 2, nOrW));
    nowActionNoteContent += `tag:#${nOrW}n
\`\`\`
`;
    nowActionNoteContent += `Scheduling: [[${scheduleNoteTitleWithoutMd}]]
`;
    nowActionNoteContent += `[[${noteTitleWithoutMd}]]
`;
    vault.modify(vault.getAbstractFileByPath(nowActionNote), nowActionNoteContent);
  }
  getQueryDateAndActionString(addDay, excludeNotes) {
    const dateMoment = (0, import_moment3.default)().add(addDay, "d");
    const dateYYYYMMDD = dateMoment.format("YYYYMMDD");
    const dateEachYYDD = "\\d\\d\\d\\d" + dateMoment.format("MMDD");
    const dateEachDD = "\\d\\d\\d\\d\\d\\d" + dateMoment.format("DD");
    const dayOfWeek = dateMoment.format("E");
    const dayOfWeekLong = dateMoment.format("ddd");
    const excludeNoteStr = excludeNotes.map((excludeNote) => `-path:"${excludeNote}" `).join("");
    return `## ${dateYYYYMMDD} ${dayOfWeekLong}
\`\`\`query
(" ${dateYYYYMMDD}" OR "${dateYYYYMMDD} " OR ${dateEachYYDD} OR ${dateEachDD} OR tag:#n${dayOfWeek} OR tag:#w${dayOfWeek}) ${excludeNoteStr}-block:(query)
\`\`\`

`;
  }
  getQueryActionsThisWeek(excludeNumDays) {
    let excludes = [];
    let includes = [1, 2, 3, 4, 5, 6, 7];
    Array.from(Array(excludeNumDays).keys()).forEach((i) => {
      const dateMoment = (0, import_moment3.default)().add(i, "d");
      const dayOfWeek = parseInt(dateMoment.format("E"));
      excludes.push(dayOfWeek);
    });
    let aaa = includes.filter((i) => {
      for (const e of excludes) {
        if (e == i) {
          return false;
        }
      }
      return true;
    });
    let output = "";
    aaa.forEach((i) => output += ` OR tag:#n${i} OR tag:#w${i}`);
    return output;
  }
  getQueryFutureDaysThisWeek(header, from, to, excludeNotes) {
    let includes = [];
    for (let i = from; i <= to; i++) {
      let dateMoment = (0, import_moment3.default)().add(i, "d");
      includes.push(dateMoment);
    }
    let output = `## ${header}
\`\`\`query
(`;
    includes.forEach((i) => {
      const dateYYYYMMDD = i.format("YYYYMMDD");
      const dateEachYYDD = "\\d\\d\\d\\d" + i.format("MMDD");
      const dateEachDD = "\\d\\d\\d\\d\\d\\d" + i.format("DD");
      output += `" ${dateYYYYMMDD}" OR "${dateYYYYMMDD} " OR ${dateEachYYDD} OR ${dateEachDD} OR `;
    });
    output = output.replace(/ OR $/, "");
    output += ")";
    const excludeNoteStr = excludeNotes.map((excludeNote) => `-path:"${excludeNote}" `).join("");
    output += ` ${excludeNoteStr}-block:(query)`;
    output += `
\`\`\`

`;
    return output;
  }
  getQueryNext2MonthString(excludeNotes) {
    const currentMonthYYYYMM = (0, import_moment3.default)().format("YYYYMM");
    const dateMoment = (0, import_moment3.default)().add(1, "M");
    const nextMonthYYYYMM = dateMoment.format("YYYYMM");
    const excludeNoteStr = excludeNotes.map((excludeNote) => `-path:"${excludeNote}" `).join("");
    return `## ${currentMonthYYYYMM} and ${nextMonthYYYYMM}
\`\`\`query
(${currentMonthYYYYMM}\\d\\d OR ${nextMonthYYYYMM}\\d\\d ${excludeNoteStr}-path:"D/Scheduling" -block:(query)
\`\`\`

`;
  }
  getQueryDateString(addDay, excludeNote) {
    const dateMoment = (0, import_moment3.default)().add(addDay, "d");
    const dateYYYYMMDD = dateMoment.format("YYYYMMDD");
    const dateEachYYDD = "\\d\\d\\d\\d" + dateMoment.format("MMDD");
    const dateEachDD = "\\d\\d\\d\\d\\d\\d" + dateMoment.format("DD");
    return `${dateYYYYMMDD}
\`\`\`query
(${dateYYYYMMDD} OR ${dateEachYYDD} OR ${dateEachDD}) -path:"${excludeNote}" -block:(query)
\`\`\`
`;
  }
  getQueryActionString(addDay, actionType) {
    const dateMoment = (0, import_moment3.default)().add(addDay, "d");
    const dayOfWeek = dateMoment.format("E");
    return `\`\`\`query
tag:#${actionType}${dayOfWeek}
\`\`\`
`;
  }
  getQueryWeekDay(addDay, actionType) {
    const dateMoment = (0, import_moment3.default)().add(addDay, "d");
    const dayOfWeek = dateMoment.format("E");
    return `tag:#${actionType}${dayOfWeek} OR `;
  }
  addNewLaterActionIcon(t) {
    this.addObsidianIcon(`${t}l-icon-new`, `${t}l`);
  }
  addActionIcon(t) {
    this.addObsidianIcon(`${t}-icon`, `#${t}`);
  }
  addObsidianIcon(iconName, iconText) {
    const svg = `<text stroke='#000' transform='matrix(2.79167 0 0 2.12663 -34.0417 -25.2084)' xml:space='preserve' text-anchor='start' font-family='monospace' font-size='24' y='44' x='19' stroke-width='0' fill='currentColor'>${iconText}</text>`;
    (0, import_obsidian38.addIcon)(iconName, svg);
  }
  addNewLaterAction(t) {
    this.addCommand({
      id: `add-new-${t}-later-action`,
      name: `Add ${t}l task`,
      icon: `${t}l-icon-new`,
      editorCallback: (editor, view) => {
        const cursor = editor.getCursor();
        editor.replaceRange(`#${t}l `, cursor);
        cursor.ch = cursor.ch + 4;
        editor.setCursor(cursor);
      }
      /*,
      hotkeys: [
      	{
      		modifiers: [`Ctrl`, `Meta`, `Shift`],
      		key: t == 'n' ? '1' : '2'
      	},
      	{
      		modifiers: [`Ctrl`, `Alt`, `Shift`],
      		key: t == 'n' ? '1' : '2'
      	}
      ]*/
    });
  }
  processLineForActionTag(i, line, editor, app2, view, t, isOnlyOneLine) {
    const cursor = editor.getCursor();
    const replacedLine = line.replace(/ a\/w\/./, ` a/w/${t}`).replace(/ a\/n\/./, ` a/n/${t}`).replace(/#w. /, `#w${t} `).replace(/#n. /, `#n${t} `).replace(/#w.$/, `#w${t}`).replace(/#n.$/, `#n${t}`);
    if (line.contains(`#n${t} `) || line.contains(`#w${t} `)) {
      const nt = `#n${t} `;
      const wt = `#w${t} `;
      const replaceLineToRemoveTag = line.replace(`#n${t} `, ``).replace(`#w${t} `, ``);
      editor.setLine(i, replaceLineToRemoveTag);
      if (isOnlyOneLine) {
        const ntIndex = line.indexOf(nt);
        const wtIndex = line.indexOf(wt);
        const index = ntIndex == -1 ? wtIndex : ntIndex;
        const newCh = cursor.ch <= index ? cursor.ch : cursor.ch >= index + 4 ? cursor.ch - 4 : index;
        cursor.ch = newCh;
        editor.setCursor(cursor);
      }
    } else if (line.contains(` #n${t}`) || line.contains(` #w${t}`)) {
      const nt = `#n${t} `;
      const wt = `#w${t} `;
      const replaceLineToRemoveTag = line.replace(` #n${t}`, ``).replace(` #w${t}`, ``);
      editor.setLine(i, replaceLineToRemoveTag);
      if (isOnlyOneLine) {
        const ntIndex = line.indexOf(nt);
        const wtIndex = line.indexOf(wt);
        const index = ntIndex == -1 ? wtIndex : ntIndex;
        const newCh = cursor.ch <= index ? cursor.ch : cursor.ch >= index + 4 ? cursor.ch - 4 : index;
        cursor.ch = newCh;
        editor.setCursor(cursor);
      }
    } else if (line.contains(` a/n/${t}`) || line.contains(` a/w/${t}`)) {
    } else if (replacedLine == line) {
      let { frontmatter } = app2.metadataCache.getFileCache(view.file) || {};
      const fmtags = (0, import_obsidian37.parseFrontMatterTags)(frontmatter) || [];
      for (const tag2 of fmtags) {
        if (tag2.contains(`#a/w/`)) {
          let modifiedLine = line;
          if (/^\t*- /.test(line)) {
            modifiedLine = line.replace(/^(\t*- )/, `$1#w${t} `);
          } else if (/^\t*\d+\. /.test(line)) {
            modifiedLine = line.replace(/^(\t*\d+\. )/, `$1#w${t} `);
          } else {
            modifiedLine = line.replace(/^/, `#w${t} `);
          }
          editor.setLine(i, modifiedLine);
          if (isOnlyOneLine) {
            cursor.ch = cursor.ch + 4;
            editor.setCursor(cursor);
          }
          return;
        }
        if (tag2.contains(`#a/n/`)) {
          let modifiedLine = line;
          if (/^\t*- /.test(line)) {
            modifiedLine = line.replace(/^(\t*- )/, `$1#n${t} `);
          } else if (/^\t*\d+\. /.test(line)) {
            modifiedLine = line.replace(/^(\t*\d+\. )/, `$1#n${t} `);
          } else {
            modifiedLine = line.replace(/^/, `#n${t} `);
          }
          editor.setLine(i, modifiedLine);
          if (isOnlyOneLine) {
            cursor.ch = cursor.ch + 4;
            editor.setCursor(cursor);
          }
          return;
        }
      }
      if (isOnlyOneLine) {
        new AddTaskTagModal(this.app, editor, t).open();
      } else {
        new import_obsidian37.Notice("Please add #a/w/ or #a/n/ tag manually when want to add action tag in multiple lines");
      }
    } else {
      editor.setLine(i, replacedLine);
      if (isOnlyOneLine) {
        editor.setCursor(cursor);
      }
    }
  }
  addActionCommand(t) {
    this.addCommand({
      id: `to-w${t}-n${t}`,
      name: `To w${t} or n${t}`,
      icon: `${t}-icon`,
      editorCallback: (editor, view) => {
        const listSelections = editor.listSelections();
        for (const listSelection of listSelections) {
          const a = listSelection.head.line;
          const b = listSelection.anchor.line;
          const fromLineNum = b > a ? a : b;
          const toLineNum = b > a ? b : a;
          const isOnlyOneLine = fromLineNum == toLineNum;
          for (let i = fromLineNum; i <= toLineNum; i++) {
            const line = editor.getLine(i);
            this.processLineForActionTag(i, line, editor, app, view, t, isOnlyOneLine);
          }
        }
      },
      hotkeys: [
        {
          modifiers: this.is1To7(t) ? [`Ctrl`, `Meta`] : [`Ctrl`, `Meta`, `Shift`],
          key: `${t}`
        },
        {
          modifiers: this.is1To7(t) ? [`Ctrl`, `Alt`] : [`Ctrl`, `Alt`, `Shift`],
          key: `${t}`
        }
      ]
    });
  }
  addFollowUpCommand(t) {
    let name = "";
    if (t === "t") {
      name = "To Try";
    } else if (t === "e") {
      name = "To Explore";
    } else if (t === "m") {
      name = "To Move";
    }
    this.addCommand({
      id: `to-t${t}`,
      name: `To t${t} ${name}`,
      icon: `${t}-icon`,
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        const cursor = editor.getCursor();
        const lineNumber = editor.getCursor().line;
        const line = editor.getLine(lineNumber);
        const replacedLine = line.replace(/#t. /, `#t${t} `).replace(/#t.$/, `#t${t}`);
        if (line.contains(`#t${t} `)) {
          const tt = `#t${t} `;
          const replaceLineToRemoveTag = line.replace(`#t${t} `, ``);
          editor.setLine(lineNumber, replaceLineToRemoveTag);
          const ttIndex = line.indexOf(tt);
          const index = ttIndex;
          const newCh = cursor.ch <= index ? cursor.ch : cursor.ch >= index + 4 ? cursor.ch - 4 : index;
          cursor.ch = newCh;
          editor.setCursor(cursor);
        } else if (line.contains(` #t${t}`)) {
          const tt = `#t${t} `;
          const replaceLineToRemoveTag = line.replace(` #t${t}`, ``);
          editor.setLine(lineNumber, replaceLineToRemoveTag);
          const ttIndex = line.indexOf(tt);
          const index = ttIndex;
          const newCh = cursor.ch <= index ? cursor.ch : cursor.ch >= index + 4 ? cursor.ch - 4 : index;
          cursor.ch = newCh;
          editor.setCursor(cursor);
        } else if (replacedLine == line) {
          let modifiedLine = line;
          if (/^\t*- /.test(line)) {
            modifiedLine = line.replace(/^(\t*- )/, `$1#t${t} `);
          } else if (/^\t*\d+\. /.test(line)) {
            modifiedLine = line.replace(/^(\t*\d+\. )/, `$1t${t} `);
          } else {
            modifiedLine = line.replace(/^/, `#t${t} `);
          }
          editor.setLine(cursor.line, modifiedLine);
          cursor.ch = cursor.ch + 4;
          editor.setCursor(cursor);
        } else {
          editor.setLine(lineNumber, replacedLine);
          editor.setCursor(cursor);
        }
      },
      hotkeys: [
        {
          modifiers: [`Ctrl`, `Meta`, `Shift`],
          key: `${t}`
        },
        {
          modifiers: [`Ctrl`, `Alt`, `Shift`],
          key: `${t}`
        }
      ]
    });
  }
  is1To7(t) {
    if (t == "1" || t == "2" || t == "3" || t == "4" || t == "5" || t == "6" || t == "7") {
      return true;
    } else {
      return false;
    }
  }
  addToClipboardHistory(content) {
    const index = clipboardHistory.indexOf(content, 0);
    if (index > -1) {
      clipboardHistory.splice(index, 1);
    }
    if (content.length > 0) {
      clipboardHistory.push(content);
    }
  }
  async onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_NOTE_LIST);
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_RECENT_VIEWED_NOTES);
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_RECENT_FILE);
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_CURRENT_NOTE_ALL_LINE);
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_CURRENT_OURSTANDING_TASK);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleSettingTab = class extends import_obsidian37.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for my awesome plugin." });
    new import_obsidian37.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      console.log("Secret: " + value);
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
/*! Bundled license information:

moment/moment.js:
  (*! moment.js *)
  (*! version : 2.29.1 *)
  (*! authors : Tim Wood, Iskren Chernev, Moment.js contributors *)
  (*! license : MIT *)
  (*! momentjs.com *)
*/
//# sourceMappingURL=data:application/json;base64,
